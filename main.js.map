{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/changelog/changelog.component.ts","./src/app/changelog/changelog.component.html","./src/app/classes/context-menu-item.ts","./src/app/classes/domain.ts","./src/app/classes/filter.ts","./src/app/classes/gradient.ts","./src/app/classes/index.ts","./src/app/classes/layout-options.ts","./src/app/classes/link.ts","./src/app/classes/metadata.ts","./src/app/classes/stix/asset.ts","./src/app/classes/stix/campaign.ts","./src/app/classes/stix/data-component.ts","./src/app/classes/stix/group.ts","./src/app/classes/stix/index.ts","./src/app/classes/stix/matrix.ts","./src/app/classes/stix/mitigation.ts","./src/app/classes/stix/note.ts","./src/app/classes/stix/software.ts","./src/app/classes/stix/stix-object.ts","./src/app/classes/stix/tactic.ts","./src/app/classes/stix/technique.ts","./src/app/classes/tab.ts","./src/app/classes/technique-vm.ts","./src/app/classes/version-changelog.ts","./src/app/classes/version.ts","./src/app/classes/view-model.ts","./src/app/datatable/data-table.component.ts","./src/app/datatable/data-table.component.html","./src/app/help/help.component.ts","./src/app/help/help.component.html","./src/app/layer-information/layer-information.component.ts","./src/app/layer-information/layer-information.component.html","./src/app/layer-upgrade/changelog-cell/changelog-cell.component.ts","./src/app/layer-upgrade/changelog-cell/changelog-cell.component.html","./src/app/layer-upgrade/layer-upgrade.component.ts","./src/app/layer-upgrade/layer-upgrade.component.html","./src/app/list-input/list-input.component.ts","./src/app/list-input/list-input.component.html","./src/app/matrix/cell.ts","./src/app/matrix/matrix-common.ts","./src/app/matrix/matrix-flat/matrix-flat.component.ts","./src/app/matrix/matrix-flat/matrix-flat.component.html","./src/app/matrix/matrix-mini/matrix-mini.component.ts","./src/app/matrix/matrix-mini/matrix-mini.component.html","./src/app/matrix/matrix-side/matrix-side.component.ts","./src/app/matrix/matrix-side/matrix-side.component.html","./src/app/matrix/tactic-cell/tactic-cell.component.ts","./src/app/matrix/tactic-cell/tactic-cell.component.html","./src/app/matrix/technique-cell/cell-popover.ts","./src/app/matrix/technique-cell/contextmenu/contextmenu.component.ts","./src/app/matrix/technique-cell/contextmenu/contextmenu.component.html","./src/app/matrix/technique-cell/technique-cell.component.ts","./src/app/matrix/technique-cell/technique-cell.component.html","./src/app/matrix/technique-cell/tooltip/tooltip.component.ts","./src/app/matrix/technique-cell/tooltip/tooltip.component.html","./src/app/search-and-multiselect/search-and-multiselect.component.ts","./src/app/search-and-multiselect/search-and-multiselect.component.html","./src/app/services/config.service.ts","./src/app/services/data.service.ts","./src/app/services/icons.service.ts","./src/app/services/viewmodels.service.ts","./src/app/sidebar/sidebar.component.ts","./src/app/sidebar/sidebar.component.html","./src/app/svg-export/renderable-objects/index.ts","./src/app/svg-export/renderable-objects/renderable-matrix.ts","./src/app/svg-export/renderable-objects/renderable-tactic.ts","./src/app/svg-export/renderable-objects/renderable-technique.ts","./src/app/svg-export/svg-export.component.ts","./src/app/svg-export/svg-export.component.html","./src/app/tabs/tabs.component.ts","./src/app/tabs/tabs.component.html","./src/app/utils/cookies.ts","./src/app/utils/globals.ts","./src/app/utils/taxii2lib.ts","./src/app/version-upgrade/version-upgrade.component.ts","./src/app/version-upgrade/version-upgrade.component.html","./src/environments/environment.ts","./src/main.ts","ignored|/home/felix/Proyectos/unveil-navigator/nav-app/node_modules/seedrandom|crypto"],"sourcesContent":["import { Component, ViewChild, HostListener, OnInit } from '@angular/core';\nimport { Title } from '@angular/platform-browser';\nimport { TabsComponent } from './tabs/tabs.component';\nimport { ConfigService } from './services/config.service';\nimport * as globals from './utils/globals';\nimport { IconsService } from './services/icons.service';\nimport { deleteCookie, getCookie, hasCookie, setCookie } from './utils/cookies';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n    @ViewChild(TabsComponent) tabsComponent;\n\n    navVersion: string = globals.navVersion;\n    public user_theme: string;\n    title = 'UNVEIL Navigator';\n\n    @HostListener('window:beforeunload', ['$event'])\n    promptNavAway($event) {\n        if (!this.configService.getFeature('leave_site_dialog')) return;\n        //this text only shows in the data, not visible to user as far as I can tell\n        //however, if it's not included the window doesn't open.\n        $event.returnValue = 'Are you sure you want to navigate away? Your data may be lost!';\n    }\n\n    constructor(\n        public configService: ConfigService,\n        private iconsService: IconsService,\n        public titleService: Title\n    ) {\n        Array.prototype.includes = function (value): boolean {\n            for (let i = 0; i < this.length; i++) {\n                if (this[i] === value) return true;\n            }\n            return false;\n        };\n        if (hasCookie('is_user_theme_dark') && getCookie('is_user_theme_dark') === 'true') {\n            this.user_theme = 'theme-override-dark';\n        } else if (getCookie('is_user_theme_dark') === 'false') {\n            this.user_theme = 'theme-override-light';\n        } else {\n            this.user_theme = 'theme-use-system';\n        }\n    }\n\n    ngOnInit() {\n        this.iconsService.registerIcons();\n        this.titleService.setTitle(this.title);\n    }\n\n    themeChangeHandler(theme: string) {\n        if (theme === 'system') {\n            if (hasCookie('is_user_theme_dark')) deleteCookie('is_user_theme_dark');\n            this.user_theme = 'theme-use-system';\n        } else {\n            this.user_theme = theme === 'dark' ? 'theme-override-dark' : 'theme-override-light';\n            setCookie('is_user_theme_dark', theme === 'dark' ? 'true' : 'false', 180);\n        }\n    }\n}\n","<div [ngClass]=\"user_theme\">\n    <div class=\"app-container\">\n        <div class=\"nav-app\">\n            <tabs (onUserThemeChange)=\"themeChangeHandler($event)\" [userTheme]=\"user_theme\"></tabs>\n            <button class=\"version-footer\" (click)=\"tabsComponent.openDialog('changelog')\">UNVEIL Navigator v{{ navVersion }}</button>\n        </div>\n    </div>\n</div>\n","import { BrowserModule, Title } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { APP_INITIALIZER, NgModule } from '@angular/core';\nimport 'rxjs/add/operator/map';\n\n// material\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\nimport { MatMenuModule } from '@angular/material/menu';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatSidenavModule } from '@angular/material/sidenav';\nimport { ColorPickerModule } from 'ngx-color-picker';\nimport { DndModule } from 'ngx-drag-drop';\nimport { PopoverModule } from 'ngx-smart-popover';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { DataTableComponent } from './datatable/data-table.component';\nimport { TabsComponent } from './tabs/tabs.component';\nimport { HelpComponent } from './help/help.component';\nimport { SvgExportComponent } from './svg-export/svg-export.component';\nimport { TechniqueCellComponent } from './matrix/technique-cell/technique-cell.component';\nimport { MatrixSideComponent } from './matrix/matrix-side/matrix-side.component';\nimport { MatrixFlatComponent } from './matrix//matrix-flat/matrix-flat.component';\nimport { MatrixMiniComponent } from './matrix//matrix-mini/matrix-mini.component';\nimport { TooltipComponent } from './matrix/technique-cell/tooltip/tooltip.component';\nimport { SearchAndMultiselectComponent } from './search-and-multiselect/search-and-multiselect.component';\nimport { ContextmenuComponent } from './matrix/technique-cell/contextmenu/contextmenu.component';\nimport { TacticCellComponent } from './matrix/tactic-cell/tactic-cell.component';\nimport { VersionUpgradeComponent } from './version-upgrade/version-upgrade.component';\nimport { SidebarComponent } from './sidebar/sidebar.component';\nimport { LayerUpgradeComponent } from './layer-upgrade/layer-upgrade.component';\nimport { ChangelogCellComponent } from './layer-upgrade/changelog-cell/changelog-cell.component';\nimport { MatCardModule } from '@angular/material/card';\nimport { MatDividerModule } from '@angular/material/divider';\nimport { MatStepperModule } from '@angular/material/stepper';\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\nimport { MarkdownModule } from 'ngx-markdown';\nimport { LayerInformationComponent } from './layer-information/layer-information.component';\nimport { ChangelogComponent } from './changelog/changelog.component';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { ListInputComponent } from './list-input/list-input.component';\nimport { ConfigService } from './services/config.service';\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        DataTableComponent,\n        TabsComponent,\n        HelpComponent,\n        SvgExportComponent,\n        TechniqueCellComponent,\n        MatrixSideComponent,\n        MatrixFlatComponent,\n        MatrixMiniComponent,\n        TooltipComponent,\n        SearchAndMultiselectComponent,\n        ContextmenuComponent,\n        TacticCellComponent,\n        VersionUpgradeComponent,\n        SidebarComponent,\n        LayerUpgradeComponent,\n        ChangelogCellComponent,\n        LayerInformationComponent,\n        ChangelogComponent,\n        ListInputComponent,\n    ],\n    imports: [\n        BrowserModule,\n        HttpClientModule,\n        BrowserAnimationsModule,\n        MatSelectModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatInputModule,\n        MatButtonModule,\n        MatIconModule,\n        MatProgressSpinnerModule,\n        MatCheckboxModule,\n        MatTooltipModule,\n        MatMenuModule,\n        MatExpansionModule,\n        MatDialogModule,\n        MatSnackBarModule,\n        ColorPickerModule,\n        DndModule,\n        MatSidenavModule,\n        MatCardModule,\n        MatDividerModule,\n        MatStepperModule,\n        MatPaginatorModule,\n        MarkdownModule.forRoot(),\n        PopoverModule,\n        MatTabsModule,\n    ],\n    exports: [MatSelectModule, MatInputModule, MatButtonModule, MatIconModule, MatTooltipModule, MatMenuModule, MatExpansionModule, MatTabsModule],\n    providers: [\n        Title,\n        ConfigService,\n        {\n            provide: APP_INITIALIZER,\n            useFactory: (configService: ConfigService) => {\n                return () => configService.loadConfig();\n            },\n            deps: [ConfigService],\n            multi: true,\n        },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule {}\n","import { Component, Inject, ViewChild } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\nimport { MarkdownComponent, MarkdownService } from 'ngx-markdown';\n\n@Component({\n    selector: 'app-changelog',\n    templateUrl: './changelog.component.html',\n})\nexport class ChangelogComponent {\n    @ViewChild('markdownElement', { static: false }) private markdownElement: MarkdownComponent;\n\n    constructor(\n        private dialog: MatDialog,\n        private markdownService: MarkdownService,\n        @Inject(MAT_DIALOG_DATA) public data\n    ) {\n        // intentionally left blank\n    }\n}\n","<div class=\"changelog-dialog\">\n    <div class=\"content markdown\">\n        <markdown #markdownElement [src]=\"'./CHANGELOG.md'\"></markdown>\n    </div>\n    <div class=\"close-button\">\n        <button mat-button mat-dialog-close>close</button>\n    </div>\n</div>\n","import { Tactic } from './stix/tactic';\nimport { Technique } from './stix/technique';\n\nexport class ContextMenuItem {\n    public readonly label: string;\n    private readonly url: string;\n    private readonly subtechnique_url: string;\n\n    constructor(label, url, subtechnique_url = null) {\n        this.label = label;\n        this.url = url;\n        this.subtechnique_url = subtechnique_url;\n    }\n\n    public getReplacedURL(technique: Technique, tactic: Tactic): string {\n        if (this.subtechnique_url && technique.isSubtechnique) {\n            return this.subtechnique_url\n                .replace(/{{parent_technique_attackID}}/g, technique.parent.attackID)\n                .replace(/{{parent_technique_stixID}}/g, technique.parent.id)\n                .replace(/{{parent_technique_name}}/g, technique.parent.name.replace(/ /g, '-').toLowerCase())\n\n                .replace(/{{subtechnique_attackID}}/g, technique.attackID)\n                .replace(/{{subtechnique_attackID_suffix}}/g, technique.attackID.split('.')[1])\n                .replace(/{{subtechnique_stixID}}/g, technique.id)\n                .replace(/{{subtechnique_name}}/g, technique.name.replace(/ /g, '-').toLowerCase())\n\n                .replace(/{{tactic_attackID}}/g, tactic.attackID)\n                .replace(/{{tactic_stixID}}/g, tactic.id)\n                .replace(/{{tactic_name}}/g, tactic.shortname);\n        } else {\n            return this.url\n                .replace(/{{technique_attackID}}/g, technique.attackID)\n                .replace(/{{technique_stixID}}/g, technique.id)\n                .replace(/{{technique_name}}/g, technique.name.replace(/ /g, '-').toLowerCase())\n\n                .replace(/{{tactic_attackID}}/g, tactic.attackID)\n                .replace(/{{tactic_stixID}}/g, tactic.id)\n                .replace(/{{tactic_name}}/g, tactic.shortname);\n        }\n    }\n}\n","import { ServiceAuth } from '../services/data.service';\nimport { Campaign } from './stix/campaign';\nimport { DataComponent } from './stix/data-component';\nimport { Group } from './stix/group';\nimport { Matrix } from './stix/matrix';\nimport { Mitigation } from './stix/mitigation';\nimport { Note } from './stix/note';\nimport { Software } from './stix/software';\nimport { Tactic } from './stix/tactic';\nimport { Technique } from './stix/technique';\nimport { Version } from './version';\nimport { Asset } from './stix/asset';\n\nexport class Domain {\n    public readonly id: string; // domain ID\n    public readonly domain_identifier: string; //domain ID without the version suffix\n    public readonly name: string; // domain display name\n    public readonly version: Version; // ATT&CK version\n\n    public urls: string[] = [];\n    public taxii_url: string = '';\n    public taxii_collection: string = '';\n    public authentication: ServiceAuth;\n    public dataLoaded: boolean = false;\n    public dataLoadedCallbacks: any[] = [];\n\n    // this should only be enabled if the user loads custom data via URL\n    public isCustom: boolean = false;\n\n    public matrices: Matrix[] = [];\n    public get tactics(): Tactic[] {\n        let tactics = [];\n        for (let matrix of this.matrices) {\n            tactics = tactics.concat(matrix.tactics);\n        }\n        return tactics;\n    }\n    public techniques: Technique[] = [];\n    public platforms: string[] = []; // platforms defined on techniques and software of the domain\n    public subtechniques: Technique[] = [];\n    public software: Software[] = [];\n    public campaigns: Campaign[] = [];\n    public assets: Asset[] = [];\n    public dataComponents: DataComponent[] = [];\n    public dataSources = new Map<string, { name: string; external_references: any[] }>(); // Map data source ID to name and urls to be used by data components\n    public groups: Group[] = [];\n    public mitigations: Mitigation[] = [];\n    public notes: Note[] = [];\n    public relationships: any = {\n        // subtechnique subtechnique-of technique\n        // ID of technique to [] of subtechnique IDs\n        subtechniques_of: new Map<string, string[]>(),\n        // data component related to technique\n        // ID of data component to [] of technique IDs\n        component_rel: new Map<string, string[]>(),\n        // group uses technique\n        // ID of group to [] of technique IDs\n        group_uses: new Map<string, string[]>(),\n        // software uses technique\n        // ID of software to [] of technique IDs\n        software_uses: new Map<string, string[]>(),\n        // campaign uses technique\n        // ID of campaign to [] of technique IDs\n        campaign_uses: new Map<string, string[]>(),\n        // campaigns attributed to group\n        // ID of group to [] of campaign IDs\n        campaigns_attributed_to: new Map<string, string[]>(),\n        // mitigation mitigates technique\n        // ID of mitigation to [] of technique IDs\n        mitigates: new Map<string, string[]>(),\n        // object is revoked-by object\n        // ID of object to ID of revoking object\n        revoked_by: new Map<string, string>(),\n        // technique targets asset\n        // ID of asset to [] of technique IDs\n        targeted_assets: new Map<string, string[]>(),\n    };\n\n    constructor(domain_identifier: string, name: string, version: Version, urls?: string[]) {\n        this.id = `${domain_identifier}-${version.number}`;\n        this.domain_identifier = domain_identifier;\n        this.name = name;\n        this.version = version;\n        if (urls) this.urls = urls;\n    }\n\n    /**\n     * Get the version number for this domain\n     */\n    public getVersion(): string {\n        return this.version.number;\n    }\n\n    public executeCallbacks(): void {\n        for (let callback of this.dataLoadedCallbacks) {\n            callback();\n        }\n    }\n}\n","import { Domain } from './domain';\n\nexport class Filter {\n    // the data for a specific filter\n    private readonly domain: string;\n    public platforms: {\n        options: string[];\n        selection: string[];\n    };\n\n    constructor() {\n        this.platforms = {\n            selection: [],\n            options: [],\n        };\n    }\n\n    /**\n     * Initialize the platform options according to the data in the domain\n     * @param {Domain} domain the domain to parse for platform options\n     */\n    public initPlatformOptions(domain: Domain): void {\n        this.platforms.options = JSON.parse(JSON.stringify(domain.platforms));\n        if (!this.platforms.selection.length) {\n            // prevent overwriting current selection\n            this.platforms.selection = JSON.parse(JSON.stringify(domain.platforms));\n        }\n    }\n\n    /**\n     * toggle the given value in the given filter\n     * @param {*} filterName the name of the filter\n     * @param {*} value the value to toggle\n     */\n    public toggleInFilter(filterName: string, value: string): void {\n        if (!this[filterName].options.includes(value)) {\n            console.error('not a valid option to toggle', value, this[filterName]);\n            return;\n        }\n        if (this[filterName].selection.includes(value)) {\n            let index = this[filterName].selection.indexOf(value);\n            this[filterName].selection.splice(index, 1);\n        } else {\n            this[filterName].selection.push(value);\n        }\n    }\n\n    /**\n     * determine if the given value is active in the filter\n     * @param {*} filterName the name of the filter\n     * @param {*} value the value to determine\n     * @returns {boolean} true if value is currently enabled in the filter\n     */\n    public inFilter(filterName, value): boolean {\n        return this[filterName].selection.includes(value);\n    }\n\n    /**\n     * Return the string representation of this filter\n     * @return stringified filter\n     */\n    public serialize(): string {\n        return JSON.stringify({ platforms: this.platforms.selection });\n    }\n\n    /**\n     * Replace the properties of this object with those of the given serialized filter\n     * @param rep filter object\n     */\n    public deserialize(rep: any): void {\n        let isStringArray = function (arr): boolean {\n            for (let item of arr) {\n                if (typeof item !== 'string') {\n                    console.error('TypeError:', item, '(', typeof item, ')', 'is not a string');\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        if (rep.platforms) {\n            if (isStringArray(rep.platforms)) {\n                let backwards_compatibility_mappings = {\n                    //backwards compatibility with older layers\n                    android: 'Android',\n                    ios: 'iOS',\n\n                    windows: 'Windows',\n                    linux: 'Linux',\n                    mac: 'macOS',\n\n                    AWS: 'IaaS',\n                    GCP: 'IaaS',\n                    Azure: 'IaaS',\n                };\n                const selection = new Set<string>();\n                rep.platforms.forEach(function (platform) {\n                    if (platform in backwards_compatibility_mappings) selection.add(backwards_compatibility_mappings[platform]);\n                    else selection.add(platform);\n                });\n                this.platforms.selection = Array.from(selection);\n            } else console.error('TypeError: filter platforms field is not a string[]');\n        }\n    }\n}\n","import tinycolor from 'tinycolor2';\nimport * as tinygradient from 'tinygradient';\n\nexport class Gradient {\n    // gradient class used by ViewModels\n    // official colors used in gradients:\n    public colors: Gcolor[] = [new Gcolor('red'), new Gcolor('green')]; //current colors\n    public options: string[] = ['#ffffff', '#ff6666', '#ffaf66', '#ffe766', '#8ec843', '#66b1ff', '#ff66f4']; //possible colors\n    public minValue: number = 0;\n    public maxValue: number = 100;\n    public gradient: any;\n    public gradientRGB: any;\n\n    // presets in dropdown menu\n    public presets = {\n        redgreen: [new Gcolor('#ff6666'), new Gcolor('#ffe766'), new Gcolor('#8ec843')],\n        greenred: [new Gcolor('#8ec843'), new Gcolor('#ffe766'), new Gcolor('#ff6666')],\n        bluered: [new Gcolor('#66b1ff'), new Gcolor('#ff66f4'), new Gcolor('#ff6666')],\n        redblue: [new Gcolor('#ff6666'), new Gcolor('#ff66f4'), new Gcolor('#66b1ff')],\n        transparentblue: [new Gcolor('#ffffff00'), new Gcolor('#66b1ff')],\n        transparentred: [new Gcolor('#ffffff00'), new Gcolor('#ff6666')],\n    };\n\n    constructor() {\n        this.setGradientPreset('redgreen');\n    }\n\n    /**\n     * Create a string version of this gradient\n     * @return string version of gradient\n     */\n    public serialize(): string {\n        let colorList: string[] = [];\n        this.colors.forEach(function (gColor: Gcolor) {\n            let hexstring = tinycolor(gColor.color).toHex8String(); // include the alpha channel\n            colorList.push(hexstring);\n        });\n\n        let rep = {\n            colors: colorList,\n            minValue: this.minValue,\n            maxValue: this.maxValue,\n        };\n        return JSON.stringify(rep, null, '\\t');\n    }\n\n    /**\n     * Restore this gradient from the given serialized representation\n     * @param  rep serialized gradient\n     */\n    public deserialize(rep: string): void {\n        let obj = JSON.parse(rep);\n        let isColorStringArray = function (colors): boolean {\n            for (let color of colors) {\n                if (typeof color !== 'string' || !tinycolor(color).isValid()) {\n                    console.error('TypeError:', color, '(', typeof color, ')', 'is not a color-string');\n                    return false;\n                }\n            }\n            return true;\n        };\n\n        if (isColorStringArray(obj.colors)) {\n            this.colors = [];\n            let self = this;\n            obj.colors.forEach(function (hex: string) {\n                self.colors.push(new Gcolor(hex));\n            });\n        } else console.error('TypeError: gradient colors field is not a color-string[]');\n        this.minValue = obj.minValue;\n        this.maxValue = obj.maxValue;\n        this.updateGradient();\n    }\n\n    /**\n     * Convert a preset to tinycolor array\n     * @param  preset preset name from preset array\n     * @return        [description]\n     */\n    public presetToTinyColor(preset) {\n        let colorarray = [];\n        this.presets[preset].forEach(function (gcolor: Gcolor) {\n            colorarray.push(gcolor.color);\n        });\n        return tinygradient(colorarray).css('linear', 'to right');\n    }\n\n    /**\n     * set this gradient to use the preset\n     * @param  preset preset to use\n     */\n    public setGradientPreset(preset: string): void {\n        this.colors = this.presets[preset].map((color: Gcolor) => new Gcolor(color.color)); //deep copy gradient preset\n        this.updateGradient();\n    }\n\n    /**\n     * recompute gradient\n     */\n    public updateGradient(): void {\n        let colorarray = [];\n        this.colors.forEach(function (colorobj) {\n            colorarray.push(colorobj.color);\n        });\n        this.gradient = tinygradient(colorarray);\n        this.gradientRGB = this.gradient.rgb(100);\n    }\n\n    /**\n     * Add a color to the end of the gradient\n     */\n    public addColor(): void {\n        this.colors.push(new Gcolor(this.colors[this.colors.length - 1].color));\n    }\n\n    /**\n     * Remove color at the given index\n     * @param index index to remove color at\n     */\n    public removeColor(index): void {\n        this.colors.splice(index, 1);\n    }\n\n    // get the gradient hex color for a given value in the scale. Value is string format number\n    public getHexColor(valueString: string) {\n        if (!this.gradient) this.updateGradient();\n\n        let value: number;\n        if (valueString.length == 0) return;\n        else value = Number(valueString);\n\n        if (value >= this.maxValue) {\n            return this.gradientRGB[this.gradientRGB.length - 1].toHexString();\n        }\n        if (value <= this.minValue) {\n            return this.gradientRGB[0].toHexString();\n        }\n        let index = ((value - this.minValue) / (this.maxValue - this.minValue)) * 100;\n        return this.gradientRGB[Math.round(index)].toHexString();\n    }\n}\n\n// a color in the gradient\nexport class Gcolor {\n    color: string;\n\n    constructor(color: string) {\n        this.color = color;\n    }\n}\n","export { VersionChangelog } from './version-changelog';\nexport { Version } from './version';\nexport { Domain } from './domain';\nexport { ContextMenuItem } from './context-menu-item';\nexport { Gradient, Gcolor } from './gradient';\nexport { Filter } from './filter';\nexport { LayoutOptions } from './layout-options';\nexport { Link } from './link';\nexport { Metadata } from './metadata';\nexport { TechniqueVM } from './technique-vm';\nexport { ViewModel } from './view-model';\nexport { Tab } from './tab';\n","export class LayoutOptions {\n    // current layout selection\n    public readonly layoutOptions: string[] = ['side', 'flat', 'mini'];\n    private _layout = this.layoutOptions[0];\n    public set layout(newLayout) {\n        if (!this.layoutOptions.includes(newLayout)) {\n            console.warn('invalid matrix layout', newLayout);\n            return;\n        }\n        let oldLayout = this._layout;\n        this._layout = newLayout;\n        if (this._layout == 'mini') {\n            // mini-table cannot show ID or name\n            this.showID = false;\n            this.showName = false;\n        }\n        if (oldLayout == 'mini' && newLayout != 'mini') {\n            this.showName = true; // restore default show value for name\n        }\n    }\n    public get layout(): string {\n        return this._layout;\n    }\n\n    // aggregate function options\n    public readonly aggregateFunctionOptions: string[] = ['average', 'min', 'max', 'sum'];\n    private _aggregateFunction = this.aggregateFunctionOptions[0];\n    public set aggregateFunction(newAggregateFunction) {\n        if (!this.aggregateFunctionOptions.includes(newAggregateFunction)) {\n            console.warn('invalid aggregate fx option', newAggregateFunction);\n            return;\n        }\n        this._aggregateFunction = newAggregateFunction;\n    }\n    public get aggregateFunction(): string {\n        return this._aggregateFunction;\n    }\n\n    // show technique/tactic IDs in the view?\n    public _showID: boolean = false;\n    public set showID(newval: boolean) {\n        this._showID = newval;\n        if (newval && this._layout == 'mini') this._layout = 'side';\n    }\n    public get showID(): boolean {\n        return this._showID;\n    }\n\n    // show technique/tactic names in the view?\n    public _showName: boolean = true;\n    public set showName(newval: boolean) {\n        this._showName = newval;\n        if (newval && this._layout == 'mini') this._layout = 'side';\n    }\n    public get showName(): boolean {\n        return this._showName;\n    }\n\n    // show aggregate scores?\n    public _showAggregateScores: boolean = false;\n    public set showAggregateScores(newval: boolean) {\n        this._showAggregateScores = newval;\n    }\n    public get showAggregateScores(): boolean {\n        return this._showAggregateScores;\n    }\n\n    public _countUnscored: boolean = false;\n    public set countUnscored(newval: boolean) {\n        this._countUnscored = newval;\n    }\n    public get countUnscored(): boolean {\n        return this.aggregateFunction === 'average' ? this._countUnscored : false;\n    }\n\n    // how to display subtechniques\n    public expandedSubtechniquesOptions: string[] = ['none', 'annotated', 'all'];\n    private _expandedSubtechniques = this.expandedSubtechniquesOptions[0];\n    public set expandedSubtechniques(newExpandedSubtechniques) {\n        if (!this.expandedSubtechniquesOptions.includes(newExpandedSubtechniques)) {\n            console.warn('invalid expand subtechnique option', newExpandedSubtechniques);\n            return;\n        }\n        this._expandedSubtechniques = newExpandedSubtechniques;\n    }\n    public get expandedSubtechniques(): string {\n        return this._expandedSubtechniques;\n    }\n\n    public serialize(): object {\n        return {\n            layout: this.layout,\n            aggregateFunction: this.aggregateFunction,\n            showID: this.showID,\n            showName: this.showName,\n            showAggregateScores: this.showAggregateScores,\n            countUnscored: this.countUnscored,\n            expandedSubtechniques: this.expandedSubtechniques,\n        };\n    }\n\n    public deserialize(rep: any) {\n        if ('showID' in rep) {\n            if (typeof rep.showID === 'boolean') this.showID = rep.showID;\n            else console.error(\"TypeError: layout field 'showID' is not a boolean:\", rep.showID, '(', typeof rep.showID, ')');\n        }\n        if ('showName' in rep) {\n            if (typeof rep.showName === 'boolean') this.showName = rep.showName;\n            else console.error(\"TypeError: layout field 'showName' is not a boolean:\", rep.showName, '(', typeof rep.showName, ')');\n        }\n        //make sure this one goes last so that it can override name and ID if layout == 'mini'\n        if ('layout' in rep) {\n            if (typeof rep.layout === 'string') this.layout = rep.layout;\n            else console.error(\"TypeError: layout field 'layout' is not a string:\", rep.layout, '(', typeof rep.layout, ')');\n        }\n        if ('aggregateFunction' in rep) {\n            if (typeof rep.aggregateFunction === 'string') this.aggregateFunction = rep.aggregateFunction;\n            else\n                console.error(\n                    \"TypeError: layout field 'aggregateFunction' is not a boolean:\",\n                    rep.aggregateFunction,\n                    '(',\n                    typeof rep.aggregateFunction,\n                    ')'\n                );\n        }\n        if ('showAggregateScores' in rep) {\n            if (typeof rep.showAggregateScores === 'boolean') this.showAggregateScores = rep.showAggregateScores;\n            else\n                console.error(\n                    \"TypeError: layout field 'showAggregateScores' is not a boolean:\",\n                    rep.showAggregateScores,\n                    '(',\n                    typeof rep.showAggregateScores,\n                    ')'\n                );\n        }\n        if ('countUnscored' in rep) {\n            if (typeof rep.countUnscored === 'boolean') this.countUnscored = rep.countUnscored;\n            else console.error(\"TypeError: layout field 'countUnscored' is not a boolean:\", rep.countUnscored, '(', typeof rep.countUnscored, ')');\n        }\n        if ('expandedSubtechniques' in rep) {\n            if (typeof rep.expandedSubtechniques === 'string') this.expandedSubtechniques = rep.expandedSubtechniques;\n            else\n                console.error(\n                    \"TypeError: layout field 'expandedSubtechniques' is not a string:\",\n                    rep.expandedSubtechniques,\n                    '(',\n                    typeof rep.expandedSubtechniques,\n                    ')'\n                );\n        }\n    }\n}\n","export class Link {\n    public label: string;\n    public url: string;\n    public divider: boolean;\n\n    constructor() {\n        // intentionally left blank\n    }\n\n    public serialize(): object {\n        return this.label && this.url ? { label: this.label, url: this.url } : { divider: this.divider };\n    }\n\n    public deserialize(rep: any): void {\n        let obj = typeof rep == 'string' ? JSON.parse(rep) : rep;\n        if ('url' in obj) {\n            // label & url object\n            if (typeof obj.url === 'string') this.url = obj.url;\n            else console.error(\"TypeError: Link field 'url' is not a string\");\n\n            if ('label' in obj) {\n                if (typeof obj.label === 'string') this.label = obj.label;\n                else console.error(\"TypeError: Link field 'label' is not a string\");\n            } else console.error(\"Error: Link required field 'label' not present\");\n        } else if ('divider' in obj) {\n            // divider object\n            if (typeof obj.divider === 'boolean') this.divider = obj.divider;\n            else console.error(\"TypeError: Link field 'divider' is not a boolean\");\n        } else console.error(\"Error: Link required field 'url' or 'divider' not present\");\n    }\n\n    public valid(): boolean {\n        return (this.label && this.label.length > 0 && this.url && this.url.length > 0) || this.divider !== undefined;\n    }\n}\n","export class Metadata {\n    public name: string;\n    public value: string;\n    public divider: boolean;\n\n    public serialize(): object {\n        return this.name && this.value ? { name: this.name, value: this.value } : { divider: this.divider };\n    }\n\n    public deserialize(rep: any): void {\n        let obj = typeof rep == 'string' ? JSON.parse(rep) : rep;\n\n        if ('name' in obj) {\n            // name & value object\n            if (typeof obj.name === 'string') this.name = obj.name;\n            else console.error(\"TypeError: Metadata field 'name' is not a string\");\n\n            if ('value' in obj) {\n                if (typeof obj.value === 'string') this.value = obj.value;\n                else console.error(\"TypeError: Metadata field 'value' is not a string\");\n            } else console.error(\"Error: Metadata required field 'value' not present\");\n        } else if ('divider' in obj) {\n            // divider object\n            if (typeof obj.divider === 'boolean') this.divider = obj.divider;\n            else console.error(\"TypeError: Metadata field 'divider' is not a boolean\");\n        } else console.error(\"Error: Metadata required field 'name' or 'divider' not present\");\n    }\n\n    public valid(): boolean {\n        return (this.name && this.name.length > 0 && this.value && this.value.length > 0) || this.divider !== undefined;\n    }\n}\n","import { StixObject } from './stix-object';\n\nexport class Asset extends StixObject {\n    /**\n     * Get techniques targeting this asset\n     * @returns {string[]} technique IDs targeting this asset\n     */\n    public targeted(domainVersionID): string[] {\n        let rels = this.dataService.getDomain(domainVersionID).relationships.targeted_assets;\n        if (rels.has(this.id)) {\n            return rels.get(this.id);\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * Get all techniques related to the asset\n     */\n    public relatedTechniques(domainVersionID): string[] {\n        return this.targeted(domainVersionID);\n    }\n}\n","import { StixObject } from './stix-object';\n\nexport class Campaign extends StixObject {\n    /**\n     * Get techniques used by the campaign\n     * @param domainVersionID the ID of the domain and version\n     * @returns {string[]} technique IDs used by the campaign\n     */\n    public used(domainVersionID): string[] {\n        let relationships = this.dataService.getDomain(domainVersionID).relationships.campaign_uses;\n        if (relationships.has(this.id)) {\n            return relationships.get(this.id);\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * Get all techniques related to the campaign\n     * @param domainVersionID the ID of the domain and version\n     * @returns {string[]} technique IDs used by the campaign\n     */\n    public relatedTechniques(domainVersionID): string[] {\n        return this.used(domainVersionID);\n    }\n}\n","import { DataService } from '../../services/data.service';\nimport { StixObject } from './stix-object';\nimport { Technique } from './technique';\n\nexport class DataComponent extends StixObject {\n    public readonly url: string;\n    public readonly dataSource: string;\n\n    constructor(stixSDO: any, dataService: DataService) {\n        super(stixSDO, dataService, false);\n        this.dataSource = stixSDO.x_mitre_data_source_ref;\n    }\n\n    /**\n     * Get techniques related to the data component\n     * @param domainVersionID the ID of the domain and version\n     * @returns {Technique[]} list of techniques used by the data component\n     */\n    public techniques(domainVersionID): Technique[] {\n        const techniques = [];\n        const domain = this.dataService.getDomain(domainVersionID);\n\n        let relationships = domain.relationships.component_rel;\n        if (relationships.has(this.id)) {\n            relationships.get(this.id).forEach((targetID) => {\n                const technique = domain.techniques.find((t) => t.id === targetID);\n                if (technique) techniques.push(technique);\n            });\n        }\n        return techniques;\n    }\n    /**\n     * Get the data source related to this data component\n     * @param domainVersionID the ID of the domain and version\n     * @returns { name: string, url: string } the name and first url of the data source referenced by this data component\n     */\n    public source(domainVersionID) {\n        const dataSources = this.dataService.getDomain(domainVersionID).dataSources;\n        if (dataSources.has(this.dataSource)) {\n            const source = dataSources.get(this.dataSource);\n            let url = '';\n            if (source.external_references && source.external_references[0] && source.external_references[0].url)\n                url = source.external_references[0].url;\n            return { name: source.name, url: url };\n        } else return { name: '', url: '' };\n    }\n}\n","import { StixObject } from './stix-object';\n\nexport class Group extends StixObject {\n    /**\n     * Get the techniques used by this group\n     * @param domainVersionID the ID of the domain and version\n     * @returns {string[]} technique IDs used by this group\n     */\n    public used(domainVersionID): string[] {\n        let rels = this.dataService.getDomain(domainVersionID).relationships.group_uses;\n        if (rels.has(this.id)) {\n            return rels.get(this.id);\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * Get techniques used by campaigns attributed to this group\n     * @param domainVersionID the ID of the domain and version\n     * @returns {string[]} technique IDs used by campaigns attributed to this group\n     */\n    public campaignsUsed(domainVersionID): string[] {\n        // get campaigns attributed to groups\n        let attributedCampaigns = this.dataService.getDomain(domainVersionID).relationships.campaigns_attributed_to;\n        // get techniques used by campaigns\n        let rels = this.dataService.getDomain(domainVersionID).relationships.campaign_uses;\n        if (attributedCampaigns.has(this.id)) {\n            // get set of techniques used by attributed campaigns\n            let techniques = [];\n            attributedCampaigns.get(this.id).forEach((campaign_id) => {\n                if (rels.has(campaign_id)) techniques = techniques.concat(rels.get(campaign_id));\n            });\n            return techniques;\n        } else return []; // no attributed campaigns\n    }\n\n    /**\n     * Get all techniques related to the group\n     */\n    public relatedTechniques(domainVersionID): string[] {\n        let usedSet = new Set(this.used(domainVersionID).concat(this.campaignsUsed(domainVersionID)));\n        return Array.from(usedSet);\n    }\n}\n","export { StixObject } from './stix-object';\nexport { Campaign } from './campaign';\nexport { DataComponent } from './data-component';\nexport { Group } from './group';\nexport { Matrix } from './matrix';\nexport { Mitigation } from './mitigation';\nexport { Note } from './note';\nexport { Software } from './software';\nexport { Tactic } from './tactic';\nexport { Technique } from './technique';\nexport { Asset } from './asset';\n","import { DataService } from '../../services/data.service';\nimport { StixObject } from './stix-object';\nimport { Tactic } from './tactic';\nimport { Technique } from './technique';\n\nexport class Matrix extends StixObject {\n    public readonly tactics: Tactic[]; //tactics found under this Matrix\n\n    /**\n     * Creates an instance of Matrix.\n     * @param {*} stixSDO for the matrix\n     * @param {Map<string, any>} idToTacticSDO map of tactic ID to tactic SDO\n     * @param {Technique[]} techniques all techniques defined in the domain\n     */\n    constructor(stixSDO: any, idToTacticSDO: Map<string, any>, techniques: Technique[], dataService: DataService) {\n        super(stixSDO, dataService);\n        this.tactics = stixSDO.tactic_refs\n            .map((tacticID) => idToTacticSDO.get(tacticID)) // Get tacticSDOs\n            .filter((tacticSDO) => tacticSDO) // Filter out nulls (tacticSDO not found)\n            .map((tacticSDO) => new Tactic(tacticSDO, techniques, this.dataService)); // Create Tactic objects\n    }\n}\n","import { StixObject } from './stix-object';\n\nexport class Mitigation extends StixObject {\n    /**\n     * Get techniques mitigated by this mitigation\n     * @returns {string[]} technique IDs mitigated by this mitigation\n     */\n    public mitigated(domainVersionID): string[] {\n        let rels = this.dataService.getDomain(domainVersionID).relationships.mitigates;\n        if (rels.has(this.id)) {\n            return rels.get(this.id);\n        } else {\n            return [];\n        }\n    }\n\n    /**\n     * Get all techniques related to the mitigation\n     */\n    public relatedTechniques(domainVersionID): string[] {\n        return this.mitigated(domainVersionID);\n    }\n}\n","export class Note {\n    public readonly abstract?: string; // brief summary of note content\n    public readonly content: string; // content of the note\n    public readonly object_refs: string[]; // list of STIX objects the note is applied to\n\n    /**\n     * Creates an instance of Note.\n     * @param {any} stixSDO for the note\n     */\n    constructor(stixSDO: any) {\n        if (stixSDO.abstract) this.abstract = stixSDO.abstract;\n        this.content = stixSDO.content;\n        this.object_refs = stixSDO.object_refs;\n    }\n}\n","import { DataService } from '../../services/data.service';\nimport { StixObject } from './stix-object';\n\nexport class Software extends StixObject {\n    public readonly platforms: string[] = []; //platforms for this software\n\n    /**\n     * Creates an instance of Software.\n     * @param {any} stixSDO for the software\n     * @param {DataService} DataService the software occurs within\n     */\n    constructor(stixSDO: any, dataService: DataService) {\n        super(stixSDO, dataService);\n        this.platforms = stixSDO.x_mitre_platforms ? stixSDO.x_mitre_platforms.map((platform) => platform.trim()) : undefined;\n    }\n\n    /**\n     * Get techniques used by this software\n     * @param domainVersionID the ID of the domain and version\n     * @returns {string[]} technique IDs used by this software\n     */\n    public used(domainVersionID): string[] {\n        let rels = this.dataService.getDomain(domainVersionID).relationships.software_uses;\n        if (rels.has(this.id)) {\n            return rels.get(this.id);\n        } else {\n            return [];\n        }\n    }\n    /**\n     * Get all techniques related to the software\n     */\n    public relatedTechniques(domainVersionID): string[] {\n        return this.used(domainVersionID);\n    }\n}\n","import { DataService } from '../../services/data.service';\n\nexport abstract class StixObject {\n    public readonly id: string; // STIX ID\n    public readonly attackID: string; // ATT&CK ID\n    public readonly name: string; // name of object\n    public readonly description: string; // description of object\n    public readonly url: string; // URL of object on the ATT&CK website\n    public readonly created: string; // date object was created\n    public readonly modified: string; // date object was last modified\n    public readonly revoked: boolean; // is the object revoked?\n    public readonly deprecated: boolean; // is the object deprecated?\n    public readonly version: string; // object version\n    protected readonly dataService: DataService;\n\n    constructor(stixSDO: any, dataService: DataService, supportsAttackID = true) {\n        // Properties\n        this.id = stixSDO.id;\n        this.name = stixSDO.name;\n        this.description = stixSDO.description;\n        this.created = stixSDO.created;\n        this.modified = stixSDO.modified;\n        this.revoked = stixSDO.revoked ? stixSDO.revoked : false;\n        this.deprecated = stixSDO.x_mitre_deprecated ? stixSDO.x_mitre_deprecated : false;\n        this.version = stixSDO.x_mitre_version ? stixSDO.x_mitre_version : '';\n        this.dataService = dataService;\n\n        // ATT&CK ID\n        if (supportsAttackID) {\n            if (stixSDO.external_references && stixSDO.external_references[0] && stixSDO.external_references[0].external_id) {\n                this.attackID = stixSDO.external_references[0].external_id;\n            } else {\n                alert('Error: external_references has invalid format in imported StixObject (ID: ' + stixSDO.id + ')');\n                throw new Error(\n                    'Error: external_references has invalid format in imported StixObject. Read more here: https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_72bcfr3t79jx'\n                );\n            }\n        }\n\n        // URL\n        if ('external_references' in stixSDO && stixSDO.external_references.length > 0) {\n            this.url = stixSDO.external_references[0].url;\n        } else {\n            this.url = '';\n        }\n    }\n\n    /**\n     * Compare this object's version number to another object's version number\n     * @param that the object to compare to\n     * @returns 0 if the objects have the same version,\n     *          > 0 if this object's version is greater,\n     *          < 0 if that object's version is greater\n     */\n    public compareVersion(that: StixObject): number {\n        if (!this.version || !that.version) return 0; // one or both of the objects have no version\n\n        let thisVersion = this.version.split('.');\n        let thatVersion = that.version.split('.');\n\n        for (let i = 0; i < Math.max(thisVersion.length, thatVersion.length); i++) {\n            if (thisVersion.length == thatVersion.length && thisVersion.length < i) return 0;\n            if (thisVersion.length < i) return -1;\n            if (thatVersion.length < i) return 1;\n            if (+thisVersion[i] == +thatVersion[i]) continue;\n            return +thisVersion[i] - +thatVersion[i];\n        }\n        return 0;\n    }\n\n    /**\n     * get the stix object that this object is revoked by\n     * @param {string} domainVersionID the ID of the domain & version this object is found in\n     * @returns {string} object ID this object is revoked by\n     */\n    public revoked_by(domainVersionID): string {\n        let rels = this.dataService.getDomain(domainVersionID).relationships.revoked_by;\n        if (rels.has(this.id)) return rels.get(this.id);\n        else return undefined;\n    }\n}\n","import { DataService } from '../../services/data.service';\nimport { StixObject } from './stix-object';\nimport { Technique } from './technique';\n\nexport class Tactic extends StixObject {\n    public readonly techniques: Technique[]; // techniques found under this tactic\n    public readonly shortname: string; // shortname property, AKA phase-name for techniques' kill-chain phases\n\n    /**\n     * Creates an instance of Tactic.\n     * @param {any} stixSDO for the tactic\n     * @param {Technique[]} techniques all techniques in the domain\n     */\n    constructor(stixSDO: any, techniques: Technique[], dataService: DataService) {\n        super(stixSDO, dataService);\n        this.shortname = stixSDO.x_mitre_shortname;\n        this.techniques = techniques.filter((technique: Technique) => {\n            if (!technique.revoked && !technique.deprecated) return technique.tactics.includes(this.shortname);\n        });\n    }\n}\n","import { DataService } from '../../services/data.service';\nimport { StixObject } from './stix-object';\nimport { Tactic } from './tactic';\n\nexport class Technique extends StixObject {\n    public readonly platforms: string[]; // platforms for this technique.\n    public readonly tactics: string[]; // tactics this technique is found under in phase-name format\n    public readonly subtechniques: Technique[]; // subtechniques under this technique\n    public readonly datasources: string; // data sources of the technique\n    public parent: Technique = null; // parent technique. Only present if it's a sub-technique\n    public get isSubtechnique() {\n        return this.parent != null;\n    }\n\n    /**\n     * Creates an instance of Technique.\n     * @param {any} stixSDO for the technique\n     * @param {Technique[]} subtechniques occuring under the technique\n     */\n    constructor(stixSDO: any, subtechniques: Technique[], dataService: DataService) {\n        super(stixSDO, dataService);\n        this.platforms = stixSDO.x_mitre_platforms ? stixSDO.x_mitre_platforms.map((platform) => platform.trim()) : undefined;\n        this.datasources = stixSDO.x_mitre_data_sources ? stixSDO.x_mitre_data_sources.toString() : '';\n        if (!this.revoked && !this.deprecated) {\n            this.tactics = stixSDO.kill_chain_phases.map((phase) => phase.phase_name);\n        }\n\n        this.subtechniques = subtechniques.filter((sub) => !(sub.deprecated || sub.revoked));\n        for (let subtechnique of this.subtechniques) {\n            subtechnique.parent = this;\n        }\n    }\n\n    /**\n     * Get an ID identifying this technique under a specific tactic\n     * @param {string|Tactic} tactic tactic name in phase-name/shortname format, or a Tactic object itself\n     * @returns {string} ID for this technique under that tactic\n     */\n    public get_technique_tactic_id(tactic: string | Tactic): string {\n        let tactic_shortname = tactic instanceof Tactic ? tactic.shortname : tactic;\n        if (!this.tactics.includes(tactic_shortname)) {\n            throw new Error(tactic_shortname + ' is not a tactic of ' + this.attackID);\n        }\n        return this.attackID + '^' + tactic_shortname;\n    }\n\n    /**\n     * Get all possible IDs identifying this technique under tactics\n     * Basically the same as calling get_technique_tactic_id with all valid tactic values\n     */\n    public get_all_technique_tactic_ids(): string[] {\n        if (this.revoked || this.deprecated) return [];\n        return this.tactics.map((shortname: string) => this.get_technique_tactic_id(shortname));\n    }\n}\n","import { ViewModel } from './view-model';\n\nexport class Tab {\n    public title: string;\n    public viewModel: ViewModel;\n    public domain: string = '';\n    public isDataTable: boolean;\n    public isCloseable: boolean = false;\n    public showScoreVariables: boolean = false;\n\n    constructor(title: string, isCloseable: boolean, showScoreVariables: boolean, domain: string, isDataTable: boolean) {\n        this.title = title;\n        this.isCloseable = isCloseable;\n        this.showScoreVariables = showScoreVariables;\n        this.domain = domain;\n        this.isDataTable = isDataTable;\n    }\n}\n","import { Link } from './link';\nimport { Metadata } from './metadata';\nimport tinycolor from 'tinycolor2';\n\nexport class TechniqueVM {\n    // Defines the ViewModel for a specific Technique\n    public techniqueID: string;\n    public technique_tactic_union_id: string;\n    public tactic: string;\n\n    public score: string = '';\n    public scoreColor: string; // hex color for score gradient\n    public aggregateScore: any; // number rather than string as this is not based on an input from user\n    public aggregateScoreColor: string; // hex color for aggregate score\n    public color: string = ''; // manually assigned color-class name\n    public enabled: boolean = true;\n    public comment: string = '';\n\n    public metadata: Metadata[] = [];\n    public get metadataStr(): string {\n        return JSON.stringify(this.metadata);\n    }\n\n    public links: Link[] = [];\n    public get linkStr(): string {\n        return JSON.stringify(this.links);\n    }\n\n    public showSubtechniques = false;\n    public isVisible: boolean = true; // is technique currently displayed on matrix?\n\n    constructor(technique_tactic_union_id: string) {\n        this.technique_tactic_union_id = technique_tactic_union_id;\n        let idSplit = technique_tactic_union_id.split('^');\n        this.techniqueID = idSplit[0];\n        this.tactic = idSplit[1];\n    }\n\n    /**\n     * Has this TechniqueVM been modified from its initialized state?\n     * @return true if it has been modified, false otherwise\n     */\n    public modified(): boolean {\n        return this.annotated() || this.showSubtechniques;\n    }\n\n    /**\n     * Check if this TechniqueVM has been annotated\n     * @return true if it has annotations, false otherwise\n     */\n    public annotated(): boolean {\n        return this.score != '' || this.color != '' || !this.enabled || this.comment != '' || this.links.length !== 0 || this.metadata.length !== 0;\n    }\n\n    /**\n     * Reset this TechniqueVM's annotations to their default values\n     */\n    public resetAnnotations(): void {\n        this.score = '';\n        this.comment = '';\n        this.color = '';\n        this.enabled = true;\n        this.aggregateScore = '';\n        this.aggregateScoreColor = '';\n        this.links = [];\n        this.metadata = [];\n    }\n\n    /**\n     * Set isVisible based on filters\n     */\n    public setIsVisible(visible: boolean): void {\n        this.isVisible = visible;\n    }\n\n    /**\n     * Convert to string representation\n     * @return string representation\n     */\n    public serialize(): string {\n        let rep: { [k: string]: any } = {};\n        rep.techniqueID = this.techniqueID;\n        rep.tactic = this.tactic;\n        if (this.score !== '' && !isNaN(Number(this.score))) rep.score = Number(this.score);\n        rep.color = this.color;\n        rep.comment = this.comment;\n        rep.enabled = this.enabled;\n        rep.metadata = this.metadata.filter((m) => m.valid()).map((m) => m.serialize());\n        rep.links = this.links.filter((l) => l.valid()).map((l) => l.serialize());\n        rep.showSubtechniques = this.showSubtechniques;\n        return JSON.stringify(rep, null, '\\t');\n    }\n\n    /**\n     * Restore this technique from serialized technique\n     * @param rep serialized technique string\n     */\n    public deserialize(rep: string, techniqueID: string, tactic: string): void {\n        let obj = JSON.parse(rep);\n        if (techniqueID !== undefined) this.techniqueID = techniqueID;\n        else console.error('ERROR: TechniqueID field not present in technique');\n\n        if (tactic !== undefined && tactic !== '') this.tactic = tactic;\n        else {\n            console.error('WARNING: tactic field not present in technique');\n            alert(`WARNING: The tactic field on the technique ID ${techniqueID} is not defined. Annotations for this technique may not be restored.`);\n        }\n        if ('comment' in obj) {\n            if (typeof obj.comment === 'string') this.comment = obj.comment;\n            else console.error('TypeError: technique comment field is not a number:', obj.comment, '(', typeof obj.comment, ')');\n        }\n        if ('color' in obj && obj.color !== '') {\n            if (typeof obj.color === 'string' && tinycolor(obj.color).isValid()) this.color = obj.color;\n            else console.error('TypeError: technique color field is not a color-string:', obj.color, '(', typeof obj.color, ')');\n        }\n        if ('score' in obj) {\n            if (typeof obj.score === 'number') this.score = String(obj.score);\n            else console.error('TypeError: technique score field is not a number:', obj.score, '(', typeof obj.score, ')');\n        }\n        if ('enabled' in obj) {\n            if (typeof obj.enabled === 'boolean') this.enabled = obj.enabled;\n            else console.error('TypeError: technique enabled field is not a boolean:', obj.enabled, '(', typeof obj.enabled, ')');\n        }\n        if ('showSubtechniques' in obj) {\n            if (typeof obj.showSubtechniques === 'boolean') this.showSubtechniques = obj.showSubtechniques;\n            else\n                console.error(\n                    'TypeError: technique showSubtechnique field is not a boolean:',\n                    obj.showSubtechniques,\n                    '(',\n                    typeof obj.showSubtechniques,\n                    ')'\n                );\n        }\n        if (this.tactic !== undefined && this.techniqueID !== undefined) {\n            this.technique_tactic_union_id = this.techniqueID + '^' + this.tactic;\n        } else {\n            console.error('ERROR: Tactic and TechniqueID field needed.');\n        }\n\n        if ('metadata' in obj) {\n            for (let metadataObj of obj.metadata) {\n                let m = new Metadata();\n                m.deserialize(metadataObj);\n                if (m.valid()) this.metadata.push(m);\n            }\n        }\n        if ('links' in obj) {\n            for (let linkObj of obj.links) {\n                let link = new Link();\n                link.deserialize(linkObj);\n                if (link.valid()) this.links.push(link);\n            }\n        }\n    }\n}\n","export class VersionChangelog {\n    public oldDomainVersionID: string;\n    public newDomainVersionID: string;\n    public additions: string[] = []; // new objects added to newest version\n    public changes: string[] = []; // object changes between versions\n    public minor_changes: string[] = []; // changes to objects without version increments\n    public deprecations: string[] = []; // objects deprecated since older version\n    public revocations: string[] = []; // objects revoked since older version\n    public unchanged: string[] = []; // objects which have not changed between versions\n\n    public reviewed = new Set<string>();\n    public copied = new Set<string>();\n\n    constructor(oldDomainVersionID: string, newDomainVersionID: string) {\n        this.oldDomainVersionID = oldDomainVersionID;\n        this.newDomainVersionID = newDomainVersionID;\n    }\n\n    /** Get the length of the version changelog */\n    public length(): number {\n        return (\n            this.additions.length +\n            this.changes.length +\n            this.minor_changes.length +\n            this.deprecations.length +\n            this.revocations.length +\n            this.unchanged.length\n        );\n    }\n}\n","export class Version {\n    public readonly name: string;\n    public readonly number: string;\n\n    /**\n     * Creates an instance of Version\n     * @param name version name\n     * @param number version number\n     */\n    constructor(name: string, number: string) {\n        this.name = name;\n        this.number = number;\n    }\n}\n","import { DataService } from '../services/data.service';\nimport { Filter } from './filter';\nimport { Gradient } from './gradient';\nimport { LayoutOptions } from './layout-options';\nimport { Link } from './link';\nimport { Metadata } from './metadata';\nimport { Technique, Tactic, Matrix } from './stix';\nimport { TechniqueVM } from './technique-vm';\nimport { VersionChangelog } from './version-changelog';\nimport * as globals from '../utils/globals';\nimport tinycolor from 'tinycolor2';\n\nexport class ViewModel {\n    public name: string; // layer name\n    public domain: string = ''; // attack domain\n    public version: string = ''; // attack version\n    public domainVersionID: string; // layer domain & version\n    public description: string = ''; // layer description\n    public uid: string; // unique identifier for this ViewModel\n    public bundleURL: string; // the STIX bundle URL that a custom layer was loaded from\n    public loaded: boolean = false; // whether or not techniqueVMs are loaded\n\n    public techniqueVMs: Map<string, TechniqueVM> = new Map<string, TechniqueVM>(); // configuration for each technique\n    public selectedTechniques: Set<string> = new Set<string>(); // currently selected techniques (technique_tactic_id)\n    public activeTvm: TechniqueVM; // first selected techniqueVM\n\n    private linkMismatches: string[] = []; // subsequent selected technique_tactic_ids that do not have matching links\n    public get linksMatch(): boolean {\n        return !this.linkMismatches.length;\n    }\n    private metadataMismatches: string[] = []; // subsequent selected technique_tactic_ids that do not have matching metadata\n    public get metadataMatch(): boolean {\n        return !this.metadataMismatches.length;\n    }\n\n    public highlightedTactic: Tactic = null;\n    public highlightedTechniques: Set<string> = new Set<string>();\n    public highlightedTechnique: Technique = null; // the Technique that was actually moused over\n\n    public filters: Filter;\n    public layout: LayoutOptions = new LayoutOptions();\n    public hideDisabled: boolean = false; // are disabled techniques hidden?\n    public showTacticRowBackground: boolean = false;\n    public tacticRowBackground: string = '#dddddd';\n    public stickyToolbar = true;\n\n    public gradient: Gradient = new Gradient(); // scoring gradient\n    public legendItems: any[] = [];\n    public backgroundPresets: string[] = [\n        '#e60d0d',\n        '#fc3b3b',\n        '#fc6b6b',\n        '#fca2a2',\n        '#e6550d',\n        '#fd8d3c',\n        '#fdae6b',\n        '#fdd0a2',\n        '#e6d60d',\n        '#fce93b',\n        '#fcf26b',\n        '#fcf3a2',\n        '#31a354',\n        '#74c476',\n        '#a1d99b',\n        '#c7e9c0',\n        '#3182bd',\n        '#6baed6',\n        '#9ecae1',\n        '#c6dbef',\n        '#756bb1',\n        '#9e9ac8',\n        '#bcbddc',\n        '#dadaeb',\n        '#636363',\n        '#969696',\n        '#bdbdbd',\n        '#d9d9d9',\n    ];\n    public legendColorPresets: string[] = [];\n    public initializeScoresTo = ''; // value to initialize scores to\n\n    public metadata: Metadata[] = [];\n    public links: Link[] = [];\n    public technique_show_subtechnique = false;\n\n    /*\n     * 0: ascending alphabetically\n     * 1: descending alphabetically\n     * 2: ascending numerically\n     * 3: descending numerically\n     */\n    public sorting: number = 0;\n\n    public selectTechniquesAcrossTactics: boolean = true;\n    public selectSubtechniquesWithParent: boolean = false;\n    public selectVisibleTechniques: boolean = false;\n\n    public compareTo?: ViewModel;\n    public versionChangelog?: VersionChangelog;\n\n    private _sidebarOpened: boolean;\n    public get sidebarOpened(): boolean {\n        return this._sidebarOpened;\n    }\n    public set sidebarOpened(newVal: boolean) {\n        this._sidebarOpened = newVal;\n    }\n\n    public readonly sidebarContentTypes = ['layerUpgrade', 'search'];\n    private _sidebarContentType: string;\n    public get sidebarContentType(): string {\n        return this._sidebarContentType;\n    }\n    public set sidebarContentType(newVal: string) {\n        if (this.sidebarContentTypes.includes(newVal)) this._sidebarContentType = newVal;\n        else this._sidebarContentType = '';\n    }\n\n    constructor(\n        name: string,\n        uid: string,\n        domainVersionID: string,\n        public dataService: DataService\n    ) {\n        console.debug(\"initializing ViewModel '\" + name + \"'\");\n        this.domainVersionID = domainVersionID;\n        this.filters = new Filter();\n        this.name = name;\n        this.uid = uid;\n        this.legendColorPresets = this.backgroundPresets;\n    }\n\n    public openSidebar(contentType: string) {\n        this.sidebarContentType = contentType;\n        this.sidebarOpened = true;\n    }\n\n    public loadVMData(): void {\n        let domain = this.dataService.getDomain(this.domainVersionID);\n        if (domain.isCustom) {\n            this.bundleURL = domain.urls[0];\n        }\n\n        if (!this.domainVersionID || !domain.dataLoaded) {\n            let self = this;\n            this.dataService.onDataLoad(this.domainVersionID, function () {\n                self.initTechniqueVMs();\n                self.filters.initPlatformOptions(self.dataService.getDomain(self.domainVersionID));\n            });\n        } else {\n            this.initTechniqueVMs();\n            this.filters.initPlatformOptions(domain);\n        }\n        this.loaded = true;\n    }\n\n    private initTechniqueVMs(): void {\n        for (let technique of this.dataService.getDomain(this.domainVersionID).techniques) {\n            // init techniques\n            for (let id of technique.get_all_technique_tactic_ids()) {\n                let techniqueVM = new TechniqueVM(id);\n                techniqueVM.score = this.initializeScoresTo;\n                this.setTechniqueVM(techniqueVM, false);\n            }\n\n            // init sub-techniques\n            for (let subtechnique of technique.subtechniques) {\n                for (let id of subtechnique.get_all_technique_tactic_ids()) {\n                    let techniqueVM = new TechniqueVM(id);\n                    techniqueVM.score = this.initializeScoresTo;\n                    this.setTechniqueVM(techniqueVM, false);\n                }\n            }\n        }\n        // display annotated subtechniques if \"annotated\" option is selected\n        if (this.layout.expandedSubtechniques == 'annotated') {\n            for (let technique of this.dataService.getDomain(this.domainVersionID).techniques) {\n                if (technique.subtechniques.length > 0) {\n                    for (let id of technique.get_all_technique_tactic_ids()) {\n                        let tvm = this.getTechniqueVM_id(id);\n                        for (let subtechnique of technique.subtechniques) {\n                            tvm.showSubtechniques =\n                                tvm.showSubtechniques ||\n                                subtechnique.get_all_technique_tactic_ids().some((sid) => {\n                                    let svm = this.getTechniqueVM_id(sid);\n                                    return svm.annotated();\n                                });\n                        }\n                    }\n                }\n            }\n        }\n        // display all subtechniques if \"all\" option is selected\n        else if (this.layout.expandedSubtechniques == 'all') {\n            for (let technique of this.dataService.getDomain(this.domainVersionID).techniques) {\n                if (technique.subtechniques.length > 0) {\n                    for (let id of technique.get_all_technique_tactic_ids()) {\n                        let tvm = this.getTechniqueVM_id(id);\n                        tvm.showSubtechniques = true;\n                    }\n                }\n            }\n        } else {\n            for (let technique of this.dataService.getDomain(this.domainVersionID).techniques) {\n                if (technique.subtechniques.length > 0) {\n                    for (let id of technique.get_all_technique_tactic_ids()) {\n                        let tvm = this.getTechniqueVM_id(id);\n                        if (tvm.showSubtechniques) {\n                            this.technique_show_subtechnique = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (this.layout.expandedSubtechniques == 'none' && !this.technique_show_subtechnique) {\n                this.techniqueVMs.forEach(function (tvm) {\n                    tvm.showSubtechniques = false;\n                });\n            }\n        }\n        // display none of the subtechniques if \"none\" option is selected\n    }\n\n    public getTechniqueVM(technique: Technique, tactic: Tactic): TechniqueVM {\n        if (!this.hasTechniqueVM(technique, tactic)) {\n            throw Error('technique VM not found: ' + technique.attackID + ', ' + tactic.attackID);\n        }\n        return this.techniqueVMs.get(technique.get_technique_tactic_id(tactic));\n    }\n\n    public getTechniqueVM_id(technique_tactic_id: string): TechniqueVM {\n        if (!this.hasTechniqueVM_id(technique_tactic_id)) {\n            throw Error('technique VM not found: ' + technique_tactic_id);\n        }\n        return this.techniqueVMs.get(technique_tactic_id);\n    }\n\n    /**\n     * setter\n     * @param {techniqueVM} techniqueVM: the techniqueVM to set\n     * @param {boolean} overwrite (default true) if true, overwrite existing techniqueVMs under that ID.\n     */\n    public setTechniqueVM(techniqueVM: TechniqueVM, overwrite = true): void {\n        if (this.techniqueVMs.has(techniqueVM.technique_tactic_union_id)) {\n            if (overwrite) this.techniqueVMs.delete(techniqueVM.technique_tactic_union_id);\n            else return;\n        }\n        this.techniqueVMs.set(techniqueVM.technique_tactic_union_id, techniqueVM);\n    }\n\n    public hasTechniqueVM(technique: Technique, tactic: Tactic): boolean {\n        return this.techniqueVMs.has(technique.get_technique_tactic_id(tactic));\n    }\n\n    public hasTechniqueVM_id(technique_tactic_id: string): boolean {\n        return this.techniqueVMs.has(technique_tactic_id);\n    }\n\n    /**\n     * Highlight the given technique under the given tactic\n     * @param {Technique} technique to highlight\n     * @param {Tactic} tactic wherein the technique occurs\n     */\n    public highlightTechnique(technique: Technique, tactic?: Tactic | null): void {\n        if (this.selectSubtechniquesWithParent && technique.isSubtechnique) this.highlightedTechniques.add(technique.parent.id);\n        this.highlightedTechnique = technique;\n        this.highlightedTechniques.add(technique.id);\n        this.highlightedTactic = tactic;\n    }\n\n    /**\n     * Clear the technique highlight\n     */\n    public clearHighlight(): void {\n        this.highlightedTactic = null;\n        this.highlightedTechnique = null;\n        this.highlightedTechniques = new Set<string>();\n    }\n\n    /**\n     * Select the given technique. Depending on selectTechniquesAcrossTactics, either selects in all tactics or in given tactic\n     * @param {Technique} technique to select\n     * @param {Tactic} tactic wherein the technique occurs\n     */\n    public selectTechnique(technique: Technique, tactic: Tactic): void {\n        if (this.selectTechniquesAcrossTactics) this.selectTechniqueAcrossTactics(technique);\n        else this.selectTechniqueInTactic(technique, tactic);\n    }\n\n    /**\n     * Unselect the given technique. Depending on selectTechniquesAcrossTactics, either unselects in all tactics or in given tactic\n     * @param {Technique} technique to select\n     * @param {Tactic} tactic wherein the technique occurs\n     */\n    public unselectTechnique(technique: Technique, tactic: Tactic): void {\n        if (this.selectTechniquesAcrossTactics) this.unselectTechniqueAcrossTactics(technique);\n        else this.unselectTechniqueInTactic(technique, tactic);\n    }\n\n    /**\n     * Select the given technique in the given tactic\n     * @param {Technique} technique to select\n     * @param {Tactic} tactic wherein the technique occurs\n     * @param {boolean} walkChildren (recursion helper) if true and selectSubtechniquesWithParent is true, walk selection up to parent technique\n     */\n    public selectTechniqueInTactic(technique: Technique, tactic: Tactic, walkChildren = true): void {\n        if (this.selectSubtechniquesWithParent && walkChildren) {\n            // check parent / children / siblings\n            if (technique.isSubtechnique) {\n                // select from parent\n                this.selectTechniqueInTactic(technique.parent, tactic, true);\n                return;\n            } else {\n                // select sub-techniques\n                for (let subtechnique of technique.subtechniques) {\n                    this.selectTechniqueInTactic(subtechnique, tactic, false);\n                }\n            }\n        }\n\n        let technique_tactic_id = technique.get_technique_tactic_id(tactic);\n        if (!this.isCurrentlyEditing()) {\n            // first selection\n            this.activeTvm = this.getTechniqueVM_id(technique_tactic_id);\n        }\n        if ((this.selectVisibleTechniques && this.getTechniqueVM_id(technique_tactic_id).isVisible) || !this.selectVisibleTechniques) {\n            this.selectedTechniques.add(technique_tactic_id);\n            this.checkValues(true, technique_tactic_id);\n        }\n    }\n\n    /**\n     * Select all techniques under the given tactic\n     * @param {Tactic} tactic wherein the techniques occur\n     */\n    public selectAllTechniquesInTactic(tactic: Tactic): void {\n        for (let technique of tactic.techniques) {\n            this.selectTechnique(technique, tactic);\n        }\n    }\n\n    /**\n     * select the given technique across all tactics in which it occurs\n     * @param {Technique} technique to select\n     * @param {boolean} walkChildren (recursion helper) if true and selectSubtechniquesWithParent is true, walk selection up to parent technique\n     * @param highlightTechniques, if true, highlight techniques rather than add to selected techniques group\n     */\n    public selectTechniqueAcrossTactics(technique: Technique, walkChildren = true, highlightTechniques = false): void {\n        if (this.selectSubtechniquesWithParent && walkChildren) {\n            // walk to parent / children / siblings\n            if (technique.isSubtechnique) {\n                // select from parent\n                this.selectTechniqueAcrossTactics(technique.parent, true, highlightTechniques);\n                return;\n            } else {\n                // select sub-techniques\n                for (let subtechnique of technique.subtechniques) {\n                    this.selectTechniqueAcrossTactics(subtechnique, false, highlightTechniques);\n                }\n            }\n        }\n        if (highlightTechniques) {\n            // highlight technique\n            this.highlightTechnique(technique);\n        } else {\n            for (let id of technique.get_all_technique_tactic_ids()) {\n                if (!this.isCurrentlyEditing()) this.activeTvm = this.getTechniqueVM_id(id); // first selection\n                if ((this.selectVisibleTechniques && this.getTechniqueVM_id(id).isVisible) || !this.selectVisibleTechniques) {\n                    this.selectedTechniques.add(id);\n                    this.checkValues(true, id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Unselect the given technique in the given tactic\n     * @param {Technique} technique to unselect\n     * @param {Tactic} tactic wherein the technique occurs\n     * @param {boolean} walkChildren (recursion helper) if true and selectSubtechniquesWithParent is true, walk selection up to parent technique\n     */\n    public unselectTechniqueInTactic(technique: Technique, tactic: Tactic, walkChildren = true): void {\n        if (this.selectSubtechniquesWithParent && walkChildren) {\n            // walk to parent / children / siblings\n            if (technique.isSubtechnique) {\n                // select from parent\n                this.unselectTechniqueInTactic(technique.parent, tactic, true);\n                return;\n            } else {\n                // select sub-techniques\n                for (let subtechnique of technique.subtechniques) {\n                    this.unselectTechniqueInTactic(subtechnique, tactic, false);\n                }\n            }\n        }\n\n        let technique_tactic_id = technique.get_technique_tactic_id(tactic);\n        this.selectedTechniques.delete(technique_tactic_id);\n        this.checkValues(false, technique_tactic_id);\n    }\n\n    /**\n     * Unselect all techniques in the given tactic\n     * @param {Tactic} tactic wherein the techniques occur\n     */\n    public unselectAllTechniquesInTactic(tactic: Tactic): void {\n        for (let technique of tactic.techniques) {\n            this.unselectTechnique(technique, tactic);\n        }\n    }\n\n    /**\n     * Unselect the given technique across all tactics in which it occurs\n     * @param {Technique} technique to unselect\n     * @param {boolean} walkChildren (recursion helper) if true and selectSubtechniquesWithParent is true, walk selection up to parent technique\n     */\n    public unselectTechniqueAcrossTactics(technique: Technique, walkChildren = true): void {\n        if (this.selectSubtechniquesWithParent && walkChildren) {\n            // walk to parent / children / siblings\n            if (technique.isSubtechnique) {\n                // select from parent\n                this.unselectTechniqueAcrossTactics(technique.parent, true);\n                return;\n            } else {\n                // select sub-techniques\n                for (let subtechnique of technique.subtechniques) {\n                    this.unselectTechniqueAcrossTactics(subtechnique, false);\n                }\n            }\n        }\n\n        for (let id of technique.get_all_technique_tactic_ids()) {\n            this.selectedTechniques.delete(id);\n            this.checkValues(false, id);\n        }\n    }\n\n    /* Unselect all techniques */\n    public clearSelectedTechniques(): void {\n        this.selectedTechniques.clear();\n        this.activeTvm = undefined;\n        this.linkMismatches = [];\n        this.metadataMismatches = [];\n    }\n\n    /* Select all techniques */\n    public selectAllTechniques(): void {\n        this.clearSelectedTechniques();\n        this.invertSelection();\n    }\n\n    /* Set all selected techniques to deselected, and select all techniques not currently selected */\n    public invertSelection(): void {\n        let previouslySelected = new Set(this.selectedTechniques);\n        this.clearSelectedTechniques();\n\n        let self = this;\n        this.techniqueVMs.forEach(function (tvm, key) {\n            if (!previouslySelected.has(tvm.technique_tactic_union_id)) {\n                if ((self.selectVisibleTechniques && tvm.isVisible) || !self.selectVisibleTechniques) {\n                    if (!self.isCurrentlyEditing()) {\n                        // first selection\n                        self.activeTvm = self.getTechniqueVM_id(tvm.technique_tactic_union_id);\n                    }\n                    self.selectedTechniques.add(tvm.technique_tactic_union_id);\n                    self.checkValues(true, tvm.technique_tactic_union_id);\n                }\n            }\n        });\n    }\n\n    /**\n     * Select all techniques with annotations if nothing is currently selected, or\n     * select a subset of the current selection that has annotations\n     */\n    public selectAnnotated(): void {\n        let self = this;\n        if (this.isCurrentlyEditing()) {\n            // deselect techniques without annotations\n            let selected = new Set(this.selectedTechniques);\n            this.techniqueVMs.forEach(function (tvm, key) {\n                if (selected.has(tvm.technique_tactic_union_id) && !tvm.annotated()) {\n                    self.selectedTechniques.delete(tvm.technique_tactic_union_id);\n                    self.checkValues(false, tvm.technique_tactic_union_id);\n                }\n            });\n        } else {\n            // select all techniques with annotations\n            this.techniqueVMs.forEach(function (tvm, key) {\n                if (tvm.annotated()) {\n                    if ((self.selectVisibleTechniques && tvm.isVisible) || !self.selectVisibleTechniques) {\n                        if (!self.isCurrentlyEditing()) self.activeTvm = self.getTechniqueVM_id(tvm.technique_tactic_union_id); // first selection\n                        self.selectedTechniques.add(tvm.technique_tactic_union_id);\n                        self.checkValues(true, tvm.technique_tactic_union_id);\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Select all techniques without annotations if nothing is currently selected, or\n     * select a subset of the current selection that do not have annotations\n     */\n    public selectUnannotated(): void {\n        let self = this;\n        if (this.isCurrentlyEditing()) {\n            // deselect techniques with annotations\n            let selected = new Set(this.selectedTechniques);\n            this.techniqueVMs.forEach(function (tvm, key) {\n                if (selected.has(tvm.technique_tactic_union_id) && tvm.annotated()) {\n                    self.selectedTechniques.delete(tvm.technique_tactic_union_id);\n                    self.checkValues(false, tvm.technique_tactic_union_id);\n                }\n            });\n        } else {\n            // select all techniques without annotations\n            this.selectAnnotated();\n            this.invertSelection();\n        }\n    }\n\n    /**\n     * Copies all annotations from unchanged techniques and techniques\n     * which have had minor changes\n     */\n    public initCopyAnnotations(): void {\n        let self = this;\n\n        function copy(attackID: string) {\n            let fromTechnique = self.dataService.getTechnique(attackID, self.compareTo.domainVersionID);\n            let domain = self.dataService.getDomain(self.domainVersionID);\n            let tactics = fromTechnique.tactics.map((shortname) => domain.tactics.find((t) => t.shortname == shortname));\n            tactics.forEach((tactic) => {\n                let fromVM = self.compareTo.getTechniqueVM(fromTechnique, tactic);\n                if (fromVM.annotated()) {\n                    let toTechnique = self.dataService.getTechnique(attackID, self.domainVersionID);\n                    self.copyAnnotations(fromTechnique, toTechnique, tactic);\n                }\n            });\n        }\n\n        if (this.versionChangelog) {\n            this.versionChangelog.unchanged.forEach((attackID) => copy(attackID));\n            this.versionChangelog.minor_changes.forEach((attackID) => copy(attackID));\n        }\n    }\n\n    /**\n     * Copy annotations from one technique to another under the given tactic.\n     * The previous technique will be disabled\n     * @param fromTechnique the technique to copy annotations from\n     * @param toTechnique the technique to copy annotations to\n     * @param tactic the tactic the techniques are found under\n     */\n    public copyAnnotations(fromTechnique: Technique, toTechnique: Technique, tactic: Tactic): void {\n        let fromVM = this.compareTo.getTechniqueVM(fromTechnique, tactic);\n        let toVM = this.getTechniqueVM(toTechnique, tactic);\n\n        this.versionChangelog.reviewed.delete(fromTechnique.attackID);\n\n        toVM.deserialize(fromVM.serialize(), fromTechnique.attackID, tactic.shortname);\n        this.updateScoreColor(toVM);\n        fromVM.enabled = false;\n\n        this.versionChangelog.copied.add(fromVM.technique_tactic_union_id);\n        if (fromTechnique.get_all_technique_tactic_ids().every((id) => this.versionChangelog.copied.has(id))) {\n            this.versionChangelog.reviewed.add(fromTechnique.attackID);\n        }\n    }\n\n    /**\n     * Reset the techniqueVM that the annotations were previously copied to\n     * and re-enable the technique the annotations were copied from\n     * @param fromTechnique the technique that annotations were copied from\n     * @param toTechnique the technique that annotations were copied to\n     * @param tactic the tactic the techniques are found under\n     */\n    public revertCopy(fromTechnique: Technique, toTechnique: Technique, tactic: Tactic): void {\n        let fromVM = this.compareTo.getTechniqueVM(fromTechnique, tactic);\n        let toVM = this.getTechniqueVM(toTechnique, tactic);\n        this.versionChangelog.reviewed.delete(fromTechnique.attackID);\n\n        toVM.resetAnnotations();\n        fromVM.enabled = true;\n\n        this.versionChangelog.copied.delete(fromVM.technique_tactic_union_id);\n        if (!fromTechnique.get_all_technique_tactic_ids().every((id) => this.versionChangelog.copied.has(id))) {\n            this.versionChangelog.reviewed.delete(fromTechnique.attackID);\n        }\n    }\n\n    /**\n     * Return true if the given technique is selected, false otherwise\n     * @param  {Technique}  technique the technique to check\n     * * @param  {Tactic}  tactic wherein the technique occurs\n     * @return {boolean}           true if selected, false otherwise\n     */\n    public isTechniqueSelected(technique: Technique, tactic: Tactic, walkChildren = true): boolean {\n        if (this.selectTechniquesAcrossTactics) {\n            if (this.selectSubtechniquesWithParent && walkChildren) {\n                // check parent / children / siblings\n                if (technique.isSubtechnique) {\n                    // select from parent\n                    return this.isTechniqueSelected(technique.parent, tactic, true);\n                } else {\n                    for (let subtechnique of technique.subtechniques) {\n                        if (this.isTechniqueSelected(subtechnique, tactic, false)) return true;\n                    }\n                }\n            }\n\n            for (let id of technique.get_all_technique_tactic_ids()) {\n                if (this.selectedTechniques.has(id)) return true;\n            }\n            return false;\n        } else {\n            if (this.selectSubtechniquesWithParent && walkChildren) {\n                // check parent / children / siblings\n                if (technique.isSubtechnique) {\n                    // select from parent\n                    return this.isTechniqueSelected(technique.parent, tactic, true);\n                } else {\n                    for (let subtechnique of technique.subtechniques) {\n                        if (this.isTechniqueSelected(subtechnique, tactic, false)) return true;\n                    }\n                }\n            }\n            return this.selectedTechniques.has(technique.get_technique_tactic_id(tactic));\n        }\n    }\n\n    /**\n     * Return the number of selected techniques\n     * @return {number} the number of selected techniques\n     */\n    public getSelectedTechniqueCount(): number {\n        if (this.selectTechniquesAcrossTactics) {\n            if (this.selectSubtechniquesWithParent) {\n                // match across tactics\n                // match subtechniques and parents\n\n                // matches this part\n                // vvvvv\n                // T1001.001^TA1000\n                let ids = new Set();\n                this.selectedTechniques.forEach((unionID) => ids.add(unionID.split('^')[0].split('.')[0]));\n                return ids.size;\n            } else {\n                // match across tactics\n                // differentiate subtechniques and parents\n\n                // matches this part\n                // vvvvv vvv\n                // T1001.001^TA1000\n                let ids = new Set();\n                this.selectedTechniques.forEach((unionID) => ids.add(unionID.split('^')[0]));\n                return ids.size;\n            }\n        } else {\n            if (this.selectSubtechniquesWithParent) {\n                // differentiate tactics\n                // match subtechniques and parents\n\n                // matches this part\n                // vvvvv     vvvvvv\n                // T1001.001^TA1000\n                let ids = new Set();\n                this.selectedTechniques.forEach((unionID) => {\n                    let split = unionID.split('^');\n                    let tacticID = split[1];\n                    let techniqueID = split[0].split('.')[0];\n                    ids.add(techniqueID + '^' + tacticID);\n                });\n                return ids.size;\n            } else {\n                // differentiate tactics\n                // differentiate subtechniques and parents\n\n                // matches this part\n                // vvvvv vvv vvvvvv\n                // T1001.001^TA1000\n                return this.selectedTechniques.size;\n            }\n        }\n    }\n\n    /**\n     * Returns true if the given tactic is selected\n     * @param  {Tactic}  tactic to check\n     * @return {boolean} true if selected\n     */\n    public isTacticSelected(tactic: Tactic): boolean {\n        let self = this;\n        let isSelected = tactic.techniques.every(function (technique) {\n            return self.isTechniqueSelected(technique, tactic);\n        });\n        return isSelected;\n    }\n\n    /**\n     * Return true if currently editing any techniques, false otherwise\n     * @return {boolean} true if currently editing any techniques, false otherwise\n     */\n    public isCurrentlyEditing(): boolean {\n        return this.getSelectedTechniqueCount() > 0;\n    }\n\n    /**\n     * Edit the selected techniques\n     * @param {string} field the field to edit\n     * @param {any}    value the value to place in the field\n     */\n    public editSelectedTechniques(field: string, value: any): void {\n        this.selectedTechniques.forEach((id) => {\n            this.getTechniqueVM_id(id)[field] = value;\n        });\n    }\n\n    /**\n     * Edit the selected techniques list attribute\n     * @param {string}  field the field to edit\n     * @param {(Link|Metadata)[]} values the list of values to place in the field\n     */\n    public editSelectedTechniqueValues(field: string, values: (Link | Metadata)[]): void {\n        let fieldToType: any = { links: Link, metadata: Metadata };\n        this.selectedTechniques.forEach((id) => {\n            const value_clone = values.map((value) => {\n                // deep copy\n                let clone = new fieldToType[field]();\n                clone.deserialize(value.serialize());\n                return clone;\n            });\n            this.getTechniqueVM_id(id)[field] = value_clone;\n        });\n    }\n\n    /**\n     * Reset the selected techniques' annotations to their default values\n     */\n    public resetSelectedTechniques(): void {\n        this.selectedTechniques.forEach((id) => {\n            this.getTechniqueVM_id(id).resetAnnotations();\n        });\n    }\n\n    /**\n     * Get get a common value from the selected techniques\n     * @param  field the field to get the common value from\n     * @return       the value of the field if all selected techniques have the same value, otherwise \"\"\n     */\n    public getEditingCommonValue(field: string): any {\n        if (!this.isCurrentlyEditing()) return '';\n        let ids = Array.from(this.selectedTechniques);\n        let commonValue = this.getTechniqueVM_id(ids[0])[field];\n        for (let i = 1; i < ids.length; i++) {\n            if (this.getTechniqueVM_id(ids[i])[field] != commonValue) return '';\n        }\n        return commonValue;\n    }\n\n    /**\n     * If a technique has been selected, checks whether the link & metadata values of the selected technique match\n     * the link & metadata values of the first selected technique. If a technique has been deselected, removes it from\n     * the lists of mismatching techniques (if applicable) or re-evalutes the lists of mismatching\n     * techniques in the case where the deselected technique was the first selected technique\n     * @param selected true if the technique was selected, false if it was deselected\n     * @param id the technique_tactic_union_id of the technique\n     */\n    public checkValues(selected: boolean, id: string): void {\n        if (selected) {\n            // selected technique(s)\n            let tvm = this.getTechniqueVM_id(id);\n            if (this.activeTvm.linkStr !== tvm.linkStr) this.linkMismatches.push(id);\n            if (this.activeTvm.metadataStr !== tvm.metadataStr) this.metadataMismatches.push(id);\n        } else {\n            // deselected technique(s)\n            if (this.linkMismatches.includes(id)) this.linkMismatches.splice(this.linkMismatches.indexOf(id), 1);\n            if (this.metadataMismatches.includes(id)) this.metadataMismatches.splice(this.metadataMismatches.indexOf(id), 1);\n\n            if (this.activeTvm && this.activeTvm.technique_tactic_union_id == id) {\n                // edge case where deselection was the first selected technique\n                let first_id = this.selectedTechniques.values().next().value;\n                this.activeTvm = first_id ? this.getTechniqueVM_id(first_id) : undefined;\n\n                // re-evaluate mismatched values\n                this.linkMismatches = [];\n                this.metadataMismatches = [];\n                for (let technique_tactic_id of Array.from(this.selectedTechniques.values())) {\n                    let tvm = this.getTechniqueVM_id(technique_tactic_id);\n                    if (this.activeTvm.linkStr !== tvm.linkStr) this.linkMismatches.push(technique_tactic_id);\n                    if (this.activeTvm.metadataStr !== tvm.metadataStr) this.metadataMismatches.push(technique_tactic_id);\n                }\n            }\n        }\n    }\n\n    /**\n     * Filter tactics according to viewmodel state\n     * @param {Tactic[]} tactics to filter\n     * @param {Matrix} matrix that the tactics fall under\n     * @returns {Tactic[]} filtered tactics\n     */\n    public filterTactics(tactics: Tactic[], matrix: Matrix): Tactic[] {\n        if (!this.loaded) return; // still initializing technique VMs\n        return tactics.filter((tactic: Tactic) => this.filterTechniques(tactic.techniques, tactic, matrix).length > 0);\n    }\n\n    /**\n     * Filter techniques according to viewModel state\n     * @param {Technique[]} techniques list of techniques to filter\n     * @param {Tactic} tactic tactic the techniques fall under\n     * @param {Matrix} matrix that the techniques fall under\n     * @returns {Technique[]} filtered techniques\n     */\n    public filterTechniques(techniques: Technique[], tactic: Tactic, matrix: Matrix): Technique[] {\n        return techniques.filter((technique: Technique) => {\n            let techniqueVM = this.getTechniqueVM(technique, tactic);\n            // filter by enabled\n            if (this.hideDisabled && !this.isSubtechniqueEnabled(technique, techniqueVM, tactic)) {\n                techniqueVM.setIsVisible(false);\n                technique.subtechniques.forEach((subtechnique) => {\n                    let subtechniqueVM = this.getTechniqueVM(subtechnique, tactic);\n                    subtechniqueVM.setIsVisible(false);\n                });\n                return false;\n            }\n            if (matrix.name == 'PRE-ATT&CK') {\n                techniqueVM.setIsVisible(true);\n                technique.subtechniques.forEach((subtechnique) => {\n                    let subtechniqueVM = this.getTechniqueVM(subtechnique, tactic);\n                    subtechniqueVM.setIsVisible(true);\n                });\n                return true; // don't filter by platform if it's pre-attack\n            }\n            // filter by platform\n            let platforms = new Set(technique.platforms);\n            if (platforms.size == 0) { platforms.add('None'); }\n            for (let platform of this.filters.platforms.selection) {\n                if (platforms.has(platform)) {\n                    techniqueVM.setIsVisible(true);\n                    technique.subtechniques.forEach((subtechnique) => {\n                        let subtechniqueVM = this.getTechniqueVM(subtechnique, tactic);\n                        subtechniqueVM.setIsVisible(true);\n                    });\n                    return true; //platform match\n                }\n            }\n            techniqueVM.setIsVisible(false);\n            technique.subtechniques.forEach((subtechnique) => {\n                let subtechniqueVM = this.getTechniqueVM(subtechnique, tactic);\n                subtechniqueVM.setIsVisible(false);\n            });\n            return false; // no platform match\n        });\n    }\n\n    public isSubtechniqueEnabled(technique, techniqueVM, tactic): boolean {\n        if (techniqueVM.enabled) return true;\n        else if (technique.subtechniques.length > 0) {\n            return technique.subtechniques.some((subtechnique) => {\n                let sub_platforms = new Set(subtechnique.platforms);\n                let filter = new Set(this.filters.platforms.selection);\n                let platforms = new Set(Array.from(filter.values()).filter((p) => sub_platforms.has(p)));\n                return this.getTechniqueVM(subtechnique, tactic).enabled && platforms.size > 0;\n            });\n        } else return false;\n    }\n\n    /**\n     * Sort techniques according to viewModel state\n     * @param {Technique[]} techniques techniques to sort\n     * @param {Tactic} tactic tactic the techniques fall under\n     * @returns {Technique[]} sorted techniques\n     */\n    public sortTechniques(techniques: Technique[], tactic: Tactic): Technique[] {\n        return techniques.sort((technique1: Technique, technique2: Technique) => {\n            const techniqueVM1 = this.getTechniqueVM(technique1, tactic);\n            const techniqueVM2 = this.getTechniqueVM(technique2, tactic);\n\n            this.sortSubTechniques(technique1, tactic);\n            this.sortSubTechniques(technique2, tactic);\n\n            // prefer techniques scored 0 over unscored\n            let score1 = techniqueVM1.score.length > 0 ? Number(techniqueVM1.score) : Number.NEGATIVE_INFINITY;\n            let score2 = techniqueVM2.score.length > 0 ? Number(techniqueVM2.score) : Number.NEGATIVE_INFINITY;\n\n            if (this.layout.showAggregateScores) {\n                // if enabled, factor aggregate scores of parent techniques into sorting\n                if (technique1.subtechniques.length > 0) score1 = this.calculateAggregateScore(technique1, tactic);\n                if (technique2.subtechniques.length > 0) score2 = this.calculateAggregateScore(technique2, tactic);\n            }\n            return this.sortingAlgorithm(technique1, technique2, score1, score2);\n        });\n    }\n\n    /**\n     * Sort subtechniques according to viewModel state\n     * @param {Technique} technique technique to sort\n     * @param {Tactic} tactic tactic the technique falls under\n     */\n    public sortSubTechniques(technique: Technique, tactic: Tactic) {\n        technique.subtechniques.sort((technique1: Technique, technique2: Technique) => {\n            const techniqueVM1 = this.getTechniqueVM(technique1, tactic);\n            const techniqueVM2 = this.getTechniqueVM(technique2, tactic);\n            const score1 = techniqueVM1.score.length > 0 ? Number(techniqueVM1.score) : 0;\n            const score2 = techniqueVM2.score.length > 0 ? Number(techniqueVM2.score) : 0;\n            return this.sortingAlgorithm(technique1, technique2, score1, score2);\n        });\n    }\n\n    /**\n     * Execute the sorting algorithm for techniques according to the viewModel state\n     * @param {Technique} technique1 the first technique in the comparison\n     * @param {Technique} technique2 the second technique in the comparison\n     * @param {number} score1 the first score in the comparison\n     * @param {number} score2 the second score in the comparison\n     * @returns technique or score comparison\n     */\n    private sortingAlgorithm(technique1: Technique, technique2: Technique, score1: number, score2: number) {\n        switch (this.sorting) {\n            case 1: // Z-A\n                return technique2.name.localeCompare(technique1.name);\n            case 2: // 1-2\n                if (score1 === score2) {\n                    return technique1.name.localeCompare(technique2.name);\n                } else {\n                    return score1 - score2;\n                }\n            case 3: // 2-1\n                if (score1 === score2) {\n                    return technique1.name.localeCompare(technique2.name);\n                } else {\n                    return score2 - score1;\n                }\n            case 0: // A-Z\n            default:\n                return technique1.name.localeCompare(technique2.name);\n        }\n    }\n\n    public calculateAggregateScore(technique: Technique, tactic: Tactic): any {\n        const tvm = this.getTechniqueVM(technique, tactic);\n        let score = tvm.score.length > 0 ? Number(tvm.score) : 0;\n        let validTechniquesCount = tvm.score.length > 0 ? 1 : 0;\n        let scores = [score];\n\n        technique.subtechniques.forEach((subtechnique) => {\n            const svm = this.getTechniqueVM(subtechnique, tactic);\n            const scoreNum = svm.score.length > 0 ? Number(svm.score) : 0;\n            if (svm.score.length > 0) {\n                validTechniquesCount += 1;\n                scores.push(scoreNum);\n            }\n        });\n\n        if (validTechniquesCount === 0) return tvm.score.length > 0 ? score : Number.NEGATIVE_INFINITY;\n\n        let aggScore: any = 0;\n\n        switch (this.layout.aggregateFunction) {\n            case 'min':\n                if (scores.length > 0) aggScore = Math.min(...scores);\n                break;\n            case 'max':\n                if (scores.length > 0) aggScore = Math.max(...scores);\n                break;\n            case 'sum':\n                aggScore = scores.reduce((a, b) => a + b);\n                break;\n            case 'average':\n            default:\n                // Divide by count of all subtechniques + 1 (for parent technique) if counting unscored is enabled\n                // Otherwise, divide by count of all scored only\n                score = scores.reduce((a, b) => a + b);\n                aggScore = score / (this.layout.countUnscored ? technique.subtechniques.length + 1 : validTechniquesCount);\n                break;\n        }\n\n        aggScore = aggScore.toFixed(2);\n        tvm.aggregateScoreColor = this.gradient.getHexColor(aggScore.toString());\n        tvm.aggregateScore = Number.isFinite(+aggScore) ? (+aggScore).toString() : '';\n        return +aggScore;\n    }\n\n    /**\n     * Apply sort and filter state to techniques\n     * @param {Technique[]} techniques techniques to sort and filter\n     * @param {Tactic} tactic that the techniques fall under\n     * @param {Matrix} matrix that the techniques fall under\n     * @returns {Technique[]} sorted and filtered techniques\n     */\n    public applyControls(techniques: Technique[], tactic: Tactic, matrix: Matrix): Technique[] {\n        return this.sortTechniques(this.filterTechniques(techniques, tactic, matrix), tactic);\n    }\n\n    /**\n     * List of visible technique and subtechnique attack IDs\n     * @returns list of strings of each visible technique and subtechnique attack ID\n     */\n    public getVisibleTechniquesList(): string[] {\n        let visibleTechniques: string[] = [];\n        this.techniqueVMs.forEach((t) => {\n            if (t.isVisible) {\n                visibleTechniques.push(t.technique_tactic_union_id);\n            }\n        });\n        return visibleTechniques;\n    }\n\n    /**\n     * Number of modified hidden techniques\n     * @returns number of hidden techniques that are annotated\n     */\n    public modifiedHiddenTechniques(): number {\n        let modifiedHiddenTechniques = 0;\n        this.techniqueVMs.forEach(function (value, key) {\n            if (value.modified() && value.isVisible === false) {\n                modifiedHiddenTechniques++;\n            }\n        });\n        return modifiedHiddenTechniques;\n    }\n\n    /**\n     * Stringify this ViewModel\n     * @return string representation\n     */\n    public serialize(downloadAnnotationsOnVisibleTechniques: boolean): string {\n        let modifiedTechniqueVMs = [];\n        this.techniqueVMs.forEach(function (value, key) {\n            if (value.modified() && !downloadAnnotationsOnVisibleTechniques) {\n                modifiedTechniqueVMs.push(JSON.parse(value.serialize())); //only save techniqueVMs which have been modified\n            } else if (value.modified() && value.isVisible === true && downloadAnnotationsOnVisibleTechniques) {\n                modifiedTechniqueVMs.push(JSON.parse(value.serialize())); //only save techniqueVMs which have been modified and are visible\n            }\n        });\n        let rep: { [k: string]: any } = {};\n        rep.name = this.name;\n\n        rep.versions = {\n            attack: this.dataService.getDomain(this.domainVersionID).getVersion(),\n            navigator: globals.navVersion,\n            layer: globals.layerVersion,\n        };\n\n        let domain = this.dataService.getDomain(this.domainVersionID);\n        rep.domain = domain.domain_identifier;\n        if (domain.isCustom) {\n            // custom data url\n            rep.customDataURL = domain.urls[0];\n        }\n        rep.description = this.description;\n        rep.filters = JSON.parse(this.filters.serialize());\n        rep.sorting = this.sorting;\n        rep.layout = this.layout.serialize();\n        rep.hideDisabled = this.hideDisabled;\n        rep.techniques = modifiedTechniqueVMs;\n        rep.gradient = JSON.parse(this.gradient.serialize());\n        rep.legendItems = JSON.parse(JSON.stringify(this.legendItems));\n        rep.metadata = this.metadata.filter((m) => m.valid()).map((m) => m.serialize());\n        rep.links = this.links.filter((l) => l.valid()).map((l) => l.serialize());\n\n        rep.showTacticRowBackground = this.showTacticRowBackground;\n        rep.tacticRowBackground = this.tacticRowBackground;\n        rep.selectTechniquesAcrossTactics = this.selectTechniquesAcrossTactics;\n        rep.selectSubtechniquesWithParent = this.selectSubtechniquesWithParent;\n        rep.selectVisibleTechniques = this.selectVisibleTechniques;\n\n        return JSON.stringify(rep, null, '\\t');\n    }\n\n    /**\n     * Restore the domain and version from a string\n     * @param rep string to restore from\n     * @return string representation of the obj version\n     */\n    public deserializeDomainVersionID(rep: any): string {\n        let versionNumber = '';\n        let obj = typeof rep == 'string' ? JSON.parse(rep) : rep;\n        this.name = obj.name;\n        // layer with no specified version defaults to current version\n        this.version = this.dataService.latestVersion.number;\n        if ('versions' in obj) {\n            if ('attack' in obj.versions) {\n                if (typeof obj.versions.attack === 'string') {\n                    if (obj.versions.attack.length > 0) this.version = obj.versions.attack.match(/\\d+/g)[0];\n                } else console.error('TypeError: attack version field is not a string');\n            }\n            versionNumber = String(obj.versions['layer']);\n        }\n        if ('version' in obj) {\n            // backwards compatibility with Layer Format 3\n            versionNumber = String(obj.version);\n        }\n        // patch for old domain name convention\n        if (obj.domain in this.dataService.domain_backwards_compatibility) {\n            this.domain = this.dataService.domain_backwards_compatibility[obj.domain];\n        } else {\n            this.domain = obj.domain;\n        }\n        this.domainVersionID = this.dataService.getDomainVersionID(this.domain, this.version);\n        return versionNumber;\n    }\n\n    /**\n     * Restore this vm from a string\n     * @param  rep string to restore from\n     */\n    public deserialize(rep: any, restoreTechniques: boolean = true): void {\n        let obj = typeof rep == 'string' ? JSON.parse(rep) : rep;\n\n        if ('description' in obj) {\n            if (typeof obj.description === 'string') this.description = obj.description;\n            else console.error('TypeError: description field is not a string');\n        }\n        if ('filters' in obj) {\n            this.filters.deserialize(obj.filters);\n        }\n        if ('sorting' in obj) {\n            if (typeof obj.sorting === 'number') this.sorting = obj.sorting;\n            else console.error('TypeError: sorting field is not a number');\n        }\n        if ('hideDisabled' in obj) {\n            if (typeof obj.hideDisabled === 'boolean') this.hideDisabled = obj.hideDisabled;\n            else console.error('TypeError: hideDisabled field is not a boolean');\n        }\n\n        if ('gradient' in obj) {\n            this.gradient = new Gradient();\n            this.gradient.deserialize(JSON.stringify(obj.gradient));\n        }\n\n        if ('legendItems' in obj) {\n            for (let item of obj.legendItems) {\n                let legendItem = {\n                    color: '#defa217',\n                    label: 'default label',\n                };\n                if (!('label' in item)) {\n                    console.error(\"Error: LegendItem required field 'label' not present\");\n                    continue;\n                }\n                if (!('color' in item)) {\n                    console.error(\"Error: LegendItem required field 'label' not present\");\n                    continue;\n                }\n\n                if (typeof item.label === 'string') {\n                    legendItem.label = item.label;\n                } else {\n                    console.error('TypeError: legendItem label field is not a string');\n                    continue;\n                }\n\n                if (typeof item.color === 'string' && tinycolor(item.color).isValid()) {\n                    legendItem.color = item.color;\n                } else {\n                    console.error('TypeError: legendItem color field is not a color-string:', item.color, '(', typeof item.color, ')');\n                    continue;\n                }\n                this.legendItems.push(legendItem);\n            }\n        }\n\n        if ('showTacticRowBackground' in obj) {\n            if (typeof obj.showTacticRowBackground === 'boolean') this.showTacticRowBackground = obj.showTacticRowBackground;\n            else console.error('TypeError: showTacticRowBackground field is not a boolean');\n        }\n        if ('tacticRowBackground' in obj) {\n            if (typeof obj.tacticRowBackground === 'string' && tinycolor(obj.tacticRowBackground).isValid())\n                this.tacticRowBackground = obj.tacticRowBackground;\n            else\n                console.error(\n                    'TypeError: tacticRowBackground field is not a color-string:',\n                    obj.tacticRowBackground,\n                    '(',\n                    typeof obj.tacticRowBackground,\n                    ')'\n                );\n        }\n        if ('selectTechniquesAcrossTactics' in obj) {\n            if (typeof obj.selectTechniquesAcrossTactics === 'boolean') this.selectTechniquesAcrossTactics = obj.selectTechniquesAcrossTactics;\n            else console.error('TypeError: selectTechniquesAcrossTactics field is not a boolean');\n        }\n        if ('selectSubtechniquesWithParent' in obj) {\n            if (typeof obj.selectSubtechniquesWithParent === 'boolean') this.selectSubtechniquesWithParent = obj.selectSubtechniquesWithParent;\n            else console.error('TypeError: selectSubtechniquesWithParent field is not a boolean');\n        }\n        if ('selectVisibleTechniques' in obj) {\n            if (typeof obj.selectVisibleTechniques === 'boolean') this.selectVisibleTechniques = obj.selectVisibleTechniques;\n            else console.error('TypeError: selectVisibleTechniques field is not a boolean');\n        }\n        if ('techniques' in obj && restoreTechniques) {\n            if (obj.techniques.length > 0) {\n                for (let objTechnique of obj.techniques) {\n                    if ('tactic' in objTechnique) {\n                        let tvm = new TechniqueVM('');\n                        tvm.deserialize(JSON.stringify(objTechnique), objTechnique.techniqueID, objTechnique.tactic);\n                        this.setTechniqueVM(tvm);\n                    } else {\n                        // occurs in multiple tactics, match to Technique by attackID\n                        for (let technique of this.dataService.getDomain(this.domainVersionID).techniques) {\n                            if (technique.attackID == objTechnique.techniqueID) {\n                                // match technique\n                                // don't load deprecated/revoked, causes crash since tactics don't get loaded on revoked techniques\n                                if (technique.deprecated || technique.revoked) break;\n\n                                for (let tactic of technique.tactics) {\n                                    let tvm = new TechniqueVM('');\n                                    tvm.deserialize(JSON.stringify(objTechnique), objTechnique.techniqueID, tactic);\n                                    this.setTechniqueVM(tvm);\n                                }\n                                break;\n                            }\n                            //check against subtechniques\n                            for (let subtechnique of technique.subtechniques) {\n                                if (subtechnique.attackID == objTechnique.techniqueID) {\n                                    // don't load deprecated/revoked, causes crash since tactics don't get loaded on revoked techniques\n                                    if (subtechnique.deprecated || subtechnique.revoked) break;\n\n                                    for (let tactic of subtechnique.tactics) {\n                                        let tvm = new TechniqueVM('');\n                                        tvm.deserialize(JSON.stringify(objTechnique), objTechnique.techniqueID, tactic);\n                                        this.setTechniqueVM(tvm);\n                                    }\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if ('metadata' in obj) {\n            for (let metadataObj of obj.metadata) {\n                let m = new Metadata();\n                m.deserialize(metadataObj);\n                if (m.valid()) this.metadata.push(m);\n            }\n        }\n        if ('links' in obj) {\n            for (let link of obj.links) {\n                let l = new Link();\n                l.deserialize(link);\n                if (l.valid()) this.links.push(l);\n            }\n        }\n        // add custom data URL\n        if ('customDataURL' in obj) {\n            this.bundleURL = obj.customDataURL;\n        }\n        if ('layout' in obj) {\n            this.layout.deserialize(obj.layout);\n        } else if ('viewMode' in obj) {\n            /*\n             * viewMode backwards compatibility:\n             * 0: full table (side layout, show name)\n             * 1: compact table (side layout, show ID)\n             * 2: mini table (mini layout, show neither name nor ID)\n             */\n            if (typeof obj.viewMode === 'number') {\n                switch (obj.viewMode) {\n                    case 1:\n                        this.layout.layout = 'side';\n                        this.layout.showName = false;\n                        this.layout.showID = true;\n                        break;\n                    case 2:\n                        this.layout.layout = 'mini';\n                        this.layout.showName = false;\n                        this.layout.showID = false;\n                        break;\n                    case 0:\n                    default:\n                        break; //default matrix layout already initialized\n                }\n            } else console.error('TypeError: viewMode field is not a number');\n        }\n\n        this.updateGradient();\n    }\n\n    /* Add a color to the end of the gradient */\n    public addGradientColor(): void {\n        this.gradient.addColor();\n        this.updateGradient();\n    }\n\n    /**\n     * Remove color at the given index\n     * @param index index to remove color at\n     */\n    public removeGradientColor(index: number): void {\n        this.gradient.removeColor(index);\n        this.updateGradient();\n    }\n\n    /* Update this vm's gradient */\n    public updateGradient(): void {\n        this.gradient.updateGradient();\n        let self = this;\n        this.techniqueVMs.forEach(function (tvm, key) {\n            tvm.scoreColor = self.gradient.getHexColor(tvm.score);\n        });\n        this.updateLegendColorPresets();\n    }\n\n    /**\n     * Update the score color of a single technique VM to match the current\n     * score and gradient\n     * @param tvm technique VM to update\n     */\n    public updateScoreColor(tvm: TechniqueVM): void {\n        tvm.scoreColor = this.gradient.getHexColor(tvm.score);\n    }\n\n    public addLegendItem(): void {\n        let legendItem = {\n            label: 'NewItem',\n            color: '#00ffff',\n        };\n        this.legendItems.push(legendItem);\n    }\n\n    public deleteLegendItem(index: number): void {\n        this.legendItems.splice(index, 1);\n    }\n\n    public clearLegend(): void {\n        this.legendItems = [];\n    }\n\n    public updateLegendColorPresets(): void {\n        this.legendColorPresets = [];\n        this.backgroundPresets.forEach((preset) => this.legendColorPresets.push(preset));\n        this.gradient.colors.forEach((color) => this.legendColorPresets.push(color.color));\n    }\n}\n","import { Component, Input, ViewChild, AfterViewInit, ViewEncapsulation, OnDestroy, ElementRef, Output, EventEmitter } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { ConfigService } from '../services/config.service';\nimport { TabsComponent } from '../tabs/tabs.component';\nimport { ViewModelsService } from '../services/viewmodels.service';\nimport { ViewModel } from '../classes';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { Subscription } from 'rxjs';\nimport * as Excel from 'exceljs/dist/exceljs.min.js';\nimport * as is from 'is_js';\nimport tinycolor from 'tinycolor2';\n\n@Component({\n    selector: 'DataTable',\n    templateUrl: './data-table.component.html',\n    styleUrls: ['./data-table.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class DataTableComponent implements AfterViewInit, OnDestroy {\n    @ViewChild('scrollRef') private scrollRef: ElementRef;\n\n    @Input() viewModel: ViewModel; // ViewModel being used by this data-table\n    @Input() currentDropdown: string = ''; // current dropdown menu\n\n    @Output() dropdownChange = new EventEmitter<any>();\n    @Output() onScroll = new EventEmitter<any>();\n\n    public customContextMenuItems = []; // items for custom context menu\n    public showingLegend = false; // is the legend panel currently expanded\n\n    // scroll handling\n    public previousScrollTop: number = 0;\n    public headerHeight: number = 0;\n    public footerHeight: number = 32;\n    public controlsHeight: number = 34;\n    public isScrollUp: boolean = true;\n    public handleScroll = (e) => {\n        const diff = this.scrollRef.nativeElement.scrollTop - this.previousScrollTop;\n        if ((!this.isScrollUp && diff < 0) || (this.isScrollUp && diff > 0)) {\n            this.isScrollUp = diff < 0;\n            this.calculateScrollHeight();\n            this.previousScrollTop = this.scrollRef.nativeElement.scrollTop;\n        } else if (!this.isScrollUp && this.scrollRef.nativeElement.scrollTop > 0 && diff === 0) {\n            this.calculateScrollHeight();\n        }\n    };\n    public calculateScrollHeight = () => {\n        const tabOffset = this.isScrollUp ? 0 : this.headerHeight;\n        this.onScroll.emit(-1 * tabOffset);\n        const scrollWindowHeight = this.isScrollUp ? this.headerHeight + this.controlsHeight + this.footerHeight : this.controlsHeight;\n        this.scrollRef.nativeElement.style.height = `calc(100vh - ${scrollWindowHeight}px)`;\n    };\n\n    public downloadAnnotationsOnVisibleTechniques: boolean = false;\n\n    // edit field bindings\n    public commentEditField: string = '';\n    public scoreEditField: string = '';\n\n    private selectionChangeSubscription: Subscription;\n\n    constructor(\n        public dataService: DataService,\n        private tabs: TabsComponent,\n        private sanitizer: DomSanitizer,\n        private viewModelsService: ViewModelsService,\n        public configService: ConfigService\n    ) {\n        this.selectionChangeSubscription = this.viewModelsService.onSelectionChange.subscribe(() => {\n            this.onTechniqueSelect();\n        });\n    }\n\n    ngAfterViewInit(): void {\n        this.headerHeight = document.querySelector<HTMLElement>('.header-wrapper')?.offsetHeight;\n        this.scrollRef.nativeElement.style.height = `calc(100vh - ${this.headerHeight + this.controlsHeight + this.footerHeight}px)`;\n        this.scrollRef.nativeElement.addEventListener('scroll', this.handleScroll);\n    }\n\n    ngOnDestroy(): void {\n        this.selectionChangeSubscription.unsubscribe();\n        document.body.removeEventListener('scroll', this.handleScroll);\n    }\n\n    public updateStickyToolbar() {\n        this.viewModel.stickyToolbar = !this.viewModel.stickyToolbar;\n        if (this.viewModel.stickyToolbar) {\n            this.headerHeight = document.querySelector<HTMLElement>('.header-wrapper')?.offsetHeight;\n            this.scrollRef.nativeElement.style.height = `calc(100vh - ${this.headerHeight + this.controlsHeight + this.footerHeight}px)`;\n            this.scrollRef.nativeElement.addEventListener('scroll', this.handleScroll);\n        } else {\n            this.scrollRef.nativeElement.style.height = null;\n            this.scrollRef.nativeElement.addEventListener('scroll', this.handleScroll);\n        }\n    }\n    /**\n     * Save the given blob\n     * @param blob the blob to download\n     * @param filename save as filename\n     */\n    public saveBlob(blob, filename): void {\n        if (is.ie()) {\n            // internet explorer\n            const nav = window.navigator as any;\n            nav.msSaveOrOpenBlob(blob, filename);\n        } else {\n            let svgUrl = URL.createObjectURL(blob);\n            let downloadLink = document.createElement('a');\n            downloadLink.href = svgUrl;\n            downloadLink.download = filename;\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            document.body.removeChild(downloadLink);\n        }\n    }\n\n    /**\n     * Stringifies the current view model into a JSON string,\n     * stores the string as a blob, and saves the blob as a\n     * JSON file\n     */\n    public saveLayerLocally(): void {\n        let json = this.viewModel.serialize(this.downloadAnnotationsOnVisibleTechniques);\n        let blob = new Blob([json], { type: 'text/json' });\n        this.saveLayerJson_helper(blob);\n    }\n\n    /**\n     * Stringifies the current view model with all the layers into a JSON string,\n     * stores the string as a blob, and saves the blob as a\n     * JSON file\n     */\n    public saveAllLayersLocally(): void {\n        let myarr = [];\n        for (let viewModel of this.viewModelsService.viewModels) {\n            myarr.push(JSON.parse(viewModel.serialize(this.downloadAnnotationsOnVisibleTechniques)));\n        }\n        let blob = new Blob([JSON.stringify(myarr)], { type: 'text/json' });\n        this.saveLayerJson_helper(blob);\n    }\n\n    /** Helper function for saving layer in JSON format */\n    public saveLayerJson_helper(blob): void {\n        let filename = this.viewModel.name.toLowerCase().replace(/ /g, '_') + '.json';\n        this.saveBlob(blob, filename);\n    }\n\n    /**\n     * Helper function for exporting to excel to stylize cells\n     */\n    public styleCells(cell, technique, tvm): void {\n        cell.value = this.getDisplayName(technique);\n\n        // cell format\n        cell.alignment = { vertical: 'top', horizontal: 'left' };\n        if (tvm.enabled) {\n            if (tvm.color) {\n                //manually assigned\n                cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF' + tvm.color.substring(1) } };\n                cell.font = { color: { argb: 'FF' + tinycolor.mostReadable(tvm.color, ['white', 'black']).toHex() } };\n            } else if (this.viewModel.layout._showAggregateScores && tvm.aggregateScoreColor) {\n                cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF' + tvm.aggregateScoreColor.substring(1) } };\n                cell.font = { color: { argb: 'FF' + tinycolor.mostReadable(tvm.aggregateScoreColor, ['white', 'black']).toHex() } };\n            } else if (tvm.score) {\n                //score assigned\n                cell.fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF' + tvm.scoreColor.substring(1) } };\n                cell.font = { color: { argb: 'FF' + tinycolor.mostReadable(tvm.scoreColor, ['white', 'black']).toHex() } };\n            }\n            if (tvm.comment) {\n                //comment present on technique\n                cell.note = tvm.comment;\n            }\n        } else {\n            //disabled\n            cell.font = { color: { argb: 'FFBCBCBC' } };\n        }\n\n        // subtechniques border\n        if (tvm.showSubtechniques) {\n            cell.border = { top: { style: 'thin' }, bottom: { style: 'thin' }, left: { style: 'thin' } };\n        } else if (technique.isSubtechnique) {\n            cell.border = { top: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };\n        }\n    }\n\n    /** Export single layer to Excel */\n    public saveLayerLocallyExcel(): void {\n        // create new excel workbook\n        let workbook = new Excel.Workbook();\n        let domain = this.dataService.getDomain(this.viewModel.domainVersionID);\n        // create a worksheet for each matrix in the domain\n        for (let matrix of domain.matrices) {\n            let worksheet = workbook.addWorksheet(matrix.name + ' (v' + domain.getVersion() + ')');\n            this.saveLayerExcel_helper(matrix, worksheet, this.viewModel);\n        }\n\n        // save file\n        workbook.xlsx.writeBuffer().then((data) => {\n            const blob = new Blob([data], { type: 'application/octet-stream' });\n            const filename = this.viewModel.name.toLowerCase().replace(/ /g, '_') + '.xlsx';\n            this.saveBlob(blob, filename);\n        });\n    }\n\n    /** Export all layers to Excel */\n    public saveAllLayersLocallyExcel(): void {\n        // create new excel workbook\n        let workbook = new Excel.Workbook();\n        for (let i = 0; i < this.viewModelsService.viewModels.length; i++) {\n            let domain = this.dataService.getDomain(this.viewModelsService.viewModels[i].domainVersionID);\n            // create a worksheet for each matrix in the domain\n            for (let matrix of domain.matrices) {\n                let worksheet = workbook.addWorksheet(\n                    matrix.name + ' v' + domain.getVersion() + ' (' + this.viewModelsService.viewModels[i].name + '-' + i + ')'\n                );\n                this.saveLayerExcel_helper(matrix, worksheet, this.viewModelsService.viewModels[i]);\n            }\n        }\n        // save file\n        workbook.xlsx.writeBuffer().then((data) => {\n            const blob = new Blob([data], { type: 'application/octet-stream' });\n            const filename = this.viewModel.name.toLowerCase().replace(/ /g, '_') + '.xlsx';\n            this.saveBlob(blob, filename);\n        });\n    }\n\n    /** Helper function for saving layer in Excel format */\n    public saveLayerExcel_helper(matrix, worksheet, viewModel): void {\n        // create a worksheet for each matrix in the domain\n        // create tactic columns\n        let columns = viewModel.filterTactics(matrix.tactics, matrix).map((tactic) => {\n            return { header: this.getDisplayName(tactic), key: tactic.name };\n        });\n        worksheet.columns = columns;\n\n        // create cells\n        for (let tactic of viewModel.filterTactics(matrix.tactics, matrix)) {\n            let tacticCol = worksheet.getColumn(tactic.name);\n            let techniques = viewModel.applyControls(tactic.techniques, tactic, matrix);\n            let techniqueCells = techniques.map((technique) => {\n                return technique.name;\n            });\n            let subtechniqueList = [];\n\n            // create subtechnique cells, if shown\n            let subtechniqueCells = [];\n            for (let technique of techniques) {\n                let techniqueRow = techniqueCells.indexOf(technique.name);\n                let tvm = viewModel.getTechniqueVM(technique, tactic);\n\n                if (!tvm.showSubtechniques) continue; // do not show sub-techniques, skip\n\n                // retrieve subtechniques\n                let subtechniques = viewModel.applyControls(technique.subtechniques, tactic, matrix).map((sub) => {\n                    return sub.name;\n                });\n                subtechniqueList = subtechniqueList.concat(technique.subtechniques);\n\n                // format technique cells for subtechniques\n                let excelIndex = this.addSubtechniqueCells(subtechniqueCells, techniqueCells, subtechniques, technique);\n\n                // merge technique cells\n                if (excelIndex > 0) {\n                    worksheet.mergeCells(techniqueRow + 2, tacticCol.number, techniqueRow + excelIndex + 1, tacticCol.number);\n                }\n            }\n\n            if (subtechniqueCells.length > 0) {\n                // add subtechniques column\n                let id = columns.findIndex((col) => col.key == tactic.name);\n                columns.splice(id + 1, 0, { header: this.getDisplayName(tactic), key: tactic.name + 'Subtechniques' });\n                worksheet.columns = columns;\n\n                // merge subtechniques header\n                let subtechniqueCol = worksheet.getColumn(tactic.name + 'Subtechniques');\n                worksheet.mergeCells(tacticCol.letter + '1:' + subtechniqueCol.letter + '1');\n                subtechniqueCol.values = [tactic.name.toString() + 'Subtechniques'].concat(subtechniqueCells);\n\n                // style subtechnique cells\n                this.styleTechniqueCells(subtechniqueCol, subtechniqueList, viewModel, tactic, true);\n            }\n            tacticCol.values = [this.getDisplayName(tactic)].concat(techniqueCells);\n\n            // style technique cells\n            this.styleTechniqueCells(tacticCol, techniques, viewModel, tactic);\n        }\n\n        // style tactic headers\n        this.styleTacticHeaders(worksheet, viewModel);\n\n        worksheet.getRow(1).alignment = { horizontal: 'center' };\n        worksheet.getRow(1).border = { bottom: { style: 'thin' } };\n        worksheet.getRow(1).font = { bold: true };\n        if (viewModel.showTacticRowBackground) {\n            worksheet.getRow(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF' + viewModel.tacticRowBackground.substring(1) } };\n            worksheet.getRow(1).font = {\n                bold: true,\n                color: { argb: 'FF' + tinycolor.mostReadable(viewModel.tacticRowBackground, ['white', 'black']).toHex() },\n            };\n        }\n    }\n\n    /**\n     * Style technique cells for Excel worksheet\n     */\n    public styleTechniqueCells(column, techniqueList, viewModel, tactic, isSubtechnique = false): void {\n        const seen = [];\n\n        column.eachCell((cell) => {\n            if (cell.row > 1 && cell.value && cell.value !== undefined) {\n                let technique = techniqueList.find((t) => {\n                    if (isSubtechnique) {\n                        return t.name == cell.value.substring(cell.value.indexOf(':') + 1).trim() && !seen.includes(t.attackID);\n                    }\n                    return t.name == cell.value.substring(cell.value.indexOf(':') + 1).trim() || t.attackID === cell.value;\n                });\n                seen.push(technique.attackID);\n                let tvm = viewModel.getTechniqueVM(technique, tactic);\n                this.styleCells(cell, technique, tvm);\n            }\n        });\n    }\n\n    /**\n     * Style tactic headers for Excel worksheet\n     */\n    public styleTacticHeaders(worksheet, viewModel): void {\n        worksheet.columns.forEach((column) => {\n            if (viewModel.layout.showID && !viewModel.layout.showName) {\n                column.width = column.header.length < 15 ? 15 : column.header.length;\n            } else if (!viewModel.layout.showID && !viewModel.layout.showName) {\n                column.width = 10;\n            } else {\n                column.width = column.header.length < 30 ? 30 : column.header.length;\n            }\n        });\n    }\n\n    /**\n     * Format technique cells for sub-technique cells\n     */\n    public addSubtechniqueCells(subtechniqueCells, techniqueCells, subtechniques, technique): number {\n        let techniqueRow = techniqueCells.indexOf(technique.name);\n        let excelIndex = 0;\n        for (let subtechnique of subtechniques) {\n            if (excelIndex !== 0) {\n                techniqueCells.splice(techniqueRow + excelIndex, 0, technique.name);\n            }\n            subtechniqueCells[techniqueRow + excelIndex++] = subtechnique;\n        }\n        return excelIndex;\n    }\n\n    /**\n     * Get the display name for technique/tactic as shown in layout\n     */\n    public getDisplayName(technique): string {\n        if (this.viewModel.layout.showID && this.viewModel.layout.showName) {\n            return technique.attackID + ': ' + technique.name;\n        } else if (this.viewModel.layout.showID) {\n            return technique.attackID;\n        } else if (this.viewModel.layout.showName) {\n            return technique.name;\n        } else {\n            return '';\n        }\n    }\n\n    /**\n     * Handle drop down change\n     */\n    public handleDescriptionDropdown(): void {\n        if (this.currentDropdown !== 'description') {\n            this.currentDropdown = 'description';\n        } else {\n            this.currentDropdown = '';\n        }\n        this.dropdownChange.emit(this.currentDropdown);\n    }\n\n    /**\n     * Handle export drop down change\n     */\n    public handleExportDropdown(): void {\n        if (this.currentDropdown !== 'export') {\n            this.currentDropdown = 'export';\n        } else {\n            this.currentDropdown = '';\n        }\n        this.dropdownChange.emit(this.currentDropdown);\n    }\n\n    /**\n     * Triggered on left click of technique\n     */\n    public onTechniqueSelect(): void {\n        if (!this.viewModel.isCurrentlyEditing()) {\n            if (['comment', 'score', 'colorpicker', 'link', 'metadata'].includes(this.currentDropdown)) {\n                //remove technique control dropdowns, because everything was deselected\n                this.currentDropdown = '';\n            }\n            return;\n        }\n        if (this.currentDropdown == 'link' || this.currentDropdown == 'metadata') {\n            this.currentDropdown = '';\n            return;\n        }\n        //else populate editing controls\n        this.populateEditFields();\n    }\n\n    /**\n     * Show all sub-techniques in layout view\n     */\n    public expandSubtechniques(showAnnotatedOnly?: boolean): void {\n        if (this.viewModel.layout.layout == 'mini') return; // control disabled in mini layout\n        this.viewModel.layout.expandedSubtechniques = showAnnotatedOnly ? 'annotated' : 'all';\n\n        for (let technique of this.dataService.getDomain(this.viewModel.domainVersionID).techniques) {\n            if (!technique.subtechniques?.length) continue; // no sub-techniques\n\n            for (let id of technique.get_all_technique_tactic_ids()) {\n                let tvm = this.viewModel.getTechniqueVM_id(id);\n                if (!showAnnotatedOnly) {\n                    // expand all sub-techniques\n                    tvm.showSubtechniques = true;\n                    continue;\n                }\n\n                // expand only if sub-techniques have annotations\n                for (let subtechnique of technique.subtechniques) {\n                    tvm.showSubtechniques =\n                        tvm.showSubtechniques ||\n                        subtechnique.get_all_technique_tactic_ids().some((sid) => {\n                            let svm = this.viewModel.getTechniqueVM_id(sid);\n                            return svm.annotated();\n                        });\n                }\n            }\n        }\n    }\n\n    /**\n     * Hide all sub-techniques in layout view\n     */\n    public collapseSubtechniques(): void {\n        if (this.viewModel.layout.layout == 'mini') return; // control disabled in mini layout\n        this.viewModel.techniqueVMs.forEach(function (tvm, key) {\n            tvm.showSubtechniques = false;\n        });\n        this.viewModel.layout.expandedSubtechniques = 'none';\n    }\n\n    /**\n     * Populate edit fields. Gets common values if common values exist for all editing values.\n     */\n    public populateEditFields(): void {\n        this.commentEditField = this.viewModel.getEditingCommonValue('comment');\n        this.scoreEditField = this.viewModel.getEditingCommonValue('score');\n    }\n\n    /**\n     * Set the state (enabled/disabled) of the selected features\n     */\n    public setSelectedState(): void {\n        let currentState = this.viewModel.getEditingCommonValue('enabled');\n        if (currentState === '') this.viewModel.editSelectedTechniques('enabled', false);\n        else this.viewModel.editSelectedTechniques('enabled', !currentState);\n    }\n\n    /**\n     * Sanitize the given css so that it can be displayed without error\n     */\n    public sanitize(css) {\n        return this.sanitizer.bypassSecurityTrustStyle(css);\n    }\n\n    /**\n     * Is score input valid number\n     * @param  event keypress event just in case we need it\n     * @return       true if valid number\n     */\n    public validateScoreInput(event): boolean {\n        let result: boolean = isNaN(Number(this.scoreEditField));\n        return result;\n    }\n\n    /**\n     * Return whether the given dropdown element would overflow the side of the page if aligned to the right of its anchor\n     * @param  dropdown the DOM node of the panel\n     * @return          true if it would overflow\n     */\n    public checkalign(dropdown): boolean {\n        let anchor = dropdown.parentNode;\n        return anchor.getBoundingClientRect().left + dropdown.getBoundingClientRect().width > document.body.clientWidth;\n    }\n\n    /**\n     * Open an export layer render tab for the current layer\n     */\n    public exportRender(): void {\n        this.tabs.openSVGDialog(this.viewModel);\n    }\n\n    /**\n     * Open search & multiselect sidebar\n     */\n    public openSearch(): void {\n        if (this.viewModel.sidebarContentType !== 'layerUpgrade') {\n            this.viewModel.sidebarOpened = this.viewModel.sidebarContentType !== 'search' ? true : !this.viewModel.sidebarOpened;\n            this.viewModel.sidebarContentType = 'search';\n        }\n    }\n}\n","<!--\n  oooooooo8   ooooooo  oooo   oooo ooooooooooo oooooooooo    ooooooo  ooooo        oooooooo8\no888     88 o888   888o 8888o  88  88  888  88  888    888 o888   888o 888        888\n888         888     888 88 888o88      888      888oooo88  888     888 888         888oooooo\n888o     oo 888o   o888 88   8888      888      888  88o   888o   o888 888      o         888\n 888oooo88    88ooo88  o88o    88     o888o    o888o  88o8   88ooo88  o888ooooo88 o88oooo888\n                                                                                              -->\n<link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200\" />\n<div class=\"controlsContainer\">\n    <ul class=\"control-sections\">\n        <li *ngIf=\"configService.getFeatureGroup('selection_controls', 'any') && configService.getFeature('selecting_techniques')\">\n            <div *ngIf=\"configService.getFeatureGroupCount('selection_controls') >= 3\" class=\"section-label\">selection controls</div>\n\n            <!-- lock selection locks -->\n            <div *ngIf=\"configService.getFeature('selecting_techniques')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    (click)=\"currentDropdown = currentDropdown !== 'selection_behavior' ? 'selection_behavior' : null\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"selection behavior\">\n                    <span class=\"material-icons\">lock</span>\n                </div>\n                <div\n                    class=\"dropdown-container select_behavior\"\n                    *ngIf=\"currentDropdown === 'selection_behavior'\"\n                    #dropdown\n                    [class.left]=\"checkalign(dropdown)\">\n                    <!-- selectTechniquesAcrossTactics -->\n                    <div>\n                        <input\n                            id=\"select_behavior_tactic\"\n                            class=\"checkbox-custom\"\n                            type=\"checkbox\"\n                            [(ngModel)]=\"viewModel.selectTechniquesAcrossTactics\" />\n                        <label for=\"select_behavior_tactic\" class=\"checkbox-custom-label noselect\">select techniques across tactics</label>\n                    </div>\n                    <!-- selectSubtechniquesWithParent -->\n                    <div *ngIf=\"configService.getFeature('subtechniques')\">\n                        <input\n                            id=\"select_behavior_subtechnique\"\n                            class=\"checkbox-custom\"\n                            type=\"checkbox\"\n                            [(ngModel)]=\"viewModel.selectSubtechniquesWithParent\" />\n                        <label for=\"select_behavior_subtechnique\" class=\"checkbox-custom-label noselect\">select sub-techniques with parent</label>\n                    </div>\n                    <!-- selectVisibleTechniques -->\n                    <div>\n                        <input id=\"select_behavior_visible\" class=\"checkbox-custom\" type=\"checkbox\" [(ngModel)]=\"viewModel.selectVisibleTechniques\" />\n                        <label for=\"select_behavior_visible\" class=\"checkbox-custom-label noselect\">select only visible techniques</label>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Search -->\n            <div *ngIf=\"configService.getFeature('search')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    [ngClass]=\"{ disabled: viewModel.sidebarContentType === 'layerUpgrade' }\"\n                    (click)=\"openSearch()\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"search & multiselect\">\n                    <span class=\"material-icons\" alt=\"search\">search</span>\n                </div>\n            </div>\n\n            <!-- deselect all -->\n            <div *ngIf=\"configService.getFeature('deselect_all')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    (click)=\"viewModel.clearSelectedTechniques(); currentDropdown = null\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"deselect {{ this.viewModel.getSelectedTechniqueCount() }} techniques\">\n                    <span class=\"material-icons\" alt=\"deselect all\">clear</span>\n                    <span class=\"deselectNumber\">{{ this.viewModel.getSelectedTechniqueCount() }}</span>\n                </div>\n            </div>\n        </li>\n        <li *ngIf=\"configService.getFeatureGroup('layer_controls', 'any')\">\n            <div *ngIf=\"configService.getFeatureGroupCount('layer_controls') >= 2\" class=\"section-label\">layer controls</div>\n\n            <!-- layer name, description, metadata, and links -->\n            <div *ngIf=\"configService.getFeature('layer_info')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    (click)=\"handleDescriptionDropdown()\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"layer information\">\n                    <span class=\"material-icons\" alt=\"layer information\">description</span>\n                </div>\n\n                <!-- description input (invisible, absolute) -->\n                <div\n                    class=\"dropdown-container inputfield layer_info\"\n                    #dropdown\n                    [class.left]=\"checkalign(dropdown)\"\n                    *ngIf=\"currentDropdown === 'description'\">\n                    <!-- layer name field -->\n                    <div class=\"name_desc\">\n                        <mat-form-field>\n                            <input matInput type=\"text\" placeholder=\"name\" [(ngModel)]=\"viewModel.name\" />\n                        </mat-form-field>\n\n                        <!-- layer description field -->\n                        <mat-form-field>\n                            <textarea matInput matTextareaAutosize placeholder=\"description\" [(ngModel)]=\"viewModel.description\"></textarea>\n                        </mat-form-field>\n\n                        <!-- layer domain (uneditable) -->\n                        <mat-form-field>\n                            <input\n                                matInput\n                                readonly\n                                disabled\n                                type=\"text\"\n                                placeholder=\"domain\"\n                                [(ngModel)]=\"dataService.getDomain(viewModel.domainVersionID).name\" />\n                        </mat-form-field>\n\n                        <!-- layer version (uneditable) -->\n                        <mat-form-field>\n                            <input\n                                matInput\n                                readonly\n                                disabled\n                                type=\"text\"\n                                placeholder=\"version\"\n                                [(ngModel)]=\"dataService.getDomain(viewModel.domainVersionID).version.number\" />\n                        </mat-form-field>\n\n                        <!-- bundle URL (uneditable) -->\n                        <mat-form-field *ngIf=\"viewModel.bundleURL\">\n                            <input matInput readonly disabled type=\"text\" placeholder=\"collection/bundle url\" [(ngModel)]=\"viewModel.bundleURL\" />\n                        </mat-form-field>\n                    </div>\n                    <div class=\"layer-data\">\n                        <!-- layer metadata -->\n                        <b>Metadata</b>\n                        <div class=\"data-input\">\n                            <app-list-input\n                                [config]=\"{\n                                    viewModel: viewModel,\n                                    list: viewModel.metadata,\n                                    level: 'layer',\n                                    type: 'metadata',\n                                    nameField: 'name',\n                                    valueField: 'value'\n                                }\"></app-list-input>\n                        </div>\n\n                        <mat-divider class=\"layer-div\"></mat-divider>\n\n                        <!-- layer links -->\n                        <b>Links</b>\n                        <div class=\"data-input\">\n                            <app-list-input\n                                [config]=\"{\n                                    viewModel: viewModel,\n                                    list: viewModel.links,\n                                    level: 'layer',\n                                    type: 'links',\n                                    nameField: 'label',\n                                    valueField: 'url'\n                                }\"></app-list-input>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- export, save, and render features -->\n            <div *ngIf=\"configService.getFeature('download_layer')\" class=\"control-row-item\">\n                <div class=\"control-row-button dropdown noselect\" (click)=\"handleExportDropdown()\" matTooltipPosition=\"below\" matTooltip=\"export\">\n                    <span class=\"material-icons\" alt=\"export\">file_download</span>\n                </div>\n                <div class=\"dropdown-container select_behavior\" #dropdown [class.left]=\"checkalign(dropdown)\" *ngIf=\"currentDropdown === 'export'\">\n                    <div>\n                        <b class=\"filter-label\">Export</b>\n                    </div>\n                    <div>\n                        <!-- save single layer locally as JSON -->\n                        <div *ngIf=\"configService.getFeature('download_layer')\" class=\"control-row-item\">\n                            <div\n                                class=\"control-row-button noselect\"\n                                (click)=\"saveLayerLocally()\"\n                                matTooltipPosition=\"below\"\n                                matTooltip=\"download single layer as json\">\n                                <span class=\"material-icons\" alt=\"save layer\">code</span>\n                            </div>\n                        </div>\n\n                        <!-- save all layers locally as JSON -->\n                        <div *ngIf=\"configService.getFeature('download_layer') && viewModelsService.viewModels.length > 1\" class=\"control-row-item\">\n                            <div\n                                class=\"control-row-button noselect\"\n                                (click)=\"saveAllLayersLocally()\"\n                                matTooltipPosition=\"below\"\n                                matTooltip=\"download all layers as json\">\n                                <span *ngIf=\"viewModelsService.viewModels.length > 1\" class=\"material-symbols-outlined\" alt=\"save layer\">\n                                    code_blocks\n                                </span>\n                            </div>\n                        </div>\n\n                        <!-- export single layer to excel -->\n                        <div *ngIf=\"configService.getFeature('export_excel')\" class=\"control-row-item\">\n                            <div\n                                class=\"control-row-button noselect\"\n                                (click)=\"saveLayerLocallyExcel()\"\n                                matTooltipPosition=\"below\"\n                                matTooltip=\"export single layer to excel\">\n                                <span class=\"material-icons\" alt=\"save layer\">grid_on</span>\n                            </div>\n                        </div>\n\n                        <!-- export all layers to excel -->\n                        <div *ngIf=\"configService.getFeature('export_excel') && viewModelsService.viewModels.length > 1\" class=\"control-row-item\">\n                            <div\n                                class=\"control-row-button noselect\"\n                                (click)=\"saveAllLayersLocallyExcel()\"\n                                matTooltipPosition=\"below\"\n                                matTooltip=\"export all layers to excel\">\n                                <span class=\"material-symbols-outlined\" alt=\"save layer\">table_view</span>\n                            </div>\n                        </div>\n\n                        <!-- render layer to SVG -->\n                        <div *ngIf=\"configService.getFeature('export_render')\" class=\"control-row-item\">\n                            <div\n                                class=\"control-row-button noselect\"\n                                (click)=\"exportRender()\"\n                                matTooltipPosition=\"below\"\n                                matTooltip=\"render layer to SVG\">\n                                <span class=\"material-icons\" alt=\"export render\">camera_alt</span>\n                            </div>\n                        </div>\n                    </div>\n                    <div>\n                        <b class=\"filter-label\">Options</b>\n                    </div>\n                    <!-- Additional Export Options -->\n                    <div>\n                        <input\n                            id=\"select_download_annotations\"\n                            class=\"checkbox-custom\"\n                            type=\"checkbox\"\n                            [(ngModel)]=\"downloadAnnotationsOnVisibleTechniques\" />\n                        <label for=\"select_download_annotations\" class=\"checkbox-custom-label noselect\">\n                            Only download annotations on visible techniques\n                        </label>\n                    </div>\n                    <div class=\"warning\" *ngIf=\"downloadAnnotationsOnVisibleTechniques && this.viewModel.modifiedHiddenTechniques() == 1\">\n                        <span class=\"material-icons\" alt=\"warning\">warning</span>\n                        <label class=\"warning-label\">{{ this.viewModel.modifiedHiddenTechniques() }} hidden technique has annotations</label>\n                    </div>\n                    <div class=\"warning\" *ngIf=\"downloadAnnotationsOnVisibleTechniques && this.viewModel.modifiedHiddenTechniques() > 1\">\n                        <span class=\"material-icons\" alt=\"warning\">warning</span>\n                        <label class=\"warning-label\">{{ this.viewModel.modifiedHiddenTechniques() }} hidden techniques have annotations</label>\n                    </div>\n                </div>\n            </div>\n\n            <!-- Filters -->\n            <div *ngIf=\"configService.getFeature('filters')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    (click)=\"currentDropdown = currentDropdown !== 'filters' ? 'filters' : null\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"filters\">\n                    <span class=\"material-icons\">filter_list</span>\n                </div>\n                <div class=\"dropdown-container filters\" *ngIf=\"currentDropdown === 'filters'\" #dropdown [class.left]=\"checkalign(dropdown)\">\n                    <div class=\"filter\" *ngFor=\"let filter of ['platforms']\">\n                        <b class=\"filter-label\">{{ filter }}</b>\n                        <div *ngIf=\"viewModel.filters[filter].options.length !== 0\">\n                            <div class=\"filter-option\" *ngFor=\"let filterOption of viewModel.filters[filter].options\">\n                                <input\n                                    [id]=\"filterOption\"\n                                    class=\"checkbox-custom\"\n                                    type=\"checkbox\"\n                                    (click)=\"viewModel.filters.toggleInFilter(filter, filterOption)\"\n                                    [checked]=\"viewModel.filters.inFilter(filter, filterOption)\" />\n                                <label [for]=\"filterOption\" class=\"checkbox-custom-label noselect\">{{ filterOption }}</label>\n                            </div>\n                        </div>\n                        <div *ngIf=\"viewModel.filters[filter].options.length == 0\">Data does not include {{ filter }}</div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- sorting -->\n            <div *ngIf=\"configService.getFeature('sorting')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    (click)=\"viewModel.sorting = (viewModel.sorting + 1) % 4\"\n                    matTooltipPosition=\"below\"\n                    [matTooltip]=\"\n                        [\n                            'sorting alphabetically ascending',\n                            'sorting alphabetically descending',\n                            'sorting by score ascending',\n                            'sorting by score descending'\n                        ][viewModel.sorting]\n                    \">\n                    <span [ngSwitch]=\"['alpha_asc', 'alpha_desc', 'numeric_asc', 'numeric_desc'][viewModel.sorting]\">\n                        <ng-container *ngSwitchCase=\"'alpha_asc'\"><mat-icon svgIcon=\"ic_sort_alphabetically_ascending\"></mat-icon></ng-container>\n                        <ng-container *ngSwitchCase=\"'alpha_desc'\"><mat-icon svgIcon=\"ic_sort_alphabetically_descending\"></mat-icon></ng-container>\n                        <ng-container *ngSwitchCase=\"'numeric_asc'\"><mat-icon svgIcon=\"ic_sort_numerically_ascending\"></mat-icon></ng-container>\n                        <ng-container *ngSwitchCase=\"'numeric_desc'\"><mat-icon svgIcon=\"ic_sort_numerically_descending\"></mat-icon></ng-container>\n                    </span>\n                </div>\n            </div>\n\n            <!-- color setup -->\n            <div *ngIf=\"configService.getFeature('color_setup')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    (click)=\"currentDropdown = currentDropdown !== 'colorSetup' ? 'colorSetup' : null; viewModel.updateGradient()\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"color setup\">\n                    <span class=\"material-icons\">palette</span>\n                </div>\n                <div class=\"dropdown-container colorSetup\" *ngIf=\"currentDropdown === 'colorSetup'\" #dropdown [class.left]=\"checkalign(dropdown)\">\n                    <div class=\"tacticRowColor\">\n                        <div class=\"gradient-section-label\">Tactic Row Background</div>\n                        <div class=\"gradient-section-content\">\n                            <input\n                                id=\"showTacticRowBackground\"\n                                type=\"checkbox\"\n                                class=\"checkbox-custom\"\n                                [(ngModel)]=\"viewModel.showTacticRowBackground\" />\n                            <label for=\"showTacticRowBackground\" class=\"checkbox-custom-label noselect\">show</label>\n                            <input\n                                class=\"colorpicker\"\n                                [(colorPicker)]=\"viewModel.tacticRowBackground\"\n                                [(ngModel)]=\"viewModel.tacticRowBackground\"\n                                [style.background]=\"viewModel.tacticRowBackground\"\n                                cpPosition=\"bottom\"\n                                [cpPresetColors]=\"['#ddd', '#aaaaaa', '#205B8F', '#B9482D']\" />\n                        </div>\n                    </div>\n                    <div class=\"gradient\">\n                        <div class=\"gradient-section-label\">Scoring Gradient</div>\n                        <div class=\"gradient-controls gradient-section-content\">\n                            <table>\n                                <tr class=\"minmax top\">\n                                    <td>Low value:</td>\n                                    <td class=\"col2\">\n                                        <input\n                                            type=\"number\"\n                                            (input)=\"viewModel.updateGradient()\"\n                                            [(ngModel)]=\"viewModel.gradient.minValue\"\n                                            [max]=\"viewModel.gradient.maxValue\" />\n                                    </td>\n                                </tr>\n                                <tr>\n                                    <td class=\"buttons\">\n                                        <div *ngFor=\"let gradientStep of viewModel.gradient.colors; let $i = index\">\n                                            <div class=\"left\">\n                                                <button\n                                                    (click)=\"viewModel.removeGradientColor($i)\"\n                                                    [disabled]=\"viewModel.gradient.colors.length == 2\">\n                                                    remove\n                                                </button>\n                                            </div>\n                                            <div class=\"right\">\n                                                <input\n                                                    class=\"colorpicker\"\n                                                    (colorPickerChange)=\"viewModel.updateGradient()\"\n                                                    (cpPresetColorsChange)=\"viewModel.updateGradient()\"\n                                                    (cpSliderChange)=\"viewModel.updateGradient()\"\n                                                    (cpInputChange)=\"viewModel.updateGradient()\"\n                                                    [(colorPicker)]=\"gradientStep.color\"\n                                                    [(ngModel)]=\"gradientStep.color\"\n                                                    [style.background]=\"gradientStep.color\"\n                                                    cpPosition=\"bottom\"\n                                                    [cpPresetColors]=\"viewModel.gradient.options\" />\n                                            </div>\n                                        </div>\n                                    </td>\n                                    <td class=\"col2\" [style.background-image]=\"sanitize(viewModel.gradient.gradient.css('linear', 'to bottom'))\"></td>\n                                </tr>\n                                <tr>\n                                    <td><button class=\"addcolor\" (click)=\"viewModel.addGradientColor()\">add another color</button></td>\n                                </tr>\n                                <tr class=\"minmax bottom\">\n                                    <td>High value:</td>\n                                    <td class=\"col2\">\n                                        <input\n                                            type=\"number\"\n                                            (input)=\"viewModel.updateGradient()\"\n                                            [(ngModel)]=\"viewModel.gradient.maxValue\"\n                                            [min]=\"viewModel.gradient.minValue\" />\n                                    </td>\n                                </tr>\n                            </table>\n                            <div class=\"display-buttons\">\n                                <div class=\"squarebutton dropdown noselect\" (click)=\"presetsMenuVisible = !presetsMenuVisible\">\n                                    presets\n                                    <span style=\"font-size: 5pt\">▼</span>\n                                </div>\n                                <div class=\"dropdown-container presetsmenu\" *ngIf=\"presetsMenuVisible\">\n                                    <div\n                                        class=\"squarebutton noselect gradient\"\n                                        (click)=\"\n                                            viewModel.gradient.setGradientPreset('redgreen'); presetsMenuVisible = false; viewModel.updateGradient()\n                                        \"\n                                        [style.background-image]=\"sanitize(viewModel.gradient.presetToTinyColor('redgreen'))\">\n                                        red to green\n                                    </div>\n                                    <div\n                                        class=\"squarebutton noselect gradient\"\n                                        (click)=\"\n                                            viewModel.gradient.setGradientPreset('greenred'); presetsMenuVisible = false; viewModel.updateGradient()\n                                        \"\n                                        [style.background-image]=\"sanitize(viewModel.gradient.presetToTinyColor('greenred'))\">\n                                        green to red\n                                    </div>\n                                    <div\n                                        class=\"squarebutton noselect gradient\"\n                                        (click)=\"\n                                            viewModel.gradient.setGradientPreset('bluered'); presetsMenuVisible = false; viewModel.updateGradient()\n                                        \"\n                                        [style.background-image]=\"sanitize(viewModel.gradient.presetToTinyColor('bluered'))\">\n                                        blue to red\n                                    </div>\n                                    <div\n                                        class=\"squarebutton noselect gradient\"\n                                        (click)=\"\n                                            viewModel.gradient.setGradientPreset('redblue'); presetsMenuVisible = false; viewModel.updateGradient()\n                                        \"\n                                        [style.background-image]=\"sanitize(viewModel.gradient.presetToTinyColor('redblue'))\">\n                                        red to blue\n                                    </div>\n                                    <div\n                                        class=\"squarebutton noselect gradient\"\n                                        (click)=\"\n                                            viewModel.gradient.setGradientPreset('transparentblue');\n                                            presetsMenuVisible = false;\n                                            viewModel.updateGradient()\n                                        \"\n                                        [style.background-image]=\"sanitize(viewModel.gradient.presetToTinyColor('transparentblue'))\">\n                                        transparent to blue\n                                    </div>\n                                    <div\n                                        class=\"squarebutton noselect gradient\"\n                                        (click)=\"\n                                            viewModel.gradient.setGradientPreset('transparentred');\n                                            presetsMenuVisible = false;\n                                            viewModel.updateGradient()\n                                        \"\n                                        [style.background-image]=\"sanitize(viewModel.gradient.presetToTinyColor('transparentred'))\">\n                                        transparent to red\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <!-- show or hide disabled techniques -->\n            <div *ngIf=\"configService.getFeature('toggle_hide_disabled')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    (click)=\"viewModel.hideDisabled = !viewModel.hideDisabled\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"show/hide disabled\">\n                    <span *ngIf=\"viewModel.hideDisabled\" class=\"material-icons\" alt=\"show disabled\">visibility_off</span>\n                    <span *ngIf=\"!viewModel.hideDisabled\" class=\"material-icons\" alt=\"hide disabled\">visibility</span>\n                </div>\n            </div>\n\n            <!-- expand all sub-techniques -->\n            <div *ngIf=\"configService.getFeature('subtechniques')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    [ngClass]=\"{ disabled: viewModel.layout.layout === 'mini' }\"\n                    (click)=\"expandSubtechniques()\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"expand sub-techniques\">\n                    <span class=\"material-icons\" alt=\"expand sub-techniques\">unfold_more</span>\n                </div>\n            </div>\n\n            <!-- expand only annotated sub-techniques -->\n            <div *ngIf=\"configService.getFeature('subtechniques')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    [ngClass]=\"{ disabled: viewModel.layout.layout === 'mini' }\"\n                    (click)=\"expandSubtechniques(true)\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"expand annotated sub-techniques\">\n                    <mat-icon svgIcon=\"ic_unfold_more_alt\"></mat-icon>\n                </div>\n            </div>\n\n            <!-- collapse all sub-techniques -->\n            <div *ngIf=\"configService.getFeature('subtechniques')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    [ngClass]=\"{ disabled: viewModel.layout.layout === 'mini' }\"\n                    (click)=\"collapseSubtechniques()\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"collapse sub-techniques\">\n                    <span class=\"material-icons\" alt=\"collapse sub-techniques\">unfold_less</span>\n                </div>\n            </div>\n\n            <!-- layout -->\n            <div *ngIf=\"configService.getFeature('layout_controls')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    (click)=\"currentDropdown = currentDropdown !== 'layout' ? 'layout' : null\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"matrix configuration\">\n                    <span class=\"material-icons\">view_module</span>\n                </div>\n                <div class=\"dropdown-container layout\" *ngIf=\"currentDropdown === 'layout'\" #dropdown [class.left]=\"checkalign(dropdown)\">\n                    <div class=\"section\">\n                        <select [(ngModel)]=\"viewModel.layout.layout\" placeholder=\"layout\">\n                            <option *ngFor=\"let option of viewModel.layout.layoutOptions\" [value]=\"option\">{{ option }} layout</option>\n                        </select>\n                    </div>\n                    <div class=\"section\">\n                        <b class=\"filter-label\">labels</b>\n                        <div>\n                            <input\n                                [disabled]=\"viewModel.layout.layout == 'mini'\"\n                                id=\"showID-option\"\n                                class=\"checkbox-custom\"\n                                type=\"checkbox\"\n                                [(ngModel)]=\"viewModel.layout.showID\" />\n                            <label [class.disabled]=\"viewModel.layout.layout == 'mini'\" for=\"showID-option\" class=\"checkbox-custom-label noselect\">\n                                show IDs\n                            </label>\n                        </div>\n                        <div>\n                            <input\n                                [disabled]=\"viewModel.layout.layout == 'mini'\"\n                                id=\"showName-option\"\n                                class=\"checkbox-custom\"\n                                type=\"checkbox\"\n                                [(ngModel)]=\"viewModel.layout.showName\" />\n                            <label [class.disabled]=\"viewModel.layout.layout == 'mini'\" for=\"showName-option\" class=\"checkbox-custom-label noselect\">\n                                show names\n                            </label>\n                        </div>\n                    </div>\n                    <div class=\"section\">\n                        <b class=\"filter-label\">aggregate scores</b>\n                        <div>\n                            <input\n                                id=\"showAggregateScores-option\"\n                                class=\"checkbox-custom\"\n                                type=\"checkbox\"\n                                [(ngModel)]=\"viewModel.layout.showAggregateScores\" />\n                            <label for=\"showAggregateScores-option\" class=\"checkbox-custom-label noselect\">show aggregate scores</label>\n                        </div>\n                        <div>\n                            <input\n                                [disabled]=\"!viewModel.layout.showAggregateScores || viewModel.layout.aggregateFunction !== 'average'\"\n                                id=\"countUnscored-option\"\n                                class=\"checkbox-custom\"\n                                type=\"checkbox\"\n                                [(ngModel)]=\"viewModel.layout.countUnscored\" />\n                            <label\n                                [class.disabled]=\"!viewModel.layout.showAggregateScores || viewModel.layout.aggregateFunction !== 'average'\"\n                                for=\"countUnscored-option\"\n                                class=\"checkbox-custom-label noselect\">\n                                count unscored techniques as 0\n                            </label>\n                        </div>\n                        <div class=\"subsection\">\n                            <label for=\"aggregateFunctionDropdown\">aggregate function:</label>\n                            <div class=\"inner-dropdown-container\">\n                                <select\n                                    [disabled]=\"!viewModel.layout.showAggregateScores\"\n                                    id=\"aggregateFunctionDropdown\"\n                                    [(ngModel)]=\"viewModel.layout.aggregateFunction\"\n                                    placeholder=\"function\">\n                                    <option *ngFor=\"let option of viewModel.layout.aggregateFunctionOptions\" [value]=\"option\">{{ option }}</option>\n                                </select>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </li>\n        <li *ngIf=\"configService.getFeatureGroup('technique_controls', 'any') && configService.getFeature('selecting_techniques')\">\n            <div *ngIf=\"configService.getFeatureGroupCount('technique_controls') >= 3\" class=\"section-label\">technique controls</div>\n            <!-- TECHNIQUE CONTROLS -->\n            <!-- enable/disable technique -->\n            <div *ngIf=\"configService.getFeature('disable_techniques')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    [ngClass]=\"{ disabled: !viewModel.isCurrentlyEditing() }\"\n                    (click)=\"setSelectedState()\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"toggle state\"\n                    [matTooltipDisabled]=\"!viewModel.isCurrentlyEditing()\">\n                    <span class=\"material-icons\" alt=\"toggle state\">texture</span>\n                </div>\n            </div>\n\n            <!-- background color -->\n            <div *ngIf=\"configService.getFeature('manual_color')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    [ngClass]=\"{ disabled: !viewModel.isCurrentlyEditing() }\"\n                    (click)=\"viewModel.isCurrentlyEditing() ? (currentDropdown = currentDropdown !== 'colorpicker' ? 'colorpicker' : null) : continue\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"background color\"\n                    [matTooltipDisabled]=\"!viewModel.isCurrentlyEditing()\">\n                    <span class=\"material-icons\" alt=\"edit background color\">format_color_fill</span>\n                </div>\n                <!-- color picker (invisible, absolute)-->\n                <div class=\"colorpicker dropdown-container\" #dropdown [class.left]=\"checkalign(dropdown)\" *ngIf=\"currentDropdown === 'colorpicker'\">\n                    <div class=\"color-block wide noselect dropdown\" (click)=\"viewModel.editSelectedTechniques('color', '')\">no color</div>\n                    <div\n                        class=\"color-block square\"\n                        *ngFor=\"let color of viewModel.backgroundPresets\"\n                        [style.background]=\"color\"\n                        (click)=\"viewModel.editSelectedTechniques('color', color)\"></div>\n                </div>\n            </div>\n\n            <!-- score -->\n            <div *ngIf=\"configService.getFeature('scoring')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    [ngClass]=\"{ disabled: !viewModel.isCurrentlyEditing() }\"\n                    (click)=\"viewModel.isCurrentlyEditing() ? (currentDropdown = currentDropdown !== 'score' ? 'score' : null) : continue\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"scoring\"\n                    [matTooltipDisabled]=\"!viewModel.isCurrentlyEditing()\">\n                    <span class=\"material-icons\" alt=\"score\">insert_chart</span>\n                </div>\n                <div class=\"dropdown-container inputfield\" #dropdown [class.left]=\"checkalign(dropdown)\" *ngIf=\"currentDropdown === 'score'\">\n                    <mat-form-field>\n                        <!-- update data whenever it is typed in -->\n                        <input\n                            matInput\n                            type=\"number\"\n                            [(ngModel)]=\"scoreEditField\"\n                            placeholder=\"score\"\n                            (input)=\"\n                                viewModel.editSelectedTechniques('score', $event.target.value);\n                                viewModel.editSelectedTechniques('scoreColor', viewModel.gradient.getHexColor($event.target.value))\n                            \" />\n                        <mat-hint style=\"color: red\" align=\"start\" *ngIf=\"validateScoreInput()\">not a number</mat-hint>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <!-- comment -->\n            <div *ngIf=\"configService.getFeature('comments')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    [ngClass]=\"{ disabled: !viewModel.isCurrentlyEditing() }\"\n                    (click)=\"viewModel.isCurrentlyEditing() ? (currentDropdown = currentDropdown !== 'comment' ? 'comment' : null) : continue\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"comment\"\n                    [matTooltipDisabled]=\"!viewModel.isCurrentlyEditing()\">\n                    <span class=\"material-icons\" alt=\"comment\">insert_comment</span>\n                </div>\n                <!-- comment input (invisible, absolute) -->\n                <div class=\"dropdown-container inputfield left\" #dropdown [class.left]=\"checkalign(dropdown)\" *ngIf=\"currentDropdown === 'comment'\">\n                    <mat-form-field>\n                        <textarea\n                            matInput\n                            matTextareaAutosize\n                            placeholder=\"comment\"\n                            [(ngModel)]=\"commentEditField\"\n                            (input)=\"viewModel.editSelectedTechniques('comment', $event.target.value)\"></textarea>\n                    </mat-form-field>\n                </div>\n            </div>\n\n            <!-- links -->\n            <div *ngIf=\"configService.getFeature('links')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    [ngClass]=\"{ disabled: !viewModel.isCurrentlyEditing() || !viewModel.linksMatch }\"\n                    (click)=\"\n                        viewModel.isCurrentlyEditing() && viewModel.linksMatch\n                            ? (currentDropdown = currentDropdown !== 'link' ? 'link' : null)\n                            : continue\n                    \"\n                    matTooltipPosition=\"below\"\n                    [matTooltip]=\"viewModel.linksMatch ? 'link' : 'cannot edit links on selected techniques with differing links'\"\n                    [matTooltipDisabled]=\"!viewModel.isCurrentlyEditing()\">\n                    <span class=\"material-icons\" alt=\"add a link\">link</span>\n                </div>\n                <!-- link input -->\n                <div\n                    class=\"dropdown-container inputfield left list-input\"\n                    #dropdown\n                    *ngIf=\"currentDropdown === 'link'\"\n                    [class.left]=\"checkalign(dropdown)\">\n                    <app-list-input\n                        [config]=\"{\n                            viewModel: viewModel,\n                            list: viewModel.activeTvm.links,\n                            level: 'technique',\n                            type: 'links',\n                            nameField: 'label',\n                            valueField: 'url'\n                        }\"></app-list-input>\n                </div>\n            </div>\n\n            <!-- technique metadata -->\n            <div *ngIf=\"configService.getFeature('metadata')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    [ngClass]=\"{ disabled: !viewModel.isCurrentlyEditing() || !viewModel.metadataMatch }\"\n                    (click)=\"\n                        viewModel.isCurrentlyEditing() && viewModel.metadataMatch\n                            ? (currentDropdown = currentDropdown !== 'metadata' ? 'metadata' : null)\n                            : continue\n                    \"\n                    matTooltipPosition=\"below\"\n                    [matTooltip]=\"viewModel.metadataMatch ? 'metadata' : 'cannot edit metadata on selected techniques with differing metadata'\"\n                    [matTooltipDisabled]=\"!viewModel.isCurrentlyEditing()\">\n                    <span class=\"material-icons\" alt=\"add metadata\">list</span>\n                </div>\n                <!-- metadata input -->\n                <div\n                    class=\"dropdown-container inputfield left list-input\"\n                    #dropdown\n                    *ngIf=\"currentDropdown === 'metadata'\"\n                    [class.left]=\"checkalign(dropdown)\">\n                    <app-list-input\n                        [config]=\"{\n                            viewModel: viewModel,\n                            list: viewModel.activeTvm.metadata,\n                            level: 'technique',\n                            type: 'metadata',\n                            nameField: 'name',\n                            valueField: 'value'\n                        }\"></app-list-input>\n                </div>\n            </div>\n\n            <!-- remove all annotations -->\n            <div *ngIf=\"configService.getFeature('clear_annotations')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    [ngClass]=\"{ disabled: !viewModel.isCurrentlyEditing() }\"\n                    (click)=\"viewModel.resetSelectedTechniques(); populateEditFields()\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"clear annotations on selected\"\n                    [matTooltipDisabled]=\"!viewModel.isCurrentlyEditing()\">\n                    <span class=\"material-icons\" alt=\"remove all annotations\">layers_clear</span>\n                </div>\n            </div>\n        </li>\n        <li *ngIf=\"configService.getFeatureGroup('toolbar_controls', 'any')\">\n            <!-- enable disable sticky toolbar -->\n            <div *ngIf=\"configService.getFeature('sticky_toolbar')\" class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    (click)=\"updateStickyToolbar()\"\n                    matTooltipPosition=\"below\"\n                    [matTooltip]=\"viewModel.stickyToolbar ? 'disable sticky toolbar' : 'enable sticky toolbar'\">\n                    <span *ngIf=\"viewModel.stickyToolbar\" class=\"material-symbols-outlined\" alt=\"show disabled\">push_pin</span>\n                    <span *ngIf=\"!viewModel.stickyToolbar\" alt=\"hide disabled\"><mat-icon svgIcon=\"ic_push_pin_gray\"></mat-icon></span>\n                </div>\n            </div>\n        </li>\n    </ul>\n</div>\n\n<!--\noooo     oooo      o   ooooooooooo oooooooooo  ooooo ooooo  oooo\n 8888o   888      888  88  888  88  888    888  888    888  88\n 88 888o8 88     8  88     888      888oooo88   888      888\n 88  888  88    8oooo88    888      888  88o    888     88 888\no88o  8  o88o o88o  o888o o888o    o888o  88o8 o888o o88o  o888o\n                                                                 -->\n<mat-drawer-container class=\"matrices-content\" autosize>\n    <mat-drawer-content>\n        <div class=\"matrices\" #scrollRef>\n            <div oncontextmenu=\"return false\">\n                <div\n                    class=\"spinner\"\n                    *ngIf=\"\n                        !dataService.getDomain(viewModel.domainVersionID) || !dataService.getDomain(viewModel.domainVersionID).dataLoaded;\n                        else loadMatrices\n                    \">\n                    <mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>\n                </div>\n                <ng-template #loadMatrices>\n                    <div class=\"matrices-columns\">\n                        <div class=\"matrix-column\" *ngFor=\"let matrix of dataService.getDomain(viewModel.domainVersionID).matrices\">\n                            <div *ngIf=\"dataService.getDomain(viewModel.domainVersionID).matrices.length > 1\" class=\"matrix-name\">\n                                {{ matrix.name }}\n                            </div>\n                            <div *ngIf=\"viewModel.layout.layout == 'side'\">\n                                <matrix-side [matrix]=\"matrix\" [viewModel]=\"viewModel\"></matrix-side>\n                            </div>\n                            <div *ngIf=\"viewModel.layout.layout == 'flat'\">\n                                <matrix-flat [matrix]=\"matrix\" [viewModel]=\"viewModel\"></matrix-flat>\n                            </div>\n                            <div *ngIf=\"viewModel.layout.layout == 'mini'\">\n                                <matrix-mini [matrix]=\"matrix\" [viewModel]=\"viewModel\"></matrix-mini>\n                            </div>\n                        </div>\n                    </div>\n                </ng-template>\n            </div>\n        </div>\n    </mat-drawer-content>\n    <mat-drawer [disableClose]=\"true\" mode=\"side\" position=\"end\" [opened]=\"viewModel.sidebarOpened\">\n        <sidebar [viewModel]=\"viewModel\"></sidebar>\n    </mat-drawer>\n</mat-drawer-container>\n\n<!--\nooooo       ooooooooooo  ooooooo8 ooooooooooo oooo   oooo ooooooooo\n 888         888    88 o888    88  888    88   8888o  88   888    88o\n 888         888ooo8   888    oooo 888ooo8     88 888o88   888    888\n 888      o  888    oo 888o    88  888    oo   88   8888   888    888\no888ooooo88 o888ooo8888 888ooo888 o888ooo8888 o88o    88  o888ooo88\n                                                                      -->\n\n<div class=\"legendBar\" (click)=\"showingLegend = !showingLegend\" *ngIf=\"!showingLegend && configService.getFeature('legend')\">\n    <span class=\"material-icons\">keyboard_arrow_up</span>\n    <div class=\"noselect\" style=\"padding: 4px; font-size: 14px; position: absolute; width: 100%; text-align: center\">legend</div>\n</div>\n\n<div class=\"legend\" *ngIf=\"showingLegend && configService.getFeature('legend')\">\n    <div class=\"legendBar\" (click)=\"showingLegend = !showingLegend\" style=\"position: absolute; top: 0px; left: 0px\">\n        <span class=\"material-icons\">keyboard_arrow_down</span>\n        <div class=\"noselect title\">legend</div>\n    </div>\n    <div class=\"itemArea\">\n        <div class=\"item\" *ngFor=\"let item of viewModel.legendItems; let Even = even; let i = index\" [class.even]=\"!Even\">\n            <input\n                [(colorPicker)]=\"item.color\"\n                [(ngModel)]=\"item.color\"\n                [style.background]=\"item.color\"\n                [cpPosition]=\"'top'\"\n                [cpPresetColors]=\"viewModel.legendColorPresets\"\n                style=\"width: 75px\" />\n            <mat-form-field class=\"label\">\n                <input matInput [(ngModel)]=\"item.label\" />\n            </mat-form-field>\n            <span class=\"material-icons\" (click)=\"viewModel.deleteLegendItem(i)\">clear</span>\n        </div>\n        <button style=\"margin-left: 75px; margin-top: 10px; margin-bottom: 10px\" class=\"button\" (click)=\"viewModel.addLegendItem()\">Add Item</button>\n        <button style=\"margin-top: 10px; margin-bottom: 10px\" class=\"button\" (click)=\"viewModel.clearLegend()\">Clear</button>\n    </div>\n</div>\n","import { Component, OnInit, Inject, ViewEncapsulation, ViewChild, Renderer2 } from '@angular/core';\nimport { MAT_DIALOG_DATA, MatDialog } from '@angular/material/dialog';\nimport { MarkdownComponent, MarkdownService } from 'ngx-markdown';\nimport { LayerInformationComponent } from '../layer-information/layer-information.component';\n\n@Component({\n    selector: 'help',\n    templateUrl: './help.component.html',\n    styleUrls: ['./help.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class HelpComponent implements OnInit {\n    private listenObj: any;\n    @ViewChild('markdownElement', { static: false }) private markdownElement: MarkdownComponent;\n    public headingAnchors: MarkdownHeadingAnchor[] = [];\n\n    constructor(\n        private dialog: MatDialog,\n        private markdownService: MarkdownService,\n        private renderer: Renderer2,\n        @Inject(MAT_DIALOG_DATA) public data\n    ) {\n        // intentionally left blank\n    }\n\n    ngOnInit(): void {\n        setTimeout(() => {\n            this.scrollTo('toc');\n        }, 175);\n\n        let self = this;\n        this.markdownService.renderer.heading = (text: string, level: number) => {\n            let img = text.match(/(<img src(.*?)>)/g) ? text.match(/(<img src(.*?)>)/g)[0].replace(/(nav-app\\/src\\/)/g, '') : '';\n            text = text.replace(/(<img src(.*?)>)/g, '');\n            const escapedText = text\n                .toLowerCase()\n                .trim()\n                .replace(/[^\\w]+/g, '-');\n            self.headingAnchors.push({\n                level: level,\n                anchor: escapedText,\n                label: text.replace('&amp;', '&'),\n            });\n            return `<h${level} class=\"${escapedText}\">${img}${text}</h${level}>`;\n        };\n\n        this.markdownService.renderer.html = (html: string) => {\n            if (!html.match(/(nav-app\\/src\\/)/g)) return html;\n            return html.replace(/(nav-app\\/src\\/)/g, '');\n        };\n    }\n\n    ngOnDestroy(): void {\n        if (this.listenObj) {\n            this.listenObj();\n        }\n    }\n\n    // from https://github.com/jfcere/ngx-markdown/issues/125#issuecomment-518025821\n    public onMarkdownLoad(e) {\n        // hijack clicks on links\n        if (this.markdownElement) {\n            this.listenObj = this.renderer.listen(this.markdownElement.element.nativeElement, 'click', (e: Event) => {\n                if (e.target && (e.target as any).tagName === 'A') {\n                    const el = e.target as HTMLElement;\n                    const linkURL = el.getAttribute && el.getAttribute('href');\n                    if (linkURL) {\n                        e.preventDefault();\n                        if (linkURL.charAt(0) === '#') this.scrollTo(linkURL.replace('#', ''));\n                        else if (linkURL.includes('layers/')) this.openLayerDialog();\n                        else if (linkURL.match(/(nav-app\\/src\\/)/g)) window.open(linkURL.replace(/(nav-app\\/src\\/)/g, ''));\n                        else window.open(linkURL);\n                    }\n                }\n            });\n        }\n    }\n\n    public scrollTo(anchor) {\n        let element = document.querySelector('.' + anchor);\n        if (element) element.scrollIntoView({ behavior: 'smooth', block: 'start', inline: 'nearest' });\n    }\n\n    /**\n     * open the layer information dialog\n     */\n    public openLayerDialog(): void {\n        this.dialog.open(LayerInformationComponent, {\n            maxWidth: '90ch',\n        });\n    }\n}\n\ninterface MarkdownHeadingAnchor {\n    level: number;\n    anchor: string;\n    label: string;\n}\n","<div class=\"help-dialog\">\n    <div class=\"content markdown\">\n        <div class=\"col toc\">\n            <h1>Table of Contents</h1>\n            <ul class=\"table-of-contents\" *ngIf=\"headingAnchors.length > 0\">\n                <li *ngFor=\"let heading of headingAnchors\" class=\"toc-heading level-{{ heading.level }}\">\n                    <a (click)=\"scrollTo(heading.anchor)\">{{ heading.label }}</a>\n                </li>\n            </ul>\n        </div>\n        <markdown #markdownElement [src]=\"'./USAGE.md'\" (load)=\"onMarkdownLoad($event)\"></markdown>\n    </div>\n    <div class=\"top-button\">\n        <button mat-button (click)=\"scrollTo('toc')\">Top ^</button>\n    </div>\n    <div class=\"close-button\">\n        <button mat-button mat-dialog-close>close</button>\n    </div>\n</div>\n","import { Component, ViewEncapsulation } from '@angular/core';\nimport * as globals from '../utils/globals';\n\n@Component({\n    selector: 'app-layer-information',\n    templateUrl: './layer-information.component.html',\n    styleUrls: ['./layer-information.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class LayerInformationComponent {\n    public get layerFormatLink(): string {\n        return `./layers/LAYERFORMATv${globals.layerVersion.replace('.', '_')}.md`;\n    }\n}\n","<div class=\"layer-dialog\">\n    <div class=\"content markdown\">\n        <markdown #markdownElement [src]=\"layerFormatLink\"></markdown>\n    </div>\n    <div class=\"close-button\">\n        <button mat-button mat-dialog-close>close</button>\n    </div>\n</div>\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { ViewModelsService } from '../../services/viewmodels.service';\nimport { ConfigService } from '../../services/config.service';\nimport { DataService } from '../../services/data.service';\nimport { Cell } from '../../matrix/cell';\n\n@Component({\n    selector: 'changelog-cell',\n    templateUrl: './changelog-cell.component.html',\n    styleUrls: ['./changelog-cell.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class ChangelogCellComponent extends Cell {\n    @Input() isCurrentVersion?: boolean = true;\n    @Input() isDraggable?: boolean = false;\n    @Input() section: string;\n\n    constructor(\n        public configService: ConfigService,\n        public dataService: DataService,\n        public viewModelsService: ViewModelsService\n    ) {\n        super(dataService, configService);\n    }\n\n    /**\n     * Highlight the moused over technique\n     */\n    public highlight(): void {\n        if (this.isCurrentVersion) {\n            this.viewModel.highlightTechnique(this.technique, this.tactic);\n        }\n    }\n\n    /**\n     * Clear the technique highlight\n     */\n    public unhighlight(): void {\n        if (this.isCurrentVersion) this.viewModel.clearHighlight();\n    }\n\n    /**\n     * Select or unselect this technique\n     */\n    public onClick(): void {\n        if (this.isCurrentVersion) {\n            // unselect technique\n            if (this.viewModel.isTechniqueSelected(this.technique, this.tactic)) {\n                this.viewModel.unselectTechnique(this.technique, this.tactic);\n            }\n            // select technique\n            else {\n                this.viewModel.clearSelectedTechniques();\n                this.viewModel.selectTechnique(this.technique, this.tactic);\n            }\n            this.viewModelsService.selectionChanged(); // emit selection change\n        }\n    }\n\n    /**\n     * Retrieve css classes for this technique\n     */\n    public getClass(): string {\n        let theclass = super.getClass();\n        if (!this.isCurrentVersion && !this.isDraggable) {\n            theclass += ' nopointer';\n        }\n        if (this.section == 'additions' || this.section == 'deprecations') {\n            theclass += ' setwidth';\n        }\n        return theclass;\n    }\n}\n","<div class=\"technique-cell\" [ngStyle]=\"getTechniqueBackground()\" [ngClass]=\"getClass()\">\n    <div (click)=\"onClick()\" (mouseenter)=\"highlight()\" (mouseleave)=\"unhighlight()\">\n        <div class=\"section\">\n            <span [style.border-color]=\"configService.commentColor\" [style.color]=\"getTechniqueTextColor()\">\n                <b>{{ tactic.name }}</b>\n            </span>\n        </div>\n        <div class=\"section\">\n            <span [style.border-color]=\"configService.commentColor\" [style.color]=\"getTechniqueTextColor()\">{{ technique.attackID }}</span>\n        </div>\n        <div class=\"section\">\n            <span [style.border-color]=\"configService.commentColor\" [style.color]=\"getTechniqueTextColor()\">{{ technique.name }}</span>\n        </div>\n    </div>\n</div>\n","import { Component, Input, OnInit, QueryList, ViewChild, ViewChildren, ViewEncapsulation } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { Tactic, Technique } from '../classes/stix';\nimport { VersionChangelog, ViewModel } from '../classes';\nimport { DndDropEvent } from 'ngx-drag-drop';\nimport { MatExpansionPanel } from '@angular/material/expansion';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatStepper } from '@angular/material/stepper';\n\n@Component({\n    selector: 'layer-upgrade',\n    templateUrl: './layer-upgrade.component.html',\n    styleUrls: ['./layer-upgrade.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class LayerUpgradeComponent implements OnInit {\n    @Input() viewModel: ViewModel; // view model of new version\n    @ViewChildren(MatPaginator) paginators = new QueryList<MatPaginator>();\n    @ViewChildren(MatExpansionPanel) panels: QueryList<MatExpansionPanel>;\n    public paginator_map: Map<string, number> = new Map(); // section name mapped to index of paginator\n    public filteredIDs: string[] = [];\n    @ViewChild('stepper') stepper: MatStepper;\n\n    public changelog: VersionChangelog;\n    public compareTo: ViewModel; // view model of old version\n    public sections: string[] = ['additions', 'changes', 'minor_changes', 'revocations', 'deprecations', 'unchanged'];\n    public filter: any = {\n        changes: false,\n        minor_changes: false,\n        revocations: false,\n        deprecations: false,\n        unchanged: false,\n    };\n    public loading: boolean = false;\n\n    constructor(public dataService: DataService) {}\n\n    ngOnInit(): void {\n        this.changelog = this.viewModel.versionChangelog;\n        this.compareTo = this.viewModel.compareTo;\n        // map sections with techniques to paginator index\n        let i = 0;\n        for (let s of this.sections) {\n            if (this.changelog[s].length) this.paginator_map.set(s, i++);\n        }\n        this.applyFilters(this.sections[0]);\n        this.wait();\n    }\n\n    wait(): void {\n        this.loading = true;\n        setTimeout(() => (this.loading = false), 1000);\n    }\n\n    /**\n     * Get a readable version for the name of the changelog section\n     * @param section name of the changelog section\n     * @returns {string} readable section header text\n     */\n    public getHeader(section: string): string {\n        return section\n            .split(/[_-]+/)\n            .map((s) => s.charAt(0).toUpperCase() + s.substring(1))\n            .join(' ');\n    }\n\n    /**\n     * Retrieve the URL for a given technique in the previous ATT&CK version\n     * @param attackID the ATT&CK ID of the technique\n     * @returns {string} the URL\n     */\n    public getPreservedURL(attackID: string): string {\n        let url = this.getTechnique(attackID, this.compareTo).url;\n        let i = url.search('/techniques');\n        return url.substring(0, i) + '/versions/v' + this.compareTo.version + url.substring(i);\n    }\n\n    /**\n     * Disable the annotated techniques filter?\n     * @param section the name of the changelog section\n     * @returns true if there are no annotated techniques in the given section, false otherwise\n     */\n    public disableFilter(section: string): boolean {\n        return !this.changelog[section].filter((id) => this.anyAnnotated(id)).length;\n    }\n\n    /**\n     * Apply filters to the changelog section\n     * @returns the list of filtered ATT&CK IDs in the changelog section\n     */\n    public applyFilters(section: string): void {\n        let sectionIDs = this.changelog[section];\n        if (this.filter[section]) sectionIDs = sectionIDs.filter((id) => this.anyAnnotated(id));\n\n        let i = this.paginator_map.get(section);\n        let paginator = this.paginators.toArray()[i];\n        if (paginator && paginator.pageIndex * paginator.pageSize > sectionIDs.length) {\n            paginator.pageIndex = 0;\n        }\n        let start = paginator ? paginator.pageIndex * paginator.pageSize : 0;\n        let end = paginator ? start + paginator.pageSize : 10;\n        this.filteredIDs = sectionIDs.slice(start, end);\n        setTimeout(() => {\n            this.expandAll(section);\n        });\n    }\n\n    /**\n     * Update the list of IDs to render on step change\n     * @param section the name of the changelog section\n     * @param offset -1 if moving to the previous step, 1 if moving to the next step\n     */\n    public onStepChange(section: string, offset: number): void {\n        let i = this.sections.findIndex((s) => s === section);\n        if (i + offset < this.sections.length) {\n            let nextSection = this.sections[i + offset];\n            this.applyFilters(nextSection);\n            if (this.changelog[nextSection].length > 0) this.wait();\n        }\n    }\n\n    /**\n     * Get the technique object in the domain of the given view model\n     * @param attackID the ATT&CK ID of the technique\n     * @param vm the view model\n     * @param section name of the changelog section\n     * @returns {Technique} the technique object\n     */\n    public getTechnique(attackID: string, vm: ViewModel, section?: string): Technique {\n        let domain = this.dataService.getDomain(vm.domainVersionID);\n        let all_techniques = domain.techniques.concat(domain.subtechniques);\n        let technique = all_techniques.find((t) => t.attackID == attackID);\n\n        if (section == 'revocations' && this.viewModel.version == vm.version) {\n            // get revoking object\n            let revokedByID = technique.revoked_by(vm.domainVersionID);\n            let revokingObject = all_techniques.find((t) => t.id == revokedByID);\n            return revokingObject;\n        } else return technique;\n    }\n\n    /**\n     * Get the list of tactic objects the given technique is found under\n     * @param attackID the ATT&CK ID of the object\n     * @param vm the view model used to identify the domain\n     * @param section name of the changelog section\n     * @returns {Tactic[]} list of tactic objects the object is found under\n     */\n    public getTactics(attackID: string, vm: ViewModel, section?: string): Tactic[] {\n        if (section == 'additions') vm = this.viewModel;\n        let technique = this.getTechnique(attackID, vm, section);\n        let domain = this.dataService.getDomain(vm.domainVersionID);\n        return technique.tactics.map((shortname) => domain.tactics.find((t) => t.shortname == shortname));\n    }\n\n    /**\n     * Determine if the lists of tactics between the technique in the new version and\n     * old version are the same\n     * @param attackID the ATT&CK ID of the object\n     * @param section name of the changelog section\n     * @returns {boolean} true if the list of tactics are not identical\n     */\n    public tacticsChanged(attackID: string, section: string): boolean {\n        if (section == 'deprecations' || section == 'additions') return false;\n\n        let oldTechnique = this.getTechnique(attackID, this.compareTo);\n        let newTechnique = this.getTechnique(attackID, this.viewModel, section);\n\n        if (!oldTechnique.tactics && !newTechnique.tactics) return false;\n        if (oldTechnique.tactics.length !== newTechnique.tactics.length) return true;\n\n        // order lists and compare\n        let sortArray = function (a, b) {\n            if (a < b) return -1;\n            if (a > b) return 1;\n            return 0;\n        };\n        let oldTactics = oldTechnique.tactics.sort(sortArray);\n        let newTactics = newTechnique.tactics.sort(sortArray);\n        if (oldTactics.every((value, i) => value === newTactics[i])) return false;\n        return true;\n    }\n\n    /**\n     * Determine if the technique is marked as reviewed\n     * @param attackID the ATT&CK ID of the technique\n     * @returns {boolean} true if the technique has been marked as reviewed\n     */\n    public isReviewed(attackID: string): boolean {\n        return this.changelog.reviewed.has(attackID);\n    }\n\n    /**\n     * Marks or unmarks a single given technique as reviewed\n     * @param attackID the ATT&CK ID of the technique\n     * @param panel the object's expansion panel\n     */\n    public reviewedChanged(attackID: string, panel: MatExpansionPanel): void {\n        if (this.isReviewed(attackID)) {\n            this.changelog.reviewed.delete(attackID);\n        } else {\n            this.changelog.reviewed.add(attackID);\n            panel.expanded = false; // close on review\n        }\n    }\n\n    /**\n     * Expands all the techniques for easy review\n     */\n    public expandAll(section: string): void {\n        let filtered_expand_visible_section = document.getElementById('filter_expand_visible_' + section) as HTMLInputElement;\n        this.panels.forEach((panel) => {\n            if (filtered_expand_visible_section.checked) {\n                panel.open();\n            } else {\n                panel.close();\n            }\n        });\n    }\n\n    /**\n     * Marks all techniques in the section as reviewed\n     * @param section name of the changelog section\n     */\n    public reviewAll(section: string): void {\n        let sectionIDs = this.changelog[section];\n        let filtered_review_all_section = document.getElementById('filter_review_all_' + section) as HTMLInputElement;\n        if (filtered_review_all_section.checked) {\n            for (let sectionID of sectionIDs) {\n                this.changelog.reviewed.add(sectionID);\n            }\n        } else {\n            for (let sectionID of sectionIDs) {\n                this.changelog.reviewed.delete(sectionID);\n            }\n        }\n    }\n\n    /**\n     * Get the number of techniques marked as reviewed in the given section\n     * @param section the name of the changelog section\n     * @returns number of reviewed techniques\n     */\n    public countReviewed(section: string): number {\n        return this.changelog[section].filter((attackID) => this.changelog.reviewed.has(attackID)).length;\n    }\n\n    // changelog section descriptions\n    private descriptions: any = {\n        additions:\n            \"The following techniques have been added to the dataset since the layer was created. You can review the techniques below to identify which may require annotations. Annotations may be added using the 'technique controls' in the toolbar.\",\n        changes:\n            'The following techniques have undergone major changes since the layer was created such as changes to scope or technique name. You can view the annotations you had previously added, map them to the current ATT&CK version, and adjust them as needed. You can also review the previous and current technique definitions by clicking the version numbers in each row.',\n        minor_changes:\n            'The following techniques have had minor revisions since the layer was created such as typo corrections. The annotations have automatically been copied for these techniques, but you can review them if desired. You can also view the previous and current technique definitions by clicking the version numbers under the technique.',\n        revocations:\n            'These are techniques which have been replaced by other techniques since the layer was created. You can view the replacing techniques and transfer annotations from the replaced techniques, adjusting them as nessecary. You can also review the replaced and replacing technique definitions by clicking the version numbers under the technique.',\n        deprecations:\n            'These are techniques which have been removed from the dataset. You can view any annotations you had previously added to these techniques.',\n        unchanged:\n            \"These are techniques which have not changed since the uploaded layer's ATT&CK version. The annotations have automatically been copied for these techniques, but you can review them if desired.\",\n        finish: \"The overview below indicates either the number of techniques you have reviewed in a section, if you have skipped a section, or if there are no techniques to review in that section. Annotations mapped to the current version have been saved to the new layer.\\n\\nVerify your changes and click 'Done' to complete the layer upgrade workflow. Once completed you cannot return to this workflow.\",\n    };\n\n    /**\n     * Get the changelog section description\n     * @param section the name of the changelog section\n     * @returns the section description\n     */\n    public getDescription(section: string): string {\n        return this.descriptions[section];\n    }\n\n    /**\n     * Determine if any techniqueVM in the old version with the given\n     * ATT&CK ID has annotations\n     * @param attackID the ATT&CK ID of the technique\n     * @returns {boolean} true if any TechniqueVM for this technique is annotated\n     */\n    public anyAnnotated(attackID: string): boolean {\n        let oldTechnique = this.getTechnique(attackID, this.compareTo);\n        if (oldTechnique) {\n            let technique_tactic_ids = oldTechnique.get_all_technique_tactic_ids();\n\n            for (let id of technique_tactic_ids) {\n                if (this.compareTo.getTechniqueVM_id(id).annotated()) return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Is the TechniqueVM for this technique-tactic annotated?\n     * @param technique the technique in the old version\n     * @param tactic the tactic the technique is found under\n     * @param vm the view model\n     * @returns {boolean} true if the TechniqueVM is annotated, false otherwise\n     */\n    public isAnnotated(technique: Technique, tactic: Tactic, vm: ViewModel): boolean {\n        return vm.getTechniqueVM(technique, tactic).annotated();\n    }\n\n    /**\n     * Get the total number of techniques currently displayed in a given section\n     * @param section the name of the changelog section\n     * @returns the total number of annotated techniques in the section if the filter is enabled,\n     * otherwise the total number of techniques in the seciton\n     */\n    public sectionLength(section: string): number {\n        if (this.filter[section]) return this.changelog[section].filter((attackID) => this.anyAnnotated(attackID)).length;\n        else return this.changelog[section].length;\n    }\n\n    /**\n     * Determine if the annotations of the technique under the given tactic\n     * in the old version have been copied to the new version\n     * @param technique the technique in the old version\n     * @param tactic the tactic the technique is found under\n     * @returns {boolean} true if the annotations have been copied to the\n     * object in the new version\n     */\n    public isCopied(technique: Technique, tactic: Tactic): boolean {\n        if (this.changelog.copied.has(technique.get_technique_tactic_id(tactic))) return true;\n        return false;\n    }\n\n    /**\n     * Copy the annotations from the technique in the old version\n     * to the technique in the new version\n     * @param attackID the ATT&CK ID of the technique\n     * @param tactic the tactic the technique is found under\n     */\n    public copyAnnotations(attackID: string, tactic: Tactic, section: string): void {\n        let fromTechnique = this.getTechnique(attackID, this.compareTo);\n        let toTechnique = this.getTechnique(attackID, this.viewModel, section);\n        this.viewModel.copyAnnotations(fromTechnique, toTechnique, tactic);\n    }\n\n    /**\n     * Re-enable the annotations on the technique in the old version and\n     * reset the annotations on the technique in the new version\n     * @param attackID the ATT&CK ID of the technique\n     * @param tactic the tactic the technique is found under\n     */\n    public revertCopy(attackID: string, tactic: Tactic, section: string): void {\n        let fromTechnique = this.getTechnique(attackID, this.compareTo);\n        let toTechnique = this.getTechnique(attackID, this.viewModel, section);\n        this.viewModel.revertCopy(fromTechnique, toTechnique, tactic);\n    }\n\n    /**\n     * Copy the annotations from the TechniqueVM in the old version\n     * to the TechniqueVM that the element was dropped over\n     * @param event the ngx drop event\n     * @param toTechnique the technique object to copy annotations to\n     * @param toTactic the tactic object to copy annotations to\n     * @param section the name of the changelog section\n     */\n    public onDrop(event: DndDropEvent, toTechnique: Technique, toTactic: Tactic, section: string): void {\n        let attackID = event.data.split('^')[0];\n        let validTechnique = this.getTechnique(attackID, this.viewModel, section);\n\n        if (validTechnique.id === toTechnique.id) {\n            // copying annotations to a valid target?\n            // retrieve relevant technique VMs\n            let fromTvm = this.compareTo.getTechniqueVM_id(event.data);\n            let toTvm = this.viewModel.getTechniqueVM(toTechnique, toTactic);\n\n            // copy annotations\n            let rep = fromTvm.serialize();\n            toTvm.resetAnnotations();\n            toTvm.deserialize(rep, toTechnique.attackID, toTactic.shortname);\n            this.viewModel.updateScoreColor(toTvm);\n        } else {\n            // invalid target\n        }\n    }\n\n    /**\n     * Remove all annotations from the VM\n     * @param technique the technique object to remove annotations from\n     * @param tactic the tactic the technique is found under\n     */\n    public clearAnnotations(technique: Technique, tactic: Tactic): void {\n        this.viewModel.getTechniqueVM(technique, tactic).resetAnnotations();\n    }\n\n    /**\n     * Close the layer upgrade sidebar\n     */\n    public closeSidebar(): void {\n        this.viewModel.sidebarOpened = !this.viewModel.sidebarOpened;\n        this.viewModel.sidebarContentType = '';\n    }\n}\n","<link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\" />\n\n<div class=\"layer-upgrade\">\n    <mat-card>\n        <mat-card-content>\n            <!-- title -->\n            <div class=\"title\">\n                <h2>Layer Upgrade</h2>\n                (ATT&CK v{{ compareTo.version }}\n                <mat-icon inline=\"true\">east</mat-icon>\n                ATT&CK v{{ viewModel.version }})\n            </div>\n            <p>\n                Review techniques which have been added, changed, replaced, or removed from the knowledge base since ATT&CK v{{ compareTo.version }}\n                and update your Navigator layer to reflect these changes.\n            </p>\n            <p>\n                <a href=\"https://attack.mitre.org/resources/versions/\" target=\"_blank\" rel=\"noopener noreferrer\">View Versions of ATT&CK</a>\n            </p>\n        </mat-card-content>\n    </mat-card>\n\n    <mat-divider></mat-divider>\n\n    <mat-vertical-stepper #stepper linear>\n        <mat-step *ngFor=\"let section of sections\">\n            <ng-template matStepLabel>Review {{ getHeader(section) }}</ng-template>\n\n            <div *ngIf=\"getDescription(section) as desc\" class=\"description\">\n                <span>{{ desc }}</span>\n            </div>\n\n            <mat-divider></mat-divider>\n\n            <div *ngIf=\"changelog[section].length > 0\">\n                <h4>Options</h4>\n                <div *ngIf=\"section !== 'additions'\">\n                    <input\n                        id=\"filter_{{ section }}\"\n                        class=\"checkbox-custom\"\n                        type=\"checkbox\"\n                        [disabled]=\"disableFilter(section)\"\n                        [(ngModel)]=\"filter[section]\"\n                        (change)=\"applyFilters(section)\" />\n                    <label\n                        for=\"filter_{{ section }}\"\n                        class=\"checkbox-custom-label noselect\"\n                        [class.disabled]=\"disableFilter(section)\"\n                        matTooltipPosition=\"above\"\n                        [matTooltip]=\"disableFilter(section) ? 'no annotated techniques' : ''\">\n                        show annotated techniques only\n                    </label>\n                </div>\n                <input id=\"filter_review_all_{{ section }}\" class=\"checkbox-custom\" type=\"checkbox\" (change)=\"reviewAll(section)\" />\n                <label\n                    for=\"filter_review_all_{{ section }}\"\n                    class=\"checkbox-custom-label noselect\"\n                    matTooltipPosition=\"above\"\n                    [matTooltip]=\"'mark all as reviewed'\">\n                    mark all as reviewed\n                </label>\n                <input id=\"filter_expand_visible_{{ section }}\" class=\"checkbox-custom\" type=\"checkbox\" (change)=\"expandAll(section)\" />\n                <label\n                    for=\"filter_expand_visible_{{ section }}\"\n                    class=\"checkbox-custom-label noselect\"\n                    matTooltipPosition=\"above\"\n                    [matTooltip]=\"'expand visible techniques'\">\n                    expand visible techniques\n                </label>\n\n                <div class=\"spinner\" *ngIf=\"loading\">\n                    <mat-progress-spinner mode=\"indeterminate\"></mat-progress-spinner>\n                </div>\n\n                <ng-container *ngIf=\"stepper ? section == sections[stepper.selectedIndex] : section == sections[0]\">\n                    <div class=\"stepper-content\" *ngIf=\"!loading\">\n                        <mat-accordion multi=\"true\">\n                            <mat-expansion-panel *ngFor=\"let attackID of filteredIDs\" #panel=\"matExpansionPanel\">\n                                <mat-expansion-panel-header>\n                                    <mat-panel-title>\n                                        <mat-icon *ngIf=\"isReviewed(attackID)\" class=\"reviewed\">check_circle_outline</mat-icon>\n                                        <mat-icon *ngIf=\"!isReviewed(attackID)\" class=\"disabled\">radio_button_unchecked</mat-icon>\n                                        <span>{{ attackID }}: {{ getTechnique(attackID, viewModel).name }}</span>\n                                    </mat-panel-title>\n                                </mat-expansion-panel-header>\n                                <ng-template matExpansionPanelContent>\n                                    <div class=\"cols\">\n                                        <div class=\"float wide\" *ngIf=\"section !== 'additions'\">\n                                            <div class=\"version\">\n                                                <a href=\"{{ getPreservedURL(attackID) }}\" target=\"_blank\" rel=\"noopener noreferrer\">\n                                                    ATT&CK v{{ compareTo.version }}\n                                                </a>\n                                            </div>\n                                            <mat-divider></mat-divider>\n                                        </div>\n                                        <div class=\"float arrow\" *ngIf=\"section !== 'additions' && section !== 'deprecations'\">\n                                            <mat-icon inline=\"true\">east</mat-icon>\n                                        </div>\n                                        <div class=\"float wide\" *ngIf=\"section !== 'deprecations'\">\n                                            <div class=\"version\">\n                                                <a\n                                                    href=\"{{ getTechnique(attackID, viewModel, section).url }}\"\n                                                    target=\"_blank\"\n                                                    rel=\"noopener noreferrer\">\n                                                    ATT&CK v{{ viewModel.version }}\n                                                </a>\n                                            </div>\n                                            <mat-divider></mat-divider>\n                                        </div>\n                                    </div>\n\n                                    <div class=\"cols\" *ngIf=\"tacticsChanged(attackID, section)\">\n                                        <div class=\"float wide\" *ngIf=\"getTechnique(attackID, compareTo) as oldTechnique\">\n                                            <div class=\"changelog-cells\" *ngFor=\"let tactic of getTactics(attackID, compareTo)\">\n                                                <div [dndDraggable]=\"oldTechnique.get_technique_tactic_id(tactic)\">\n                                                    <changelog-cell\n                                                        [tactic]=\"tactic\"\n                                                        [technique]=\"oldTechnique\"\n                                                        [viewModel]=\"compareTo\"\n                                                        [isCurrentVersion]=\"false\"\n                                                        [isDraggable]=\"true\"\n                                                        [section]=\"section\"></changelog-cell>\n                                                </div>\n                                            </div>\n                                        </div>\n\n                                        <div class=\"float arrow\">\n                                            <mat-icon\n                                                class=\"info\"\n                                                matTooltipPosition=\"above\"\n                                                matTooltip=\"Drag and drop to copy annotations to the desired tactics in ATT&CK v{{\n                                                    viewModel.version\n                                                }}.\">\n                                                info_outline\n                                            </mat-icon>\n                                        </div>\n\n                                        <div class=\"float wide\" *ngIf=\"getTechnique(attackID, viewModel, section) as newTechnique\">\n                                            <div\n                                                class=\"changelog-cells\"\n                                                *ngFor=\"let tactic of getTactics(attackID, viewModel, section)\"\n                                                dndDropzone\n                                                (dndDrop)=\"onDrop($event, newTechnique, tactic, section)\">\n                                                <changelog-cell\n                                                    [tactic]=\"tactic\"\n                                                    [technique]=\"newTechnique\"\n                                                    [viewModel]=\"viewModel\"\n                                                    [isCurrentVersion]=\"true\"\n                                                    [section]=\"section\"></changelog-cell>\n\n                                                <span\n                                                    class=\"clear-annotations\"\n                                                    *ngIf=\"isAnnotated(newTechnique, tactic, viewModel)\"\n                                                    matTooltipPosition=\"above\"\n                                                    matTooltip=\"clear annotations\"\n                                                    (click)=\"clearAnnotations(newTechnique, tactic)\">\n                                                    x\n                                                </span>\n                                            </div>\n                                        </div>\n                                    </div>\n\n                                    <div *ngIf=\"!tacticsChanged(attackID, section)\">\n                                        <table class=\"changelog-table\">\n                                            <tr *ngFor=\"let tactic of getTactics(attackID, compareTo, section)\">\n                                                <td *ngIf=\"section !== 'additions'\">\n                                                    <changelog-cell\n                                                        [tactic]=\"tactic\"\n                                                        [technique]=\"getTechnique(attackID, compareTo)\"\n                                                        [viewModel]=\"compareTo\"\n                                                        [isCurrentVersion]=\"false\"\n                                                        [section]=\"section\"></changelog-cell>\n                                                </td>\n                                                <td class=\"narrow button-container\" *ngIf=\"section !== 'additions' && section !== 'deprecations'\">\n                                                    <button\n                                                        class=\"button\"\n                                                        matTooltipPosition=\"above\"\n                                                        matTooltip=\"copy annotations\"\n                                                        [disabled]=\"isCopied(getTechnique(attackID, compareTo), tactic) || !anyAnnotated(attackID)\"\n                                                        (click)=\"copyAnnotations(attackID, tactic, section)\">\n                                                        <mat-icon inline=\"true\">chevron_right</mat-icon>\n                                                    </button>\n                                                    <button\n                                                        class=\"button\"\n                                                        matTooltipPosition=\"above\"\n                                                        matTooltip=\"revert copy\"\n                                                        [disabled]=\"!isCopied(getTechnique(attackID, compareTo), tactic)\"\n                                                        (click)=\"revertCopy(attackID, tactic, section)\">\n                                                        <mat-icon inline=\"true\">chevron_left</mat-icon>\n                                                    </button>\n                                                </td>\n                                                <td *ngIf=\"section !== 'deprecations'\">\n                                                    <changelog-cell\n                                                        [tactic]=\"tactic\"\n                                                        [technique]=\"getTechnique(attackID, viewModel, section)\"\n                                                        [viewModel]=\"viewModel\"\n                                                        [isCurrentVersion]=\"true\"\n                                                        [section]=\"section\"></changelog-cell>\n                                                </td>\n                                            </tr>\n                                        </table>\n                                    </div>\n\n                                    <div class=\"checkbox right\">\n                                        <input\n                                            id=\"review_{{ attackID }}\"\n                                            class=\"checkbox-custom\"\n                                            type=\"checkbox\"\n                                            [checked]=\"isReviewed(attackID)\"\n                                            (click)=\"reviewedChanged(attackID, panel)\" />\n                                        <label for=\"review_{{ attackID }}\" class=\"checkbox-custom-label noselect\">reviewed</label>\n                                    </div>\n                                </ng-template>\n                            </mat-expansion-panel>\n                        </mat-accordion>\n                    </div>\n                </ng-container>\n                <mat-paginator [hidePageSize]=\"true\" pageSize=\"10\" (page)=\"applyFilters(section)\" [length]=\"sectionLength(section)\"></mat-paginator>\n            </div>\n\n            <div *ngIf=\"changelog[section].length == 0 && !loading\">\n                <div class=\"description center\">No objects to show</div>\n            </div>\n            <mat-divider></mat-divider>\n            <div class=\"stepper-button\">\n                <span *ngIf=\"changelog[section].length > 0\">Reviewed {{ countReviewed(section) }}/{{ sectionLength(section) }} techniques</span>\n                <button *ngIf=\"section !== 'additions'\" mat-stroked-button matStepperPrevious (click)=\"onStepChange(section, -1)\">Back</button>\n                <button mat-stroked-button matStepperNext (click)=\"onStepChange(section, 1)\">\n                    {{ countReviewed(section) > 0 ? 'Next' : 'Skip' }}\n                </button>\n            </div>\n        </mat-step>\n\n        <mat-step>\n            <ng-template matStepLabel>Finish</ng-template>\n\n            <div class=\"description\">\n                <span>{{ getDescription('finish') }}</span>\n            </div>\n\n            <mat-divider></mat-divider>\n\n            <h4>Overview</h4>\n            <div class=\"summary\" *ngFor=\"let section of sections\">\n                <span>{{ getHeader(section) }}:&nbsp;</span>\n                <span *ngIf=\"countReviewed(section) > 0\">\n                    Reviewed {{ countReviewed(section) }}/{{ sectionLength(section) }} {{ filter[section] ? 'annotated' : '' }} techniques\n                </span>\n                <span *ngIf=\"!changelog[section].length\">No objects to review</span>\n                <span *ngIf=\"changelog[section].length && countReviewed(section) == 0\">Skipped</span>\n            </div>\n\n            <mat-divider></mat-divider>\n\n            <div class=\"stepper-button\">\n                <button mat-stroked-button matStepperPrevious>Back</button>\n                <button mat-stroked-button (click)=\"closeSidebar()\">Done</button>\n            </div>\n        </mat-step>\n    </mat-vertical-stepper>\n</div>\n","import { Component, Input, OnInit, ViewEncapsulation } from '@angular/core';\nimport { Link, Metadata, ViewModel } from '../classes';\n\n@Component({\n    selector: 'app-list-input',\n    templateUrl: './list-input.component.html',\n    styleUrls: ['./list-input.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class ListInputComponent implements OnInit {\n    @Input() config: ListInputConfig;\n    public list: (Link | Metadata)[];\n    private fieldToClass = {\n        links: Link,\n        metadata: Metadata,\n    };\n    public get includeLinks(): boolean {\n        return this.config.type == 'links';\n    }\n\n    ngOnInit(): void {\n        if (this.config.level == 'technique') {\n            this.list = this.config.list.map((item) => {\n                let clone = new this.fieldToClass[this.config.type]();\n                clone.deserialize(item.serialize());\n                return clone;\n            });\n        } else {\n            this.list = this.config.list;\n        }\n    }\n\n    /**\n     * Adds a new item to the list\n     */\n    public add(): void {\n        this.list.push(new this.fieldToClass[this.config.type]());\n    }\n\n    /**\n     * Removes an item from the list at the given index\n     * @param i the index of the item to remove\n     */\n    public remove(i: number): void {\n        if (this.list[i - 1] && this.list[i - 1].divider && this.list[i + 1] && this.list[i + 1].divider) {\n            this.list.splice(i - 1, 2);\n        } else {\n            this.list.splice(i, 1);\n        }\n\n        if (this.list[0]?.divider) this.removeDivider(0);\n        if (this.list[this.list.length - 1] && this.list[this.list.length - 1].divider) this.removeDivider(this.list.length - 1);\n\n        this.updateList();\n    }\n\n    /**\n     * Validate items in the list and update the field on selected techniques\n     */\n    public updateList(): void {\n        let value = this.list.filter((item) => item.valid());\n\n        if (this.config.level == 'technique') {\n            // do not update techniques if editing a layer-level list\n            this.config.viewModel.editSelectedTechniqueValues(this.config.type, value);\n        }\n    }\n\n    /**\n     * Checks if a divider can be added at the previous index\n     *\n     * Note: a divider can only be added if both the items at the current and previous\n     * indices are valid non-divider items.\n     *\n     * @param i the current index\n     * @returns true, if a divider can be added, false otherwise\n     */\n    public canAddDivider(i: number): boolean {\n        if (i < 1) return false; // cannot add divider before the first item\n        if (this.list[i]?.valid() && !this.list[i]?.divider && this.list[i - 1]?.valid() && !this.list[i - 1]?.divider) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Add a divider at the given index\n     * @param i the index at which to add a divider\n     */\n    public addDivider(i: number): void {\n        let item = new this.fieldToClass[this.config.type]();\n        item.divider = true;\n        this.list.splice(i, 0, item);\n        this.updateList();\n    }\n\n    /**\n     * Remove a divider at the given index\n     * @param i the index of the divider to remove\n     */\n    public removeDivider(i: number): void {\n        this.list.splice(i, 1);\n        this.updateList();\n    }\n}\n\nexport interface ListInputConfig {\n    /** The viewmodel */\n    viewModel: ViewModel;\n    /** The list to edit */\n    list: (Link | Metadata)[];\n    /** The item type */\n    type: 'links' | 'metadata';\n    /**\n     * Identifies whether the list exists on the technique or layer level\n     * If on the technique level, the list must be cloned to prevent\n     * empty values from being added; all selected techniques\n     * will be updated with the new values\n     * If on the layer level, the list is edited directly and does\n     * not update selected techniques with the new values\n     */\n    level: 'layer' | 'technique';\n    /** The label attribute of the list */\n    nameField: string;\n    /** The value attribute of the list */\n    valueField: string;\n}\n","<div class=\"list-container\">\n    <div *ngFor=\"let item of list; let i = index\">\n        <div class=\"divider-container\">\n            <!-- divider -->\n            <div *ngIf=\"item.divider\" class=\"divider\" (click)=\"removeDivider(i)\" matTooltipPosition=\"below\" matTooltip=\"remove divider\">\n                <mat-divider></mat-divider>\n                <button mat-icon-button class=\"icon\">-</button>\n                <mat-divider></mat-divider>\n            </div>\n            <div\n                *ngIf=\"!item.divider && canAddDivider(i)\"\n                class=\"divider-option\"\n                (click)=\"addDivider(i)\"\n                matTooltipPosition=\"below\"\n                matTooltip=\"add a divider\">\n                <mat-divider></mat-divider>\n                <button mat-icon-button class=\"icon\">+</button>\n                <mat-divider></mat-divider>\n            </div>\n        </div>\n\n        <!-- list item -->\n        <div class=\"item-container\" *ngIf=\"!item.divider\">\n            <mat-form-field>\n                <textarea\n                    matInput\n                    matTextareaAutosize\n                    [placeholder]=\"config.nameField\"\n                    [(ngModel)]=\"item[config.nameField]\"\n                    (input)=\"updateList()\"></textarea>\n            </mat-form-field>\n            <mat-form-field>\n                <textarea\n                    matInput\n                    matTextareaAutosize\n                    [placeholder]=\"config.valueField\"\n                    [(ngModel)]=\"item[config.valueField]\"\n                    (input)=\"updateList()\"></textarea>\n            </mat-form-field>\n            <a\n                *ngIf=\"includeLinks && item.valid()\"\n                class=\"assigned-link\"\n                href=\"{{ item[config.valueField] }}\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\">\n                {{ item[config.nameField] }}\n            </a>\n            <div class=\"remove-button\">\n                <button class=\"button\" (click)=\"remove(i)\">remove</button>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"add-more\">\n    <button class=\"button\" (click)=\"add()\">add {{ config.type }}</button>\n</div>\n","import { Input, Directive } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { Technique, Tactic } from '../classes/stix';\nimport { ViewModel } from '../classes';\nimport { getCookie, hasCookie } from '../utils/cookies';\nimport { ConfigService } from '../services/config.service';\nimport tinycolor from 'tinycolor2';\n\n@Directive()\nexport abstract class Cell {\n    @Input() viewModel: ViewModel;\n    @Input() technique: Technique;\n    @Input() tactic: Tactic;\n\n    public showContextmenu: boolean = false;\n    public isDarkTheme: boolean;\n\n    constructor(\n        public dataService: DataService,\n        public configService: ConfigService\n    ) {\n        this.dataService = dataService;\n        this.configService = configService;\n        if (hasCookie('is_user_theme_dark')) this.isDarkTheme = getCookie('is_user_theme_dark') === 'true';\n        else this.isDarkTheme = window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n\n    public get isHighlighted(): boolean {\n        let isHighlighted = this.showContextmenu;\n        let idToMatch = this.technique.id;\n        if (this.viewModel.selectSubtechniquesWithParent && this.technique.isSubtechnique) idToMatch = this.technique.parent.id;\n\n        if (this.viewModel.highlightedTechniques.has(idToMatch)) {\n            if (!this.viewModel.highlightedTactic) {\n                // highlight is called from search component\n                return true;\n            } else {\n                const isTacticMatching = this.viewModel.highlightedTactic.id === this.tactic.id;\n                return this.viewModel.selectTechniquesAcrossTactics || isTacticMatching;\n            }\n        }\n\n        return isHighlighted;\n    }\n\n    /**\n     * Return css classes for a technique\n     * @param  {technique} technique the technique to get the class of\n     * @param  {boolean}   mini is it the minitable?\n     * @return {string}               the classes the technique should currently have\n     */\n    public getClass(): string {\n        let theclass = 'link noselect cell';\n        if (this.tactic && this.viewModel.isTechniqueSelected(this.technique, this.tactic)) theclass += ' editing';\n        if (this.isHighlighted) {\n            //open context menu always keeps highlight even if the mouse has moved elsewhere\n            theclass += ' highlight';\n        }\n\n        // classes added by layout config\n        if (this.viewModel.layout.showID) {\n            theclass += ' showID';\n            //change sticky top position of technique count\n            let elements = document.querySelectorAll<HTMLElement>('.tactic.count');\n            for (let i = 0; i < elements.length; i++) {\n                elements[i].style.top = '46px';\n            }\n        }\n        if (this.viewModel.layout.showName) theclass += ' showName';\n        theclass += ' ' + this.viewModel.layout.layout;\n\n        // classes according to annotations\n        if (\n            (this.tactic && this.viewModel.getTechniqueVM(this.technique, this.tactic).comment.length > 0) ||\n            this.viewModel.getTechniqueVM(this.technique, this.tactic).metadata.length > 0 ||\n            this.viewModel.getTechniqueVM(this.technique, this.tactic).links.length > 0 ||\n            this.hasNotes()\n        )\n            theclass += ' underlined';\n        if (this.getTechniqueBackground()) theclass += ' colored';\n        if (this.tactic && !this.viewModel.getTechniqueVM(this.technique, this.tactic).enabled) theclass += ' disabled';\n\n        return theclass;\n    }\n\n    /**\n     * Emulate transparency without an alpha channel\n     * @param color color with alpha channel\n     * @returns color without an alpha channel which has been mixed with the proper background color as if it is transparent\n     */\n    public emulate_alpha(color: any) {\n        /* note: constructing a tinycolor of a tinycolor makes them aliases. E.g:\n         *\n         *    x = tinycolor(\"#ffffff\")\n         *    y = tinycolor(x)\n         *    y.getAlpha() -> 1\n         *    x.setAlpha(0)\n         *    y.getAlpha() -> 0\n         *\n         * Therefore y must be cloned after it is constructed to avoid transformations of x affecting it.\n         * In this context, the color arg must be cloned because\n         * in some contexts it is a tinycolor and we change its alpha below,\n         * which could affect the copy in the calling function\n         */\n        if (!color || color.length < 1) return '';\n        let cell_color = tinycolor(color).clone();\n        let cell_color_alpha = cell_color.getAlpha();\n        cell_color.setAlpha(1);\n        let result = tinycolor.mix(this.isDarkTheme ? '#2e2e3f' : '#ffffff', cell_color, cell_color_alpha * 100);\n        return result;\n    }\n\n    /**\n     * Get most readable text color for the given technique\n     * @param  technique     the technique to get the text color for\n     * @param  antihighlight boolean, true if the column is not selected.\n     * @return               black, white, or gray, depending on technique and column state\n     */\n    public getTechniqueTextColor() {\n        if (!this.tactic) return this.isDarkTheme ? 'white' : 'black';\n        let tvm = this.viewModel.getTechniqueVM(this.technique, this.tactic);\n        if (!tvm.enabled) return this.isDarkTheme ? 'rgb(255 255 255 / 25%)' : '#aaaaaa';\n        // don't display if disabled or highlighted\n        // if (this.viewModel.highlightedTechnique && this.viewModel.highlightedTechnique.technique_tactic_union_id == this.technique.technique_tactic_union_id) return \"black\"\n        if (tvm.color && this.configService.getFeature('background_color'))\n            return tinycolor.mostReadable(this.emulate_alpha(tvm.color), ['white', 'black']);\n        if (\n            this.viewModel.layout.showAggregateScores &&\n            tvm.aggregateScoreColor &&\n            this.technique.subtechniques.length > 0 &&\n            this.configService.getFeature('aggregate_score_color')\n        )\n            return tinycolor.mostReadable(this.emulate_alpha(tvm.aggregateScoreColor), ['white', 'black']);\n        if (tvm.score && !isNaN(Number(tvm.score)) && this.configService.getFeature('non_aggregate_score_color'))\n            return tinycolor.mostReadable(this.emulate_alpha(tvm.scoreColor), ['white', 'black']);\n        else return this.isDarkTheme ? 'white' : 'black';\n    }\n\n    /**\n     * Get the underline color for the given technique. The comment/metadata\n     * underscore color overrides the link underscore color.\n     */\n    public getTechniqueUnderlineColor() {\n        if (this.tactic) {\n            let tvm = this.viewModel.getTechniqueVM(this.technique, this.tactic);\n            if (tvm.comment.length > 0 || this.hasNotes()) {\n                if (this.configService.getFeature('comment_underline')) return this.configService.commentColor;\n            }\n            if (tvm.metadata.length > 0) {\n                if (this.configService.getFeature('metadata_underline')) return this.configService.metadataColor;\n            }\n            if (tvm.links.length > 0) {\n                if (this.configService.getFeature('link_underline')) return this.configService.linkColor;\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Check if technique has notes\n     * @return      true if technique has notes, false otherwise\n     */\n    public hasNotes() {\n        let domain = this.dataService.getDomain(this.viewModel.domainVersionID);\n        let notes = domain.notes.filter((note) => {\n            return note.object_refs.includes(this.technique.id);\n        });\n        return notes.length > 0;\n    }\n\n    /**\n     * get the technique background style for ngstyle\n     * @param  technique technique\n     * @return           background object\n     */\n    public getTechniqueBackground(): any {\n        if (!this.tactic) return null;\n        let tvm = this.viewModel.getTechniqueVM(this.technique, this.tactic);\n        // don't display if disabled or highlighted\n        if (!tvm.enabled || this.isHighlighted) return null;\n        if (tvm.color && this.configService.getFeature('background_color')) return { background: this.emulate_alpha(tvm.color) };\n        if (\n            this.viewModel.layout.showAggregateScores &&\n            this.technique.subtechniques.length > 0 &&\n            !isNaN(Number(tvm.aggregateScore)) &&\n            tvm.aggregateScore.length > 0 &&\n            this.configService.getFeature('aggregate_score_color')\n        ) {\n            return { background: this.emulate_alpha(tvm.aggregateScoreColor) };\n        }\n        if (tvm.score && this.configService.getFeature('non_aggregate_score_color')) return { background: this.emulate_alpha(tvm.scoreColor) };\n    }\n}\n","import { Input, Directive } from '@angular/core';\nimport { Matrix, Technique, Tactic } from '../classes/stix';\nimport { ViewModelsService } from '../services/viewmodels.service';\nimport { ConfigService } from '../services/config.service';\nimport { ViewModel } from '../classes';\nimport tinycolor from 'tinycolor2';\n\n@Directive()\nexport abstract class MatrixCommon {\n    @Input() matrix: Matrix;\n    @Input() viewModel: ViewModel;\n\n    constructor(\n        public configService: ConfigService,\n        public viewModelsService: ViewModelsService\n    ) {\n        this.configService = configService;\n    }\n\n    /**\n     * filter tactics according to viewmodel state\n     * @param {Tactic[]} tactics to filter\n     * @returns {Tactic[]} filtered tactics\n     */\n    public filterTactics(tactics: Tactic[]): Tactic[] {\n        return this.viewModel.filterTactics(tactics, this.matrix);\n    }\n\n    /**\n     * filter techniques according to viewModel state\n     * @param {Technique[]} techniques list of techniques to filter\n     * @param {Tactic} tactic tactic the techniques fall under\n     * @returns {Technique[]} filtered techniques\n     */\n    public filterTechniques(techniques: Technique[], tactic: Tactic): Technique[] {\n        return this.viewModel.filterTechniques(techniques, tactic, this.matrix);\n    }\n\n    /**\n     * sort techniques accoding to viewModel state\n     * @param {Technique[]} techniques techniques to sort\n     * @param {Tactic} tactic tactic the techniques fall under\n     * @returns {Technique[]} sorted techniques\n     */\n    public sortTechniques(techniques: Technique[], tactic: Tactic): Technique[] {\n        return this.viewModel.sortTechniques(techniques, tactic);\n    }\n\n    /**\n     * apply sort and filter state to techniques\n     * @param {Technique[]} techniques techniques to sort and filter\n     * @param {Tactic} tactic that the techniques fall under\n     * @returns {Technique[]} sorted and filtered techniques\n     */\n    public applyControls(techniques: Technique[], tactic: Tactic): Technique[] {\n        return this.viewModel.applyControls(techniques, tactic, this.matrix);\n    }\n\n    public onTechniqueLeftClick(event: any, technique: Technique, tactic: Tactic) {\n        if (!this.configService.getFeature('selecting_techniques')) {\n            //if selecting is disabled, same behavior as right click. Shouldn't ever get to this point because it should be handled in technique-cell\n            return;\n        }\n        if (event.shift || event.ctrl || event.meta) {\n            // add to selection\n            if (this.viewModel.isTechniqueSelected(technique, tactic)) this.viewModel.unselectTechnique(technique, tactic);\n            else this.viewModel.selectTechnique(technique, tactic);\n        } else {\n            // replace selection\n            if (this.viewModel.getSelectedTechniqueCount() > 1) {\n                if (this.viewModel.isTechniqueSelected(technique, tactic)) this.viewModel.clearSelectedTechniques();\n                this.viewModel.selectTechnique(technique, tactic);\n            } else if (this.viewModel.isTechniqueSelected(technique, tactic)) {\n                //unselect currently selected\n                this.viewModel.clearSelectedTechniques();\n            } else {\n                //replace\n                this.viewModel.clearSelectedTechniques();\n                this.viewModel.selectTechnique(technique, tactic);\n            }\n        }\n        this.viewModelsService.onSelectionChange.emit();\n    }\n\n    public onToggleSubtechniquesVisible(technique: Technique, tactic: Tactic) {\n        if (technique.subtechniques.length == 0) return;\n        let tvm = this.viewModel.getTechniqueVM(technique, tactic);\n        tvm.showSubtechniques = !tvm.showSubtechniques;\n    }\n\n    public onTechniqueHighlight(event: any, technique: Technique, tactic: Tactic) {\n        this.viewModel.highlightTechnique(technique, tactic);\n    }\n    public onTechniqueUnhighlight(event: any) {\n        this.viewModel.clearHighlight();\n    }\n\n    public onTacticClick(tactic: Tactic) {\n        if (this.viewModel.isTacticSelected(tactic)) this.viewModel.unselectAllTechniquesInTactic(tactic);\n        else this.viewModel.selectAllTechniquesInTactic(tactic);\n    }\n\n    public getTacticBackground(): any {\n        if (this.viewModel.showTacticRowBackground)\n            return {\n                background: this.viewModel.tacticRowBackground,\n                color: tinycolor.mostReadable(this.viewModel.tacticRowBackground, ['white', 'black']),\n            };\n        else {\n            return {};\n        }\n    }\n}\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MatrixCommon } from '../matrix-common';\nimport { ConfigService } from '../../services/config.service';\nimport { ViewModelsService } from '../../services/viewmodels.service';\n\n@Component({\n    selector: 'matrix-flat',\n    templateUrl: './matrix-flat.component.html',\n    styleUrls: ['./matrix-flat.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class MatrixFlatComponent extends MatrixCommon implements OnInit {\n    constructor(configService: ConfigService, viewModelsService: ViewModelsService) {\n        super(configService, viewModelsService);\n    }\n\n    ngOnInit(): void {\n        // intentionally left blank\n    }\n}\n","<table class=\"matrix flat\">\n    <thead>\n        <tr>\n            <td *ngFor=\"let tactic of filterTactics(matrix.tactics)\" class=\"tactic name\" [ngStyle]=\"getTacticBackground()\">\n                <a (click)=\"onTacticClick(tactic)\">\n                    <tactic-cell [viewModel]=\"viewModel\" [tactic]=\"tactic\"></tactic-cell>\n                </a>\n            </td>\n        </tr>\n        <tr>\n            <td *ngFor=\"let tactic of filterTactics(matrix.tactics)\" class=\"tactic count\" [ngStyle]=\"getTacticBackground()\">\n                {{ filterTechniques(tactic.techniques, tactic).length }}\n                <ng-container *ngIf=\"viewModel.layout.showName\">&nbsp;techniques</ng-container>\n            </td>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td *ngFor=\"let tactic of filterTactics(matrix.tactics)\" class=\"tactic\">\n                <ng-container *ngFor=\"let technique of applyControls(tactic.techniques, tactic)\">\n                    <ng-container *ngIf=\"technique.subtechniques.length == 0; else supertechnique\">\n                        <technique-cell\n                            [tactic]=\"tactic\"\n                            [technique]=\"technique\"\n                            [viewModel]=\"viewModel\"\n                            [matrix]=\"matrix\"\n                            (leftclick)=\"onTechniqueLeftClick($event, technique, tactic)\"\n                            (rightclick)=\"onTechniqueRightClick($event, technique)\"\n                            (highlight)=\"onTechniqueHighlight($event, technique, tactic)\"\n                            (unhighlight)=\"onTechniqueUnhighlight($event)\"></technique-cell>\n                    </ng-container>\n                    <ng-template #supertechnique>\n                        <table class=\"supertechnique\">\n                            <tr>\n                                <td\n                                    *ngIf=\"technique.subtechniques.length > 0\"\n                                    class=\"sidebar technique\"\n                                    [ngClass]=\"{ disabled: applyControls(technique.subtechniques, tactic).length == 0 }\"\n                                    (click)=\"onToggleSubtechniquesVisible(technique, tactic)\">\n                                    <div class=\"handle\">=</div>\n                                </td>\n                                <td class=\"technique\">\n                                    <technique-cell\n                                        [tactic]=\"tactic\"\n                                        [technique]=\"technique\"\n                                        [viewModel]=\"viewModel\"\n                                        [matrix]=\"matrix\"\n                                        (leftclick)=\"onTechniqueLeftClick($event, technique, tactic)\"\n                                        (rightclick)=\"onTechniqueRightClick($event, technique)\"\n                                        (highlight)=\"onTechniqueHighlight($event, technique, tactic)\"\n                                        (unhighlight)=\"onTechniqueUnhighlight($event)\"></technique-cell>\n                                </td>\n                            </tr>\n                            <tr\n                                class=\"subtechniques-row subtechniques-container\"\n                                [class.hidden]=\"!viewModel.getTechniqueVM(technique, tactic).showSubtechniques\">\n                                <td *ngIf=\"applyControls(technique.subtechniques, tactic).length > 0\" class=\"sidebar subtechniques\">\n                                    <svg width=\"12px\" height=\"12px\">\n                                        <path d=\"M0 0H12V12Z\" />\n                                    </svg>\n                                </td>\n                                <td class=\"subtechniques\">\n                                    <div class=\"subtechniques\">\n                                        <technique-cell\n                                            *ngFor=\"let subtechnique of applyControls(technique.subtechniques, tactic)\"\n                                            [tactic]=\"tactic\"\n                                            [technique]=\"subtechnique\"\n                                            [viewModel]=\"viewModel\"\n                                            [matrix]=\"matrix\"\n                                            (leftclick)=\"onTechniqueLeftClick($event, subtechnique, tactic)\"\n                                            (rightclick)=\"onTechniqueRightClick($event, subtechnique)\"\n                                            (highlight)=\"onTechniqueHighlight($event, subtechnique, tactic)\"\n                                            (unhighlight)=\"onTechniqueUnhighlight($event)\"></technique-cell>\n                                    </div>\n                                </td>\n                            </tr>\n                        </table>\n                    </ng-template>\n                </ng-container>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { Component, OnInit } from '@angular/core';\nimport { MatrixCommon } from '../matrix-common';\nimport { ConfigService } from '../../services/config.service';\nimport { ViewModelsService } from '../../services/viewmodels.service';\n\n@Component({\n    selector: 'matrix-mini',\n    templateUrl: './matrix-mini.component.html',\n    styleUrls: ['./matrix-mini.component.scss'],\n})\nexport class MatrixMiniComponent extends MatrixCommon implements OnInit {\n    constructor(configService: ConfigService, viewModelsService: ViewModelsService) {\n        super(configService, viewModelsService);\n    }\n\n    ngOnInit(): void {\n        // intentionally left blank\n    }\n}\n","<table class=\"matrix mini\">\n    <thead>\n        <tr>\n            <td *ngFor=\"let tactic of filterTactics(matrix.tactics)\" class=\"tactic header\">\n                <tactic-cell [viewModel]=\"viewModel\" [tactic]=\"tactic\"></tactic-cell>\n            </td>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td *ngFor=\"let tactic of filterTactics(matrix.tactics)\" class=\"tactic body\">\n                <ng-container *ngFor=\"let technique of applyControls(tactic.techniques, tactic)\">\n                    <div class=\"cell-container supertechnique-group\" *ngIf=\"technique.subtechniques.length > 0; else elseblock\">\n                        <div class=\"cell-container supertechnique\">\n                            <technique-cell\n                                #elseblock\n                                [tactic]=\"tactic\"\n                                [technique]=\"technique\"\n                                [viewModel]=\"viewModel\"\n                                [matrix]=\"matrix\"\n                                (leftclick)=\"onTechniqueLeftClick($event, technique, tactic)\"\n                                (rightclick)=\"onTechniqueRightClick($event, technique)\"\n                                (highlight)=\"onTechniqueHighlight($event, technique, tactic)\"\n                                (unhighlight)=\"onTechniqueUnhighlight($event)\"></technique-cell>\n                        </div>\n                        <div class=\"cell-container subtechnique\" *ngFor=\"let subtechnique of applyControls(technique.subtechniques, tactic)\">\n                            <technique-cell\n                                [tactic]=\"tactic\"\n                                [technique]=\"subtechnique\"\n                                [viewModel]=\"viewModel\"\n                                [matrix]=\"matrix\"\n                                (leftclick)=\"onTechniqueLeftClick($event, subtechnique, tactic)\"\n                                (rightclick)=\"onTechniqueRightClick($event, subtechnique)\"\n                                (highlight)=\"onTechniqueHighlight($event, subtechnique, tactic)\"\n                                (unhighlight)=\"onTechniqueUnhighlight($event)\"></technique-cell>\n                        </div>\n                    </div>\n                    <ng-template #elseblock>\n                        <div class=\"cell-container\">\n                            <technique-cell\n                                [tactic]=\"tactic\"\n                                [technique]=\"technique\"\n                                [viewModel]=\"viewModel\"\n                                [matrix]=\"matrix\"\n                                (leftclick)=\"onTechniqueLeftClick($event, technique, tactic)\"\n                                (rightclick)=\"onTechniqueRightClick($event, technique)\"\n                                (highlight)=\"onTechniqueHighlight($event, technique, tactic)\"\n                                (unhighlight)=\"onTechniqueUnhighlight($event)\"></technique-cell>\n                        </div>\n                    </ng-template>\n                </ng-container>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\nimport { MatrixCommon } from '../matrix-common';\nimport { ConfigService } from '../../services/config.service';\nimport { ViewModelsService } from '../../services/viewmodels.service';\n\n@Component({\n    selector: 'matrix-side',\n    templateUrl: './matrix-side.component.html',\n    styleUrls: ['./matrix-side.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class MatrixSideComponent extends MatrixCommon implements OnInit {\n    constructor(configService: ConfigService, viewModelsService: ViewModelsService) {\n        super(configService, viewModelsService);\n    }\n\n    ngOnInit(): void {\n        // intentionally left blank\n    }\n}\n","<table class=\"matrix side\">\n    <thead>\n        <tr class=\"tactic\">\n            <td *ngFor=\"let tactic of filterTactics(matrix.tactics)\" class=\"tactic name\" [ngStyle]=\"getTacticBackground()\">\n                <a (click)=\"onTacticClick(tactic)\">\n                    <tactic-cell [viewModel]=\"viewModel\" [tactic]=\"tactic\"></tactic-cell>\n                </a>\n            </td>\n        </tr>\n        <tr>\n            <td *ngFor=\"let tactic of filterTactics(matrix.tactics)\" class=\"tactic count\" [ngStyle]=\"getTacticBackground()\">\n                {{ filterTechniques(tactic.techniques, tactic).length }}\n                <ng-container *ngIf=\"viewModel.layout.showName\">&nbsp;techniques</ng-container>\n            </td>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td *ngFor=\"let tactic of filterTactics(matrix.tactics)\" class=\"tactic\">\n                <table class=\"techniques-table\">\n                    <tr *ngFor=\"let technique of applyControls(tactic.techniques, tactic)\" class=\"technique-row\">\n                        <td>\n                            <ng-container *ngIf=\"technique.subtechniques.length == 0; else supertechnique\">\n                                <technique-cell\n                                    [tactic]=\"tactic\"\n                                    [technique]=\"technique\"\n                                    [viewModel]=\"viewModel\"\n                                    [matrix]=\"matrix\"\n                                    (leftclick)=\"onTechniqueLeftClick($event, technique, tactic)\"\n                                    (rightclick)=\"onTechniqueRightClick($event, technique)\"\n                                    (highlight)=\"onTechniqueHighlight($event, technique, tactic)\"\n                                    (unhighlight)=\"onTechniqueUnhighlight($event)\"></technique-cell>\n                            </ng-container>\n                            <ng-template #supertechnique>\n                                <table class=\"supertechnique\">\n                                    <tr>\n                                        <td class=\"technique\">\n                                            <technique-cell\n                                                [tactic]=\"tactic\"\n                                                [technique]=\"technique\"\n                                                [viewModel]=\"viewModel\"\n                                                [matrix]=\"matrix\"\n                                                (leftclick)=\"onTechniqueLeftClick($event, technique, tactic)\"\n                                                (rightclick)=\"onTechniqueRightClick($event, technique)\"\n                                                (highlight)=\"onTechniqueHighlight($event, technique, tactic)\"\n                                                (unhighlight)=\"onTechniqueUnhighlight($event)\"></technique-cell>\n                                        </td>\n                                    </tr>\n                                </table>\n                            </ng-template>\n                        </td>\n                        <td\n                            *ngIf=\"technique.subtechniques.length > 0\"\n                            [ngClass]=\"{\n                                disabled: applyControls(technique.subtechniques, tactic).length == 0,\n                                expanded:\n                                    viewModel.getTechniqueVM(technique, tactic).showSubtechniques &&\n                                    applyControls(technique.subtechniques, tactic).length > 0\n                            }\"\n                            class=\"sidebar sidebar--{{ tactic.id }}--{{ technique.id }}\"\n                            (click)=\"onToggleSubtechniquesVisible(technique, tactic)\">\n                            <div class=\"angle top\">\n                                <svg width=\"12px\" height=\"12px\">\n                                    <path d=\"M0 12H12V0Z\" />\n                                </svg>\n                            </div>\n                            <div class=\"handle\">=</div>\n                            <div class=\"angle bottom\">\n                                <svg width=\"12px\" height=\"12px\">\n                                    <path d=\"M0 0H12V12Z\" />\n                                </svg>\n                            </div>\n                        </td>\n                        <td class=\"subtechniques-td\">\n                            <div class=\"subtechniques\" [class.hidden]=\"!viewModel.getTechniqueVM(technique, tactic).showSubtechniques\">\n                                <div *ngFor=\"let subtechnique of applyControls(technique.subtechniques, tactic)\" class=\"subtechnique\">\n                                    <technique-cell\n                                        [tactic]=\"tactic\"\n                                        [technique]=\"subtechnique\"\n                                        [viewModel]=\"viewModel\"\n                                        [matrix]=\"matrix\"\n                                        (leftclick)=\"onTechniqueLeftClick($event, subtechnique, tactic)\"\n                                        (rightclick)=\"onTechniqueRightClick($event, subtechnique)\"\n                                        (highlight)=\"onTechniqueHighlight($event, subtechnique, tactic)\"\n                                        (unhighlight)=\"onTechniqueUnhighlight($event)\"></technique-cell>\n                                </div>\n                            </div>\n                        </td>\n                    </tr>\n                </table>\n            </td>\n        </tr>\n    </tbody>\n</table>\n","import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\nimport { Tactic } from '../../classes/stix';\nimport { ViewModel } from '../../classes';\n\n@Component({\n    selector: 'tactic-cell',\n    templateUrl: './tactic-cell.component.html',\n    styleUrls: ['./tactic-cell.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class TacticCellComponent implements OnInit {\n    @Input() tactic: Tactic;\n    @Input() viewModel: ViewModel;\n\n    constructor() {\n        // intentionally left blank\n    }\n\n    ngOnInit() {\n        // intentionally left blank\n    }\n}\n","<div\n    class=\"tactic-cell noselect\"\n    [class.bordered]=\"!(viewModel.layout.showID || viewModel.layout.showName)\"\n    [class.mini]=\"viewModel.layout.layout == 'mini'\"\n    [matTooltip]=\"tactic.attackID + ': ' + tactic.name\"\n    [matTooltipDisabled]=\"viewModel.layout.showID || viewModel.layout.showName\"\n    matTooltipPosition=\"above\">\n    <ng-container *ngIf=\"viewModel.layout.showID\">{{ tactic.attackID }}</ng-container>\n    <div class=\"id-name-break\" *ngIf=\"viewModel.layout.showID && viewModel.layout.showName\"></div>\n    <ng-container *ngIf=\"viewModel.layout.showName\">{{ tactic.name }}</ng-container>\n</div>\n","import { ElementRef } from '@angular/core';\n\nexport abstract class CellPopover {\n    private theElement: any;\n    constructor(element: ElementRef) {\n        this.theElement = element.nativeElement;\n    }\n\n    /**\n     * Get the location of the tooltip according to the location on the screen.\n     * Returns one of the following:\n     * \"top left\":\n     * ------------------\n     * |    XXXX      |\n     * |    XXXX      |\n     * |       X      |\n     * |              |\n     * ------------------\n     * \"top right\":\n     * ------------------\n     * |        XXXX  |\n     * |        XXXX  |\n     * |       X      |\n     * |              |\n     * ------------------\n     * \"bottom left\":\n     * ------------------\n     * |                |\n     * |  XXXX X        |\n     * |  XXXX          |\n     * ------------------\n     * \"bottom right\":\n     * ------------------\n     * |                |\n     * |       X XXXX   |\n     * |         XXXX   |\n     * ------------------\n     * @returns {string} direction\n     */\n    public getPosition(): string {\n        let boundingRect = this.theElement.getBoundingClientRect();\n        let halfWidth = window.innerWidth / 2;\n        let halfHeight = window.innerHeight / 2;\n        let position = [];\n        if (boundingRect.right > halfWidth) position.push('left');\n        else position.push('right');\n        if (boundingRect.bottom > halfHeight) position.push('top');\n        else position.push('bottom');\n        return position.join(' ');\n    }\n}\n","import { Component, OnInit, Input, Output, EventEmitter, ElementRef, ViewEncapsulation } from '@angular/core';\nimport { ContextMenuItem, Link, TechniqueVM, ViewModel } from '../../../classes';\nimport { Technique, Tactic } from '../../../classes/stix';\nimport { ViewModelsService } from '../../../services/viewmodels.service';\nimport { ConfigService } from '../../../services/config.service';\nimport { CellPopover } from '../cell-popover';\n\n@Component({\n    selector: 'app-contextmenu',\n    templateUrl: './contextmenu.component.html',\n    styleUrls: ['./contextmenu.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class ContextmenuComponent extends CellPopover implements OnInit {\n    @Input() technique: Technique;\n    @Input() tactic: Tactic;\n    @Input() viewModel: ViewModel;\n    public placement: string;\n    @Output() close = new EventEmitter<any>();\n\n    public get techniqueVM(): TechniqueVM {\n        return this.viewModel.getTechniqueVM(this.technique, this.tactic);\n    }\n\n    public get links(): Link[] {\n        return this.techniqueVM.links;\n    }\n\n    constructor(\n        private element: ElementRef,\n        public configService: ConfigService,\n        public viewModelsService: ViewModelsService\n    ) {\n        super(element);\n    }\n\n    ngOnInit() {\n        this.placement = this.getPosition();\n    }\n\n    public closeContextmenu() {\n        this.close.emit();\n    }\n\n    public select() {\n        this.viewModel.clearSelectedTechniques();\n        this.viewModel.selectTechnique(this.technique, this.tactic);\n        this.closeContextmenu();\n    }\n\n    public addSelection() {\n        this.viewModel.selectTechnique(this.technique, this.tactic);\n        this.closeContextmenu();\n    }\n\n    public removeSelection() {\n        this.viewModel.unselectTechnique(this.technique, this.tactic);\n        this.closeContextmenu();\n    }\n\n    public selectAll() {\n        this.viewModel.selectAllTechniques();\n        this.closeContextmenu();\n    }\n\n    public deselectAll() {\n        this.viewModel.clearSelectedTechniques();\n        this.closeContextmenu();\n    }\n\n    public invertSelection() {\n        this.viewModel.invertSelection();\n        this.closeContextmenu();\n    }\n\n    public selectAnnotated() {\n        this.viewModel.selectAnnotated();\n        this.closeContextmenu();\n    }\n\n    public selectUnannotated() {\n        this.viewModel.selectUnannotated();\n        this.closeContextmenu();\n    }\n\n    public selectAllInTactic() {\n        this.viewModel.selectAllTechniquesInTactic(this.tactic);\n        this.closeContextmenu();\n    }\n\n    public deselectAllInTactic() {\n        this.viewModel.unselectAllTechniquesInTactic(this.tactic);\n        this.closeContextmenu();\n    }\n\n    public viewTechnique() {\n        window.open(this.technique.url, '_blank');\n        this.closeContextmenu();\n    }\n\n    public viewTactic() {\n        window.open(this.tactic.url, '_blank');\n        this.closeContextmenu();\n    }\n\n    public pinCell() {\n        this.viewModelsService.pinnedCell =\n            this.viewModelsService.pinnedCell === this.techniqueVM.technique_tactic_union_id ? '' : this.techniqueVM.technique_tactic_union_id;\n        this.closeContextmenu();\n    }\n\n    public openCustomContextMenuItem(customItem: ContextMenuItem) {\n        window.open(customItem.getReplacedURL(this.technique, this.tactic), '_blank');\n        this.closeContextmenu();\n    }\n\n    public openLink(link: Link) {\n        window.open(link.url);\n        this.closeContextmenu();\n    }\n}\n","<div class=\"contextmenu\" (contextmenu)=\"closeContextmenu()\">\n    <!-- covers entire screen -->\n    <div class=\"cover\" (click)=\"closeContextmenu()\"></div>\n    <!-- the actual menu -->\n    <div [ngClass]=\"'menu ' + placement\">\n        <div class=\"contextMenu-section\">\n            <div class=\"contextMenu-header\">{{ technique.name }} ({{ technique.attackID }})</div>\n        </div>\n        <div class=\"contextMenu-section\">\n            <div class=\"contextMenu-button\" (click)=\"pinCell()\">pin/unpin tooltip</div>\n        </div>\n        <div *ngIf=\"configService.getFeature('selecting_techniques')\" class=\"contextMenu-section\">\n            <div class=\"contextMenu-button\" (click)=\"select()\">select</div>\n            <div class=\"contextMenu-button\" (click)=\"addSelection()\">add to selection</div>\n            <div class=\"contextMenu-button\" (click)=\"removeSelection()\">remove from selection</div>\n        </div>\n        <div *ngIf=\"configService.getFeature('selecting_techniques')\" class=\"contextMenu-section\">\n            <div class=\"contextMenu-button\" (click)=\"selectAll()\">select all</div>\n            <div class=\"contextMenu-button\" (click)=\"deselectAll()\">deselect all</div>\n            <div class=\"contextMenu-button\" (click)=\"invertSelection()\">invert selection</div>\n        </div>\n        <div *ngIf=\"configService.getFeature('selecting_techniques')\" class=\"contextMenu-section\">\n            <div class=\"contextMenu-button\" (click)=\"selectAnnotated()\">select annotated</div>\n            <div class=\"contextMenu-button\" (click)=\"selectUnannotated()\">select unannotated</div>\n        </div>\n        <div *ngIf=\"configService.getFeature('selecting_techniques')\" class=\"contextMenu-section\">\n            <div class=\"contextMenu-button\" (click)=\"selectAllInTactic()\">select all techniques in tactic</div>\n            <div class=\"contextMenu-button\" (click)=\"deselectAllInTactic()\">deselect all techniques in tactic</div>\n        </div>\n        <div class=\"contextMenu-section\">\n            <div class=\"contextMenu-button\" (click)=\"viewTechnique()\">view technique</div>\n            <div class=\"contextMenu-button\" (click)=\"viewTactic()\">view tactic</div>\n        </div>\n        <div class=\"contextMenu-section\" *ngIf=\"configService.contextMenuItems.length > 0\">\n            <div\n                class=\"contextMenu-button\"\n                *ngFor=\"let contextMenuItem of configService.contextMenuItems\"\n                (click)=\"openCustomContextMenuItem(contextMenuItem)\">\n                {{ contextMenuItem.label }}\n            </div>\n        </div>\n        <div *ngIf=\"links.length\" class=\"contextMenu-section\">\n            <div class=\"link-container\" *ngFor=\"let link of links\">\n                <div *ngIf=\"!link.divider; else divider\" class=\"contextMenu-button\" (click)=\"openLink(link)\">\n                    {{ link.label }}\n                </div>\n                <ng-template #divider>\n                    <div class=\"divider\"></div>\n                </ng-template>\n            </div>\n        </div>\n    </div>\n</div>\n","import { Component, OnInit, Input, EventEmitter, Output, ViewEncapsulation } from '@angular/core';\nimport { DataService } from '../../services/data.service';\nimport { Technique, Tactic, Matrix } from '../../classes/stix';\nimport { ConfigService } from '../../services/config.service';\nimport { Cell } from '../cell';\nimport { ViewModelsService } from '../../services/viewmodels.service';\n\n@Component({\n    selector: 'technique-cell',\n    templateUrl: './technique-cell.component.html',\n    styleUrls: ['./technique-cell.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class TechniqueCellComponent extends Cell implements OnInit {\n    @Input() matrix: Matrix;\n    @Output() highlight = new EventEmitter<any>(); // emit with the highlighted technique, or null to unhighlight\n    @Output() unhighlight = new EventEmitter<any>();\n    @Output() leftclick = new EventEmitter<any>(); // emit with the selected technique and the modifier keys\n\n    public get isCellPinned(): boolean {\n        return this.viewModelsService.pinnedCell === this.viewModel.getTechniqueVM(this.technique, this.tactic).technique_tactic_union_id;\n    }\n\n    public get showTooltip(): boolean {\n        if (this.isCellPinned) return true;\n        if (this.showContextmenu) return false;\n        if (this.viewModel.highlightedTechniques.size === 0) return false;\n\n        return (\n            this.viewModel.highlightedTechnique === this.technique &&\n            this.viewModel.highlightedTactic &&\n            this.viewModel.highlightedTactic.id === this.tactic.id\n        );\n    }\n\n    constructor(\n        public dataService: DataService,\n        public configService: ConfigService,\n        public viewModelsService: ViewModelsService\n    ) {\n        super(dataService, configService);\n    }\n\n    ngOnInit(): void {\n        // intentionally left blank\n    }\n\n    // count number of annotated sub-techniques on this technique\n    public annotatedSubtechniques(): number {\n        let annotatedSubs: Technique[] = [];\n        for (let s of this.technique.subtechniques) {\n            let subVM = this.viewModel.getTechniqueVM(s, this.tactic);\n            if (subVM.annotated()) annotatedSubs.push(s);\n        }\n        return this.applyControls(annotatedSubs, this.tactic).length;\n    }\n\n    // sort and filter techniques\n    public applyControls(techniques: Technique[], tactic: Tactic): Technique[] {\n        return this.viewModel.applyControls(techniques, tactic, this.matrix);\n    }\n\n    // events to pass to parent component\n    public onMouseEnter() {\n        this.highlight.emit();\n    }\n    public onMouseLeave() {\n        this.unhighlight.emit();\n    }\n    public onLeftClick(event) {\n        if (!this.isCellPinned) this.viewModelsService.pinnedCell = '';\n        if (this.configService.getFeature('selecting_techniques'))\n            this.leftclick.emit({\n                technique: this.technique,\n                // modifier keys\n                shift: event.shiftKey,\n                ctrl: event.ctrlKey,\n                meta: event.metaKey,\n                // position of event on page\n                x: event.pageX,\n                y: event.pageY,\n            });\n        else this.onRightClick(event);\n    }\n    public onRightClick(event) {\n        if (!this.isCellPinned) this.viewModelsService.pinnedCell = '';\n        this.showContextmenu = true;\n    }\n\n    // return css classes for a technique\n    public getClass(): string {\n        let theclass = super.getClass();\n\n        // classes by annotated sub-techniques\n        if (!this.annotatedSubtechniques()) theclass += ' unannotated';\n\n        if (this.isCellPinned) theclass += ' editing';\n\n        return theclass;\n    }\n}\n","<div class=\"technique-cell\" [ngStyle]=\"getTechniqueBackground()\" [ngClass]=\"getClass()\">\n    <div (click)=\"onLeftClick($event)\" (contextmenu)=\"onRightClick($event)\" (mouseenter)=\"onMouseEnter()\" (mouseleave)=\"onMouseLeave()\">\n        <span [style.border-color]=\"getTechniqueUnderlineColor()\" [style.color]=\"getTechniqueTextColor()\">\n            <ng-container *ngIf=\"viewModel.layout.showID\">{{ technique.attackID }}</ng-container>\n            <div class=\"id-name-break\" *ngIf=\"viewModel.layout.showID && viewModel.layout.showName\"></div>\n            <ng-container *ngIf=\"viewModel.layout.showName\">{{ technique.name }}</ng-container>\n        </span>\n        <ng-container *ngIf=\"technique.subtechniques.length > 0\">\n            <sub *ngIf=\"viewModel.layout.showID || viewModel.layout.showName\" class=\"sub\">\n                &nbsp;({{ annotatedSubtechniques() }}/{{ applyControls(technique.subtechniques, tactic).length }})\n            </sub>\n        </ng-container>\n    </div>\n    <app-tooltip *ngIf=\"showTooltip\" [technique]=\"technique\" [tactic]=\"tactic\" [viewModel]=\"viewModel\"></app-tooltip>\n    <app-contextmenu\n        *ngIf=\"showContextmenu\"\n        [technique]=\"technique\"\n        [tactic]=\"tactic\"\n        [viewModel]=\"viewModel\"\n        (close)=\"showContextmenu = false; onMouseLeave()\"></app-contextmenu>\n</div>\n","import { Component, OnInit, Input, ElementRef, ViewEncapsulation } from '@angular/core';\nimport { DataService } from '../../../services/data.service';\nimport { Technique, Tactic, Note } from '../../../classes/stix';\nimport { ViewModel, TechniqueVM } from '../../../classes';\nimport { ViewModelsService } from '../../../services/viewmodels.service';\nimport { CellPopover } from '../cell-popover';\n\n@Component({\n    selector: 'app-tooltip',\n    templateUrl: './tooltip.component.html',\n    styleUrls: ['./tooltip.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class TooltipComponent extends CellPopover implements OnInit {\n    @Input() technique: Technique;\n    @Input() tactic: Tactic;\n    @Input() viewModel: ViewModel;\n    public placement: string;\n    public notes: Note[];\n\n    public get isCellPinned(): boolean {\n        return this.viewModelsService.pinnedCell === this.techniqueVM.technique_tactic_union_id;\n    }\n\n    public get techniqueVM(): TechniqueVM {\n        return this.viewModel.getTechniqueVM(this.technique, this.tactic);\n    }\n\n    constructor(\n        public element: ElementRef,\n        public dataService: DataService,\n        public viewModelsService: ViewModelsService\n    ) {\n        super(element);\n    }\n\n    ngOnInit() {\n        this.placement = this.getPlacement();\n        let domain = this.dataService.getDomain(this.viewModel.domainVersionID);\n        this.notes = domain.notes.filter((note) => {\n            return note.object_refs.includes(this.technique.id);\n        });\n    }\n\n    public getPlacement(): string {\n        return this.getPosition();\n    }\n\n    public unpin(): void {\n        this.viewModelsService.pinnedCell = '';\n    }\n}\n","<div [ngClass]=\"'tooltip ' + placement\" [style.width]=\"isCellPinned ? '200ch' : ''\">\n    <table>\n        <tr>\n            <td colspan=\"2\" class=\"technique-name\">\n                <span>{{ technique.name }} ({{ technique.attackID }})</span>\n                <span *ngIf=\"isCellPinned\" class=\"pin\" matTooltip=\"unpin\" matTooltipPosition=\"above\" (click)=\"unpin()\">\n                    <mat-icon>push_pin</mat-icon>\n                </span>\n            </td>\n        </tr>\n        <tr *ngIf=\"!techniqueVM.enabled\">\n            <td colspan=\"2\">Disabled</td>\n        </tr>\n        <tr *ngIf=\"techniqueVM.score\">\n            <td>Score:</td>\n            <td>{{ techniqueVM.score }}</td>\n        </tr>\n        <tr *ngIf=\"viewModel.layout.showAggregateScores && techniqueVM.aggregateScore\">\n            <td>Aggregate Score ({{ viewModel.layout.aggregateFunction }}):</td>\n            <td>{{ techniqueVM.aggregateScore }}</td>\n        </tr>\n        <tr *ngIf=\"techniqueVM.comment\">\n            <td>Comment:</td>\n            <td>{{ techniqueVM.comment }}</td>\n        </tr>\n        <tr *ngFor=\"let note of notes\">\n            <td *ngIf=\"note.abstract\" class=\"wrap\">{{ note.abstract }}:</td>\n            <td class=\"wrap\" [attr.colspan]=\"note.abstract ? '1' : '2'\">{{ note.content }}</td>\n        </tr>\n        <tr *ngFor=\"let metadata of techniqueVM.metadata\">\n            <td *ngIf=\"metadata.divider\" class=\"divider\" colspan=\"2\"><hr /></td>\n            <td *ngIf=\"!metadata.divider\">{{ metadata.name }}:</td>\n            <td *ngIf=\"!metadata.divider\">{{ metadata.value }}</td>\n        </tr>\n    </table>\n</div>\n","import { Component, OnInit, Input, ViewEncapsulation } from '@angular/core';\nimport { StixObject, Group, Mitigation, Software, Technique, Campaign, Asset } from '../classes/stix';\nimport { ViewModelsService } from '../services/viewmodels.service';\nimport { DataService } from '../services/data.service';\nimport { ViewModel } from '../classes';\n\n@Component({\n    selector: 'app-search-and-multiselect',\n    templateUrl: './search-and-multiselect.component.html',\n    styleUrls: ['./search-and-multiselect.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class SearchAndMultiselectComponent implements OnInit {\n    @Input() viewModel: ViewModel;\n\n    public stixTypes: any[] = [];\n    public techniqueResults: Technique[] = [];\n    // Data Components is a map mainly because it is a collection of labels that map to\n    // an array of techniques, where we want to filter/sort by label name\n    public stixDataComponents = new Map<string, any>();\n    public stixDataComponentLabels: string[] = [];\n    public userClickedExpand: boolean = false;\n\n    public expandedPanels = {\n        0: true, // techniques panel\n        1: false, // groups panel\n        2: false, // software panel\n        3: false, // campaign panel\n        4: false, // mitigations panel\n        5: false, // data components panel\n        6: false, // assets panel\n    };\n\n    public fields = [\n        {\n            label: 'name',\n            field: 'name',\n            enabled: true,\n        },\n        {\n            label: 'ATT&CK ID',\n            field: 'attackID',\n            enabled: true,\n        },\n        {\n            label: 'description',\n            field: 'description',\n            enabled: true,\n        },\n        {\n            label: 'data sources',\n            field: 'datasources',\n            enabled: true,\n        },\n    ];\n\n    private debounceFunction;\n    private previousQuery: string = '';\n    private _query: string = '';\n\n    // query setter\n    public set query(newQuery: string) {\n        this._query = newQuery;\n        if (!this.debounceFunction) {\n            this.debounceFunction = setTimeout(() => {\n                this.getResults(this._query);\n                this.debounceFunction = null;\n                this.previousQuery = this._query;\n            }, 300);\n        }\n    }\n\n    // get query length\n    public get queryLength(): number {\n        return this._query.length;\n    }\n\n    // get techniques matching label\n    public get stixDataComponentsResults(): Technique[] {\n        let results = [];\n        this.stixDataComponentLabels.forEach((label) => {\n            results = results.concat(this.stixDataComponents.get(label).objects);\n        });\n        return results;\n    }\n\n    constructor(\n        private dataService: DataService,\n        private viewModelsService: ViewModelsService\n    ) {\n        // intentionally left blank\n    }\n\n    ngOnInit() {\n        this.getResults();\n    }\n\n    /**\n     * Takes an array of items and does the following:\n     *       1) if the query is empty, then it sorts the array\n     *       2) if the query is not empty, then it filters the already sorted array until nothing is left, or until\n     *          the query is cleared out and empty again\n     * @param items StixObject[] or Technique[] objects to be filtered and sorted\n     * @param query user-input query in search bar\n     * @param sortTechniquesAndSubtechniques will be true if called from getTechniqueResults(),\n     *                                       to sort techniques and all its subtechniques,\n     *                                       otherwise just sort StixObject items by name\n     */\n    public filterAndSort(items: StixObject[], query: string = '', sortTechniquesAndSubtechniques = false): any[] {\n        let self = this;\n        let results = items.filter((t) => !t.deprecated && !t.revoked);\n\n        if (query.trim() === '') {\n            // sort the array\n            if (sortTechniquesAndSubtechniques) {\n                results.sort((tA: Technique, tB: Technique) => {\n                    let c1 = tA.isSubtechnique ? tA.parent.name : tA.name;\n                    let c2 = tB.isSubtechnique ? tB.parent.name : tB.name;\n                    return c1.localeCompare(c2);\n                });\n            } else {\n                results.sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()));\n            }\n        } else {\n            // deconflict IDs for cross-tactic techniques\n            let seenIDs = new Set();\n            results = results.filter(function (technique: Technique) {\n                if (seenIDs.has(technique.id)) return false;\n                for (let field of self.fields) {\n                    if (field.enabled) {\n                        // query in this field\n                        if (technique[field.field]?.toLowerCase().includes(query.trim().toLowerCase())) {\n                            seenIDs.add(technique.id);\n                            return true;\n                        }\n                    }\n                }\n                return false;\n            });\n        }\n        return results;\n    }\n\n    /**\n     * Filters and sorts data component labels\n     * @param labels list of data component labels\n     * @param query user-input query in search bar\n     */\n    public filterAndSortLabels(labels: string[], query: string): string[] {\n        let results: string[] = labels;\n        if (query.trim() === '') {\n            return results.sort();\n        } else {\n            return results.filter((r) => r.toLowerCase().includes(query.trim().toLowerCase()));\n        }\n    }\n\n    /**\n     * Checks if the query is:\n     *       1) valid, and\n     *       2) part of last query, otherwise call getTechniques() and getStixData() to search all objects again\n     **/\n    public getResults(query: string = '', fieldToggled = false) {\n        if (query.trim() != '' && query.includes(this.previousQuery) && !fieldToggled) {\n            this.techniqueResults = this.filterAndSort(this.techniqueResults, query, true);\n            this.stixTypes.forEach((item) => (item['objects'] = this.filterAndSort(item['objects'], query)));\n        } else {\n            this.getTechniques();\n            this.getStixData();\n        }\n        this.stixDataComponentLabels = this.filterAndSortLabels(this.stixDataComponentLabels, query);\n        this.expandPanels();\n    }\n\n    /**\n     * Update expanded panels based on query and results\n     */\n    public expandPanels() {\n        if (!this.userClickedExpand) {\n            this.expandedPanels[0] = this.techniqueResults.length > 0;\n            let isPrevExpanded = this.expandedPanels[0];\n            if (!isPrevExpanded) {\n                this.stixTypes.forEach((s, i) => {\n                    this.expandedPanels[i + 1] = !isPrevExpanded && s.objects.length > 0;\n                    isPrevExpanded = s.isExpanded;\n                });\n            }\n            this.expandedPanels[4] = !isPrevExpanded && this.stixDataComponentLabels.length > 0;\n        } else {\n            let isAllCollapsed = false;\n            for (const isPanelExpanded in this.expandedPanels) {\n                if (isPanelExpanded) {\n                    isAllCollapsed = true;\n                    break;\n                }\n            }\n            this.userClickedExpand = isAllCollapsed;\n        }\n    }\n\n    /**\n     * Retrieve master list of techniques and sub-techniques\n     */\n    public getTechniques(): void {\n        let allTechniques = this.dataService.getDomain(this.viewModel.domainVersionID).techniques;\n        for (let technique of allTechniques) {\n            allTechniques = allTechniques.concat(technique.subtechniques);\n        }\n        this.techniqueResults = this.filterAndSort(allTechniques, this._query, true);\n    }\n\n    /**\n     * Retrieve master list of STIX objects\n     */\n    public getStixData(): void {\n        let domain = this.dataService.getDomain(this.viewModel.domainVersionID);\n\n        this.stixTypes = [\n            {\n                label: 'threat groups',\n                objects: this.filterAndSort(domain.groups, this._query),\n            },\n            {\n                label: 'software',\n                objects: this.filterAndSort(domain.software, this._query),\n            },\n            {\n                label: 'mitigations',\n                objects: this.filterAndSort(domain.mitigations, this._query),\n            },\n            {\n                label: 'campaigns',\n                objects: this.filterAndSort(domain.campaigns, this._query),\n            },\n            {\n                label: 'assets',\n                objects: this.filterAndSort(domain.assets, this._query),\n            },\n        ];\n\n        domain.dataComponents.forEach((c) => {\n            const source = c.source(this.viewModel.domainVersionID);\n            const label = `${source.name}: ${c.name}`;\n            const obj = {\n                objects: c.techniques(this.viewModel.domainVersionID),\n                url: source.url,\n            };\n            this.stixDataComponents.set(label, obj);\n        });\n        this.stixDataComponentLabels = this.filterAndSortLabels(Array.from(this.stixDataComponents.keys()), this._query);\n    }\n\n    public toggleFieldEnabled(field: string) {\n        for (let thefield of this.fields) {\n            if (thefield.field == field) {\n                thefield.enabled = !thefield.enabled;\n                // set query to empty string to trigger getResults() in the case that:\n                // 1) a field was toggled, and\n                // 2) the query did not change\n                this.getResults('', true);\n                break;\n            }\n        }\n    }\n\n    public mouseEnterAll(techniques: Technique[]) {\n        techniques.forEach((t) => this.mouseEnter(t));\n    }\n\n    public mouseEnter(technique: Technique, isTechnique = true): void {\n        if (!isTechnique) {\n            for (let t of this.getRelated(technique)) {\n                this.viewModel.selectTechniqueAcrossTactics(t, true, true);\n            }\n        } else {\n            this.viewModel.highlightTechnique(technique);\n        }\n    }\n\n    public mouseLeave(): void {\n        this.viewModel.clearHighlight();\n    }\n\n    public select(stixObject: any, isTechnique = true): void {\n        if (isTechnique) {\n            this.viewModel.selectTechniqueAcrossTactics(stixObject);\n        } else if (!isTechnique) {\n            for (let technique of this.getRelated(stixObject)) {\n                this.viewModel.selectTechniqueAcrossTactics(technique);\n            }\n        }\n        this.viewModelsService.onSelectionChange.emit(); // emit selection change\n    }\n\n    public deselect(stixObject: any, isTechnique = true): void {\n        if (isTechnique) {\n            this.viewModel.unselectTechniqueAcrossTactics(stixObject);\n        } else if (!isTechnique) {\n            for (let technique of this.getRelated(stixObject)) {\n                this.viewModel.unselectTechniqueAcrossTactics(technique);\n            }\n        }\n        this.viewModelsService.onSelectionChange.emit(); // emit selection change\n    }\n\n    public selectAll(items: any[], isTechniqueArray = true): void {\n        if (isTechniqueArray) {\n            for (let result of items) this.select(result, isTechniqueArray);\n        } else if (!isTechniqueArray) {\n            for (let stixObject of items) this.select(stixObject, isTechniqueArray);\n        }\n        this.viewModelsService.onSelectionChange.emit(); // emit selection change\n    }\n\n    public deselectAll(items: any[], isTechniqueArray = true): void {\n        if (isTechniqueArray) {\n            for (let result of items) this.deselect(result, isTechniqueArray);\n        } else if (!isTechniqueArray) {\n            for (let stixObject of items) this.deselect(stixObject, isTechniqueArray);\n        }\n        this.viewModelsService.onSelectionChange.emit(); // emit selection change\n    }\n\n    public getRelated(stixObject: StixObject): Technique[] {\n        // master list of all techniques and sub-techniques\n        let techniques = this.dataService.getDomain(this.viewModel.domainVersionID).techniques;\n        let allTechniques = techniques.concat(this.dataService.getDomain(this.viewModel.domainVersionID).subtechniques);\n        let domainVersionID = this.viewModel.domainVersionID;\n\n        if (stixObject instanceof Group) {\n            return allTechniques.filter((technique: Technique) => (stixObject as Group).relatedTechniques(domainVersionID).includes(technique.id));\n        } else if (stixObject instanceof Software) {\n            return allTechniques.filter((technique: Technique) => (stixObject as Software).relatedTechniques(domainVersionID).includes(technique.id));\n        } else if (stixObject instanceof Mitigation) {\n            return allTechniques.filter((technique: Technique) =>\n                (stixObject as Mitigation).relatedTechniques(domainVersionID).includes(technique.id)\n            );\n        } else if (stixObject instanceof Campaign) {\n            return allTechniques.filter((technique: Technique) => (stixObject as Campaign).relatedTechniques(domainVersionID).includes(technique.id));\n        } else if (stixObject instanceof Asset) {\n            return allTechniques.filter((technique: Technique) => (stixObject as Asset).relatedTechniques(domainVersionID).includes(technique.id));\n        }\n    }\n}\n","<div class=\"search-and-multiselect\">\n    <mat-form-field appearance=\"outline\">\n        <mat-label>Search</mat-label>\n        <span matPrefix class=\"material-icons\" alt=\"search\">search</span>\n        <input matInput [(ngModel)]=\"query\" placeholder=\"Search\" />\n    </mat-form-field>\n\n    <mat-divider></mat-divider>\n\n    <div class=\"sidebar-content\">\n        <mat-card>\n            <div class=\"settings\">\n                <mat-card-title><h4 class=\"title\">Search Settings</h4></mat-card-title>\n                <mat-card-content>\n                    <div class=\"fields\">\n                        <div class=\"field\" *ngFor=\"let field of fields\">\n                            <input\n                                [id]=\"field.field\"\n                                class=\"checkbox-custom\"\n                                type=\"checkbox\"\n                                (click)=\"toggleFieldEnabled(field.field)\"\n                                [checked]=\"field.enabled\" />\n                            <label [for]=\"field.field\" class=\"checkbox-custom-label noselect\">{{ field.label }}</label>\n                        </div>\n                    </div>\n                </mat-card-content>\n            </div>\n        </mat-card>\n    </div>\n\n    <mat-divider></mat-divider>\n\n    <div class=\"sidebar-content\">\n        <mat-accordion multi>\n            <mat-expansion-panel [expanded]=\"expandedPanels[0]\" (click)=\"userClickedExpand = true\">\n                <mat-expansion-panel-header>\n                    <mat-panel-title>\n                        <h4>Techniques ({{ techniqueResults.length }})</h4>\n                    </mat-panel-title>\n                    <mat-panel-description></mat-panel-description>\n                </mat-expansion-panel-header>\n\n                <ng-template matExpansionPanelContent>\n                    <div>\n                        <div class=\"allresults-buttons\">\n                            <button class=\"button\" (click)=\"selectAll(techniqueResults)\">select all</button>\n                            <button class=\"button\" (click)=\"deselectAll(techniqueResults)\">deselect all</button>\n                        </div>\n                        <div class=\"results\">\n                            <table class=\"results\" *ngIf=\"techniqueResults.length > 0; else noTechniquesResults\">\n                                <tr *ngFor=\"let result of techniqueResults\">\n                                    <td (mouseenter)=\"mouseEnter(result)\" (mouseleave)=\"mouseLeave()\">\n                                        <span *ngIf=\"result.isSubtechnique\">{{ result.parent.name }} :</span>\n                                        {{ result.name }}\n                                    </td>\n                                    <td><a href=\"{{ result.url }}\" target=\"_blank\" rel=\"noopener noreferrer\">view</a></td>\n                                    <td>\n                                        <button class=\"button\" (click)=\"select(result)\">select</button>\n                                    </td>\n                                    <td>\n                                        <button class=\"button\" (click)=\"deselect(result)\">deselect</button>\n                                    </td>\n                                </tr>\n                            </table>\n                            <ng-template #noTechniquesResults>\n                                <div class=\"no-results\">no results for techniques</div>\n                            </ng-template>\n                        </div>\n                    </div>\n                </ng-template>\n            </mat-expansion-panel>\n\n            <mat-expansion-panel\n                *ngFor=\"let stixType of stixTypes; let i = index\"\n                class=\"stixType\"\n                [expanded]=\"expandedPanels[i + 1]\"\n                (click)=\"userClickedExpand = true\">\n                <mat-expansion-panel-header>\n                    <mat-panel-title>\n                        <h4>{{ stixType.label | titlecase }} ({{ stixType.objects.length }})</h4>\n                    </mat-panel-title>\n                    <mat-panel-description></mat-panel-description>\n                </mat-expansion-panel-header>\n\n                <ng-template matExpansionPanelContent>\n                    <div class=\"allresults-buttons\">\n                        <button class=\"button\" (click)=\"selectAll(stixType.objects, false)\">select all</button>\n                        <button class=\"button\" (click)=\"deselectAll(stixType.objects, false)\">deselect all</button>\n                    </div>\n                    <div class=\"results objects\">\n                        <table *ngIf=\"stixType.objects.length > 0; else noResults\">\n                            <tr *ngFor=\"let stixObject of stixType.objects\">\n                                <td (mouseenter)=\"mouseEnter(stixObject, false)\" (mouseleave)=\"mouseLeave()\">\n                                    {{ stixObject.name }}\n                                </td>\n                                <td><a href=\"{{ stixObject.url }}\" target=\"_blank\" rel=\"noopener noreferrer\">view</a></td>\n                                <td>\n                                    <button class=\"button\" (click)=\"select(stixObject, false)\">select</button>\n                                </td>\n                                <td>\n                                    <button class=\"button\" (click)=\"deselect(stixObject, false)\">deselect</button>\n                                </td>\n                            </tr>\n                        </table>\n                        <ng-template #noResults>\n                            <div class=\"no-results\">no results for {{ stixType.label }}</div>\n                        </ng-template>\n                    </div>\n                </ng-template>\n            </mat-expansion-panel>\n\n            <mat-expansion-panel [expanded]=\"expandedPanels[4]\" (click)=\"userClickedExpand = true\">\n                <mat-expansion-panel-header>\n                    <mat-panel-title>\n                        <h4>Data Sources ({{ stixDataComponentLabels.length }})</h4>\n                    </mat-panel-title>\n                    <mat-panel-description></mat-panel-description>\n                </mat-expansion-panel-header>\n\n                <ng-template matExpansionPanelContent>\n                    <div class=\"allresults-buttons\">\n                        <button class=\"button\" (click)=\"selectAll(stixDataComponentsResults, true)\">select all</button>\n                        <button class=\"button\" (click)=\"deselectAll(stixDataComponentsResults, true)\">deselect all</button>\n                    </div>\n                    <div class=\"results objects\">\n                        <table *ngIf=\"stixDataComponentLabels.length > 0; else noResults\">\n                            <tr *ngFor=\"let label of stixDataComponentLabels\">\n                                <td (mouseenter)=\"mouseEnterAll(stixDataComponents.get(label).objects)\" (mouseleave)=\"mouseLeave()\">\n                                    {{ label }}\n                                </td>\n                                <td><a href=\"{{ stixDataComponents.get(label).url }}\" target=\"_blank\" rel=\"noopener noreferrer\">view</a></td>\n                                <td>\n                                    <button class=\"button\" (click)=\"selectAll(stixDataComponents.get(label).objects, true)\">select</button>\n                                </td>\n                                <td>\n                                    <button class=\"button\" (click)=\"deselectAll(stixDataComponents.get(label).objects, true)\">deselect</button>\n                                </td>\n                            </tr>\n                        </table>\n                        <ng-template #noResults>\n                            <div class=\"no-results\">no results for data sources</div>\n                        </ng-template>\n                    </div>\n                </ng-template>\n            </mat-expansion-panel>\n        </mat-accordion>\n    </div>\n\n    <mat-divider></mat-divider>\n\n    <div class=\"button-container sidebar-content\">\n        <button (click)=\"viewModel.sidebarOpened = !viewModel.sidebarOpened\" mat-raised-button>Close</button>\n    </div>\n</div>\n","import { Injectable } from '@angular/core';\nimport { ContextMenuItem } from '../classes/context-menu-item';\nimport { HttpClient } from '@angular/common/http';\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\nimport { of } from 'rxjs';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ConfigService {\n    public collectionIndex: string;\n    public versions: {\n        enabled: boolean;\n        entries: any;\n    } = {\n        enabled: false,\n        entries: [],\n    };\n    public contextMenuItems: ContextMenuItem[] = [];\n    public defaultLayers: any;\n    public commentColor = 'yellow';\n    public linkColor = 'blue';\n    public metadataColor = 'purple';\n    public banner: string;\n    public featureList: any[] = [];\n\n    private features = new Map<string, boolean>();\n    private featureGroups = new Map<string, string[]>();\n\n    public get subtechniquesEnabled(): boolean {\n        return this.features.get('subtechniques');\n    }\n\n    constructor(private http: HttpClient) {\n        // intentionally left blank\n    }\n\n    /**\n     * Checks if the feature is enabled\n     * @param featureName feature name\n     * @returns true if the feature is enabled, false otherwise\n     */\n    public getFeature(featureName: string): boolean {\n        return this.features.get(featureName);\n    }\n\n    /**\n     * Checks if any/all features in the group are enabled\n     * @param  featureGroup feature group name\n     * @param  type\t'any' or 'all' for logical or/and\n     * @returns true iff any/all are enabled, false otherwise\n     */\n    public getFeatureGroup(featureGroup: string, type?: string): boolean {\n        if (!this.featureGroups.has(featureGroup)) return true;\n\n        let subFeatures = this.featureGroups.get(featureGroup);\n        let count = this.getFeatureGroupCount(featureGroup);\n        return type == 'any' ? count > 0 : count === subFeatures.length;\n    }\n\n    /**\n     * Get the number of enabled features in the group\n     * @param  featureGroup feature group name\n     * @returns the number of enabled features in the group, or -1 if\n     * the group does not exist\n     */\n    public getFeatureGroupCount(featureGroup: string): number {\n        if (!this.featureGroups.has(featureGroup)) return -1;\n        let subFeatures = this.featureGroups.get(featureGroup);\n        let enabled = subFeatures.filter((f) => this.getFeature(f));\n        return enabled.length;\n    }\n\n    /**\n     * Recursively search an object for boolean properties, set these as features\n     * Take a key:value pair of an object. If the value is a boolean, set the\n     * feature[key] to value. Otherwise recursively walk value to find boolean\n     * options.\n     *\n     * Additionally, if the given feature grouping (where value is an obj)\n     * has been previously defined, boolean properties assigned to the grouping\n     * name will apply to all subfeatures of the grouping.\n     *\n     * @param  featureName string, the fieldname the value was found in\n     * @param  value       boolean:object the value of the field. If a boolean,\n     *                     sets feature[featureName] = value, otherwise walks recursively\n     */\n    public setFeature(featureName: string, value: any): string[] {\n        let self = this;\n\n        if (typeof value == 'boolean') {\n            //base case\n            if (this.featureGroups.has(featureName)) {\n                //feature group, assign to all subfeatures\n                this.featureGroups.get(featureName).forEach(function (subFeatureName: string) {\n                    self.setFeature(subFeatureName, value);\n                });\n            } else {\n                //single feature\n                this.features.set(featureName, value);\n            }\n            return [featureName];\n        }\n\n        if (typeof value == 'object') {\n            //keep walking\n            let subfeatures = [];\n            Object.keys(value).forEach(function (fieldname: string) {\n                subfeatures = Array.prototype.concat(subfeatures, self.setFeature(fieldname, value[fieldname]));\n            });\n            this.featureGroups.set(featureName, subfeatures);\n            return subfeatures;\n        }\n    }\n\n    /**\n     * given a set of feature objects, set the enabledness of that object and all subobjects\n     *\n     * @param  featureObject {name: string, enabled: boolean, subfeatures?: featureObject[] }\n     *                       Of enabled is false and it has subfeatures, they will all be forced to be false too\n     * @param  override      Set all subfeatures, and their subfeatures, values to\n     *                       this value\n     */\n    public setFeature_object(featureObject: any, override = null): string[] {\n        let self = this;\n\n        // base case\n        if (!featureObject.hasOwnProperty('subfeatures')) {\n            let enabled = override !== null ? override : featureObject.enabled;\n            this.features.set(featureObject.name, enabled);\n            return [featureObject.name];\n        } else {\n            // has subfeatures\n            if (!override) {\n                override = !featureObject.enabled ? false : null;\n            }\n            let subfeatures = [];\n            featureObject.subfeatures.forEach(function (subfeature) {\n                subfeatures = Array.prototype.concat(subfeatures, self.setFeature_object(subfeature, override));\n            });\n            this.featureGroups.set(featureObject.name, subfeatures);\n            return subfeatures;\n        }\n    }\n\n    /**\n     * Return if the given string corresponds to a defined feature\n     * @param  featureName the name of the feature\n     * @return             true if the feature exists, false otherwise\n     */\n    public isFeature(featureName: string): boolean {\n        return this.features.has(featureName);\n    }\n    /**\n     * return if the given string corresponds to a defined feature group\n     * @param  featureGroupName the name of the feature group\n     * @return                  true if it is a feature group, false otherwise\n     */\n    public isFeatureGroup(featureGroupName: string): boolean {\n        return this.featureGroups.has(featureGroupName);\n    }\n\n    /**\n     * Get all url fragments\n     * @param  url optional, url to parse instead of window location href\n     * @return     all fragments as key-value pairs\n     */\n    public getAllFragments(url?: string): Map<string, string> {\n        if (!url) url = window.location.href;\n        let fragments = new Map<string, string>();\n        let regex = /[#&](\\w+)=(\\w+)/g;\n\n        let match;\n        while ((match = regex.exec(url))) {\n            fragments.set(match[1], match[2]);\n        }\n\n        return fragments;\n    }\n\n    /**\n     * Validate that the configuration file specifies a collection index URL\n     * or a list of versions/domains\n     * @param config the configuration to validate\n     * @returns the configuration, if valid, otherwise throws an error\n     */\n    public validateConfig(config: any): any {\n        if (!config.collection_index_url && !config.versions?.entries?.length) {\n            throw new Error(`'collection_index_url' or 'versions' must be defined`);\n        }\n        if (config.collection_index_url && typeof config.collection_index_url !== typeof 'string') {\n            throw new Error(`'collection_index_url' must be a string`);\n        }\n        return config;\n    }\n\n    /**\n     * Load the configuration file\n     * Note: this is done at startup\n     */\n    public loadConfig() {\n        return this.http\n            .get('./assets/config.json')\n            .pipe(\n                map((config: any) => this.validateConfig(config)),\n                switchMap((config: any) => {\n                    console.debug('loaded app configuration settings');\n\n                    config['custom_context_menu_items'].forEach((item) => {\n                        this.contextMenuItems.push(new ContextMenuItem(item.label, item.url, item.subtechnique_url));\n                    });\n                    this.defaultLayers = config['default_layers'];\n                    this.commentColor = config['comment_color'];\n                    this.linkColor = config['link_color'];\n                    this.metadataColor = config['metadata_color'];\n                    this.banner = config['banner'];\n\n                    // parse feature preferences\n                    this.featureList = config['features'];\n                    config['features'].forEach((feature) => {\n                        this.setFeature_object(feature);\n                    });\n\n                    // override preferences with preferences from URL fragments\n                    this.getAllFragments().forEach((value: string, key: string) => {\n                        if (this.isFeature(key) || this.isFeatureGroup(key)) {\n                            this.setFeature(key, value == 'true');\n                        }\n                    });\n\n                    // parse configured domains and versions\n                    this.versions = config['versions'];\n                    if (config['collection_index_url']) {\n                        return this.http.get(config['collection_index_url']).pipe(\n                            tap((_) => console.log('loaded collection index from', config['collection_index_url'])),\n                            catchError((err) => {\n                                throw new Error('collection index failed to load. ' + err.message);\n                            })\n                        );\n                    }\n                    return of(null);\n                }),\n                map((collectionIndex: any) => {\n                    if (collectionIndex) this.collectionIndex = collectionIndex;\n                }),\n                catchError((err) => {\n                    alert(`ERROR the configuration file failed to parse. See the javascript console for more details.`);\n                    throw err;\n                })\n            )\n            .toPromise();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Buffer } from 'buffer';\nimport { Observable } from 'rxjs/Rx';\nimport { fromPromise } from 'rxjs/observable/fromPromise';\nimport { Asset, Campaign, DataComponent, Group, Software, Matrix, Technique, Mitigation, Note } from '../classes/stix';\nimport { TaxiiConnect, Collection } from '../utils/taxii2lib';\nimport { Domain, Version, VersionChangelog } from '../classes';\nimport { ConfigService } from './config.service';\nimport * as globals from '../utils/globals';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class DataService {\n    constructor(\n        private http: HttpClient,\n        private configService: ConfigService\n    ) {\n        console.debug('initializing data service');\n        if (configService.versions?.enabled) {\n            // parse versions structure from configuration file\n            // support for workbench integration, taxii and custom data\n            this.setUpDomains(configService.versions.entries);\n        }\n        if (configService.collectionIndex) {\n            // parse versions from collection index\n            this.parseCollectionIndex(configService.collectionIndex);\n        }\n        this.versions.sort((a, b) => (+a.number > +b.number ? -1 : 1));\n        this.latestVersion = this.versions[0];\n    }\n\n    public domain_backwards_compatibility = {\n        'mitre-enterprise': 'enterprise-attack',\n        'mitre-mobile': 'mobile-attack',\n    };\n    public domains: Domain[] = [];\n    public versions: Version[] = [];\n    public latestVersion: Version; // set in constructor\n\n    // Observable for data\n    private domainData$: Observable<Object>;\n\n    /**\n     * Callback functions passed to this function will be called after data is loaded\n     * @param {string} domainVersionID the ID of the domain and version to load\n     * @param {*} callback callback function to call when data is done loading\n     */\n    public onDataLoad(domainVersionID, callback) {\n        this.getDomain(domainVersionID).dataLoadedCallbacks.push(callback);\n    }\n\n    /**\n     * Parse the given stix bundles into the relevant data holders\n     * @param domain\n     * @param stixBundles\n     */\n    public parseBundles(domain: Domain, stixBundles: any[]): void {\n        let platforms = new Set<string>();\n        let seenIDs = new Set<string>();\n        let matrixSDOs = [];\n        let idToTacticSDO = new Map<string, any>();\n        let matrixToTechniqueSDOs = new Map<string, any[]>();\n        for (let bundle of stixBundles) {\n            let techniqueSDOs = [];\n            let bundleMatrices = [];\n            let idToTechniqueSDO = new Map<string, any>();\n            // iterate through stix domain objects in the bundle\n            for (let sdo of bundle.objects) {\n                // filter out duplicates, except for matrices\n                // which are needed to properly build the datatables\n                if (sdo.type != 'x-mitre-matrix') {\n                    if (seenIDs.has(sdo.id)) continue;\n                    seenIDs.add(sdo.id);\n                }\n\n                // parse according to type\n                switch (sdo.type) {\n                    case 'x-mitre-data-component':\n                        domain.dataComponents.push(new DataComponent(sdo, this));\n                        break;\n                    case 'x-mitre-data-source':\n                        domain.dataSources.set(sdo.id, { name: sdo.name, external_references: sdo.external_references });\n                        break;\n                    case 'intrusion-set':\n                        domain.groups.push(new Group(sdo, this));\n                        break;\n                    case 'malware':\n                    case 'tool':\n                        domain.software.push(new Software(sdo, this));\n                        break;\n                    case 'campaign':\n                        domain.campaigns.push(new Campaign(sdo, this));\n                        break;\n                    case 'x-mitre-asset':\n                        domain.assets.push(new Asset(sdo, this));\n                        break;\n                    case 'course-of-action':\n                        domain.mitigations.push(new Mitigation(sdo, this));\n                        break;\n                    case 'relationship':\n                        this.parseRelationship(sdo, domain);\n                        break;\n                    case 'attack-pattern':\n                        idToTechniqueSDO.set(sdo.id, sdo);\n                        if (!sdo.x_mitre_is_subtechnique) {\n                            techniqueSDOs.push(sdo);\n                        }\n                        break;\n                    case 'x-mitre-tactic':\n                        idToTacticSDO.set(sdo.id, sdo);\n                        break;\n                    case 'x-mitre-matrix':\n                        matrixSDOs.push(sdo);\n                        bundleMatrices.push(sdo);\n                        break;\n                    case 'note':\n                        domain.notes.push(new Note(sdo));\n                        break;\n                }\n            }\n\n            // create techniques\n            this.createTechniques(techniqueSDOs, idToTechniqueSDO, domain);\n\n            // create map of matrices to techniques\n            for (let matrixSDO of bundleMatrices) {\n                if (!matrixToTechniqueSDOs.get(matrixSDO.id)) {\n                    matrixToTechniqueSDOs.set(matrixSDO.id, techniqueSDOs);\n                } else {\n                    matrixToTechniqueSDOs.get(matrixSDO.id).push(...techniqueSDOs);\n                }\n            }\n\n            // parse platforms\n            this.parsePlatforms(domain).forEach(platforms.add, platforms);\n        }\n\n        // create matrices\n        this.createMatrices(matrixSDOs, idToTacticSDO, matrixToTechniqueSDOs, domain);\n\n        domain.platforms = Array.from(platforms); // convert to array\n\n        // data loading complete; update watchers\n        domain.dataLoaded = true;\n        domain.executeCallbacks();\n    }\n\n    /**\n     * Creates techniques and sub-techniques from the given technique SDOs\n     * @param techniqueSDOs list of parent-level technique SDOs to create\n     * @param idToTechniqueSDO map of all technique IDs to SDOs (incl. sub-techniques)\n     * @param domain the domain to add the techniques to\n     */\n    public createTechniques(techniqueSDOs: any, idToTechniqueSDO: Map<string, any>, domain: Domain): void {\n        for (let techniqueSDO of techniqueSDOs) {\n            let subtechniques: Technique[] = [];\n            if (this.configService.subtechniquesEnabled) {\n                if (domain.relationships.subtechniques_of.has(techniqueSDO.id)) {\n                    domain.relationships.subtechniques_of.get(techniqueSDO.id).forEach((sub_id) => {\n                        if (idToTechniqueSDO.has(sub_id)) {\n                            let subtechnique = new Technique(idToTechniqueSDO.get(sub_id), [], this);\n                            subtechniques.push(subtechnique);\n                            domain.subtechniques.push(subtechnique);\n                        }\n                        // else the target was revoked or deprecated and we can skip honoring the relationship\n                    });\n                }\n            }\n            domain.techniques.push(new Technique(techniqueSDO, subtechniques, this));\n        }\n    }\n\n    /**\n     * Creates the matrices, which also creates its tactics and filters the techniques\n     * @param matricesList list of matrix SDOs to create\n     * @param tacticsList list of tactic SDOs\n     * @param domain the domain to add the matrix/tactics to\n     */\n    public createMatrices(matrixSDOs: any[], idToTacticSDO: Map<string, any>, matrixToTechniqueSDOs, domain: Domain): void {\n        let createdMatrixIDs = [];\n        for (let matrixSDO of matrixSDOs) {\n            // check if matrix was already created\n            if (createdMatrixIDs.includes(matrixSDO.id)) continue;\n\n            // check if matrix is deprecated\n            if (matrixSDO.x_mitre_deprecated) continue;\n\n            // retrieve relevant matrix techniques\n            let techniqueSDOs = matrixToTechniqueSDOs.get(matrixSDO.id);\n            let techniqueIDs = techniqueSDOs.map((t) => t.id);\n            let techniques = domain.techniques.filter((t) => techniqueIDs.includes(t.id));\n            domain.matrices.push(new Matrix(matrixSDO, idToTacticSDO, techniques, this));\n\n            // add to list of created matrices\n            createdMatrixIDs.push(matrixSDO.id);\n        }\n    }\n\n    /**\n     * Extracts the set of platforms from the list of techniques\n     * in the given domain\n     * @param domain the domain for which to parse the platforms\n     * @returns the set of platforms found\n     */\n    public parsePlatforms(domain: Domain): Set<string> {\n        let platforms = new Set<string>();\n        let allTechniques = domain.techniques.concat(domain.subtechniques);\n\n        // parse platforms\n        allTechniques.forEach((technique) => {\n            if (!technique.deprecated && !technique.revoked) {\n                technique.platforms?.forEach(platforms.add, platforms);\n            }\n        });\n\n        return platforms;\n    }\n\n    /**\n     * Parses the given SRO into the domain relationship map\n     * @param sro the SRO to parse\n     * @param domain the domain to add the relationship to\n     */\n    public parseRelationship(sro: any, domain: Domain): void {\n        // for existing keys, add the given value to the list of values\n        // otherwise, add the key with the value as the first item in the list\n        let addRelationshipToMap = function (map, key, value) {\n            if (map.has(key)) map.get(key).push(value);\n            else map.set(key, [value]);\n        };\n\n        switch (sro.relationship_type) {\n            case 'subtechnique-of':\n                if (!this.configService.subtechniquesEnabled) return;\n                // record subtechnique:technique relationship\n                addRelationshipToMap(domain.relationships['subtechniques_of'], sro.target_ref, sro.source_ref);\n                break;\n            case 'uses':\n                if (sro.source_ref.startsWith('intrusion-set') && sro.target_ref.startsWith('attack-pattern')) {\n                    // record group:technique relationship\n                    addRelationshipToMap(domain.relationships['group_uses'], sro.source_ref, sro.target_ref);\n                } else if (\n                    (sro.source_ref.startsWith('malware') || sro.source_ref.startsWith('tool')) &&\n                    sro.target_ref.startsWith('attack-pattern')\n                ) {\n                    // record software:technique relationship\n                    addRelationshipToMap(domain.relationships['software_uses'], sro.source_ref, sro.target_ref);\n                } else if (sro.source_ref.startsWith('campaign') && sro.target_ref.startsWith('attack-pattern')) {\n                    // record campaign:technique relationship\n                    addRelationshipToMap(domain.relationships['campaign_uses'], sro.source_ref, sro.target_ref);\n                }\n                break;\n            case 'mitigates':\n                // record mitigation:technique relationship\n                addRelationshipToMap(domain.relationships['mitigates'], sro.source_ref, sro.target_ref);\n                break;\n            case 'revoked-by':\n                // record stix object: stix object relationship\n                domain.relationships['revoked_by'].set(sro.source_ref, sro.target_ref);\n                break;\n            case 'detects':\n                // record data component: technique relationship\n                addRelationshipToMap(domain.relationships['component_rel'], sro.source_ref, sro.target_ref);\n                break;\n            case 'attributed-to':\n                // record campaign:group relationship\n                addRelationshipToMap(domain.relationships['campaigns_attributed_to'], sro.target_ref, sro.source_ref);\n                break;\n            case 'targets':\n                // record technique:asset relationship\n                addRelationshipToMap(domain.relationships['targeted_assets'], sro.target_ref, sro.source_ref);\n                break;\n        }\n    }\n\n    /**\n     * Set up the URLs for domains in the list defined in the config file\n     * @param {versions} list of versions and domains\n     */\n    public setUpDomains(versions: any[]) {\n        versions.forEach((version: any) => {\n            let v = this.addVersion(version['name'], version['version'].match(/\\d+/g)[0]);\n            version['domains'].forEach((domain: any) => {\n                let identifier = domain['identifier'];\n                let domainObject = new Domain(identifier, domain['name'], v);\n                if (version['authentication']) domainObject.authentication = version['authentication'];\n                if (domain['taxii_url'] && domain['taxii_collection']) {\n                    domainObject.taxii_url = domain['taxii_url'];\n                    domainObject.taxii_collection = domain['taxii_collection'];\n                } else {\n                    domainObject.urls = domain['data'];\n                }\n                this.domains.push(domainObject);\n            });\n        });\n    }\n\n    /**\n     * Parses the collection index for domains/versions\n     * @param collectionIndex the collection index\n     */\n    public parseCollectionIndex(collectionIndex: any) {\n        for (let collection of collectionIndex.collections) {\n            let domainIdentifier = this.getDomainIdentifier(collection.name);\n\n            // only most recent minor versions of a major release\n            let minorVersionMap = collection.versions.reduce((acc, version) => {\n                const [major, minor] = version.version.split('.').map(Number);\n                if (!acc[major] || acc[major].minor < minor) {\n                    acc[major] = { version: version.version, url: version.url };\n                }\n                return acc;\n            }, {});\n            let versions: Array<{ version: string; url: string }> = Object.values(minorVersionMap);\n\n            for (let version of versions) {\n                let versionNumber = version.version.split('.')[0]; // major version only\n                let versionName = `${collectionIndex.name} v${versionNumber}`;\n                if (+versionNumber < +globals.minimumSupportedVersion) {\n                    console.debug(`version ${versionNumber} is not supported, skipping ${collection.name} v${versionNumber}`);\n                    continue;\n                }\n                // create version & domain\n                let v = this.addVersion(versionName, versionNumber);\n                this.domains.push(new Domain(domainIdentifier, collection.name, v, [version.url]));\n            }\n        }\n    }\n\n    /**\n     * Retrieves the domain identifier from the domain name\n     * Helper function for parseCollectionIndex()\n     * @param domainName the name of the domain\n     * @returns the domain identifier (e.g. 'enterprise-attack')\n     */\n    public getDomainIdentifier(domainName: string): string {\n        return domainName.replace(/ /g, '-').replace(/&/g, 'a').toLowerCase();\n    }\n\n    /**\n     * Adds a new version to the list of versions, checking if\n     * one already exists.\n     * @param versionName the name of the version\n     * @param versionNumber the version number\n     * @returns the existing or created Version object\n     */\n    public addVersion(versionName: string, versionNumber: string): Version {\n        // check if version already exists\n        let existingVersion = this.versions.find((v) => v.name === versionName && v.number === versionNumber);\n        if (!existingVersion) {\n            // create and add new version\n            let version = new Version(versionName, versionNumber);\n            this.versions.push(version);\n            return version;\n        }\n        return existingVersion;\n    }\n\n    /**\n     * Fetch the domain data from the endpoint\n     */\n    public getDomainData(domain: Domain, refresh: boolean = false): Observable<Object> {\n        if (domain.taxii_collection && domain.taxii_url) {\n            console.debug('fetching data from TAXII server');\n            let conn = new TaxiiConnect(domain.taxii_url, '', '');\n            let collectionInfo: any = {\n                id: domain.taxii_collection,\n                title: domain.name,\n                description: '',\n                can_read: true,\n                can_write: false,\n            };\n            const collection = new Collection(collectionInfo, domain.taxii_url, conn);\n            this.domainData$ = Observable.forkJoin(fromPromise(collection.getObjects('', undefined)));\n        } else if (refresh || !this.domainData$) {\n            console.debug('retrieving data', domain.urls);\n            let bundleData = [];\n            const httpOptions = {\n                headers: undefined,\n            };\n            if (domain.authentication && domain.authentication.enabled) {\n                // include authorization header, if configured (integrations)\n                let token = `${domain.authentication.serviceName}:${domain.authentication.apiKey}`;\n                httpOptions.headers = new HttpHeaders({ Authorization: 'Basic ' + Buffer.from(token).toString('base64') });\n            }\n            domain.urls.forEach((url) => {\n                bundleData.push(this.http.get(url, httpOptions));\n            });\n            this.domainData$ = Observable.forkJoin(bundleData);\n        }\n        return this.domainData$;\n    }\n\n    /**\n     * Load and parse domain data\n     */\n    public loadDomainData(domainVersionID: string, refresh: boolean = false): Promise<any> {\n        let dataPromise: Promise<any> = new Promise((resolve, reject) => {\n            let domain = this.getDomain(domainVersionID);\n            if (domain) {\n                if (domain.dataLoaded && !refresh) resolve(null);\n                let subscription;\n                subscription = this.getDomainData(domain, refresh).subscribe({\n                    next: (data: Object[]) => {\n                        this.parseBundles(domain, data);\n                        resolve(null);\n                    },\n                    complete: () => {\n                        if (subscription) subscription.unsubscribe();\n                    }, //prevent memory leaks\n                });\n            } else if (!domain) {\n                // domain not defined in config\n                reject(new Error(\"'\" + domainVersionID + \"' is not a valid domain & version.\"));\n            }\n        });\n        return dataPromise;\n    }\n\n    /**\n     * Get domain object by domain ID\n     */\n    public getDomain(domainVersionID: string): Domain {\n        return this.domains.find((d) => d.id === domainVersionID);\n    }\n\n    /**\n     * Get the ID from domain name & version\n     */\n    public getDomainVersionID(domain: string, versionNumber: string): string {\n        if (!versionNumber) {\n            // layer with no specified version defaults to current version\n            versionNumber = this.versions[0].number;\n        }\n        return domain + '-' + versionNumber;\n    }\n\n    /**\n     * Retrieve the technique object with the given attackID in the given domain/version\n     */\n    public getTechnique(attackID: string, domainVersionID: string) {\n        let domain = this.getDomain(domainVersionID);\n        let all_techniques = domain.techniques.concat(domain.subtechniques);\n        return all_techniques.find((t) => t.attackID == attackID);\n    }\n\n    /**\n     * Is the given version supported?\n     */\n    public isSupported(version: string) {\n        let supported = this.versions.map((v) => v.number);\n        let match = version.match(/\\d+/g)[0];\n        return supported.includes(match);\n    }\n\n    /**\n     * Compares techniques between two ATT&CK versions and returns a set of object changes\n     * @param oldDomainVersionID imported layer domain & version to upgrade from\n     * @param newDomainVersionID latest ATT&CK domain & version to upgrade to\n     */\n    public compareVersions(oldDomainVersionID: string, newDomainVersionID: string): VersionChangelog {\n        let changelog = new VersionChangelog(oldDomainVersionID, newDomainVersionID);\n        let oldDomain = this.getDomain(oldDomainVersionID);\n        let newDomain = this.getDomain(newDomainVersionID);\n\n        let previousTechniques = oldDomain.techniques.concat(oldDomain.subtechniques);\n        let latestTechniques = newDomain.techniques.concat(newDomain.subtechniques);\n\n        // object lookup to increase efficiency\n        let objectLookup = new Map<string, Technique>(\n            latestTechniques.map((technique) => [technique.id, previousTechniques.find((p) => p.id == technique.id)])\n        );\n\n        for (let latestTechnique of latestTechniques) {\n            if (!latestTechnique) continue;\n\n            let prevTechnique = objectLookup.get(latestTechnique.id);\n            if (!prevTechnique) {\n                if (latestTechnique.deprecated || latestTechnique.revoked) {\n                    // object doesn't exist in previous version, but is deprecated or revoked\n                    // in the latest version\n                    // this case is unlikely to occur and indicates that something has\n                    // gone wrong in the data, such as the case in which a sub-technique\n                    // was deprecated, had its ties erroneously severed with its parent\n                    // and therefore, cannot be parsed correctly\n                    continue;\n                }\n\n                // object doesn't exist in previous version, added to latest version\n                changelog.additions.push(latestTechnique.attackID);\n            } else if (latestTechnique.modified == prevTechnique.modified) {\n                if (prevTechnique.revoked || prevTechnique.deprecated) {\n                    // object is revoked or deprecated, ignore\n                    continue;\n                } else {\n                    // no changes made to the object\n                    changelog.unchanged.push(latestTechnique.attackID);\n                }\n            } else {\n                // changes were made to the object\n                if (latestTechnique.revoked && !prevTechnique.revoked) {\n                    // object was revoked since the previous version\n                    changelog.revocations.push(latestTechnique.attackID);\n                } else if (latestTechnique.revoked && prevTechnique.revoked) {\n                    // both objects are revoked, ignore\n                    continue;\n                } else if (latestTechnique.deprecated && !prevTechnique.deprecated) {\n                    // object was deprecated since the previous version\n                    changelog.deprecations.push(latestTechnique.attackID);\n                } else if (latestTechnique.deprecated && prevTechnique.deprecated) {\n                    // both objects are deprecated, ignore\n                    continue;\n                } else if (latestTechnique.compareVersion(prevTechnique) != 0) {\n                    // version number changed\n                    changelog.changes.push(latestTechnique.attackID);\n                } else {\n                    // minor change\n                    changelog.minor_changes.push(latestTechnique.attackID);\n                }\n            }\n        }\n        return changelog;\n    }\n}\n\nexport interface ServiceAuth {\n    enabled: boolean;\n    serviceName: string;\n    apiKey: string;\n}\n","import { Injectable } from '@angular/core';\nimport { MatIconRegistry } from '@angular/material/icon';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class IconsService {\n    constructor(\n        public matIconRegistry: MatIconRegistry,\n        private domSanitizer: DomSanitizer\n    ) {\n        // intentionally left blank\n    }\n\n    public registerIcons(): void {\n        this.loadIcons(Object.values(Icons), 'assets/icons');\n    }\n\n    private loadIcons(iconKeys: string[], iconUrl: string): void {\n        iconKeys.forEach((key) => {\n            this.matIconRegistry.addSvgIcon(key, this.domSanitizer.bypassSecurityTrustResourceUrl(`${iconUrl}/${key}.svg`));\n        });\n    }\n}\n\nexport enum Icons {\n    SORT_ALPHABETICAL_ASC = 'ic_sort_alphabetically_ascending',\n    SORT_ALPHABETICAL_DESC = 'ic_sort_alphabetically_descending',\n    SORT_NUMERICAL_ASC = 'ic_sort_numerically_ascending',\n    SORT_NUMERICAL_DESC = 'ic_sort_numerically_descending',\n    UNFOLD_MORE_ALT = 'ic_unfold_more_alt',\n    NON_STICKY_TOOLBAR = 'ic_push_pin_gray',\n}\n","import { EventEmitter, Injectable, Output } from '@angular/core';\nimport { Gradient, TechniqueVM, ViewModel } from '../classes';\nimport { DataService } from './data.service';\nimport { evaluate } from 'mathjs';\nimport * as is from 'is_js';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class ViewModelsService {\n    @Output() onSelectionChange = new EventEmitter<any>();\n\n    public viewModels: ViewModel[] = [];\n    public pinnedCell: string = '';\n    private nonce: number = 0;\n\n    constructor(private dataService: DataService) {\n        // intentionally left blank\n    }\n\n    /* Emit event when technique selection changes */\n    public selectionChanged(): void {\n        this.onSelectionChange.emit();\n    }\n\n    /**\n     * Create and return a new viewModel\n     * @param {string} name the viewmodel name\n     * @param {string} domainVersionID the ID of the domain & version\n     * @return {ViewModel} the created ViewModel\n     */\n    public newViewModel(name: string, domainVersionID: string): ViewModel {\n        let vm = new ViewModel(name, 'vm' + this.getNonce(), domainVersionID, this.dataService);\n        this.viewModels.push(vm);\n        return vm;\n    }\n\n    /**\n     * Get a nonce.\n     * @return a number that will never be regenerated by sequential calls to getNonce.\n     * Note: this applies on a session-by-session basis, nonces are not\n     * unique between app instances.\n     */\n    public getNonce(): number {\n        return this.nonce++;\n    }\n\n    /**\n     * Destroy the viewmodel\n     * @param vm viewmodel to destroy.\n     */\n    public destroyViewModel(vm: ViewModel): void {\n        for (let i = 0; i < this.viewModels.length; i++) {\n            if (this.viewModels[i] == vm) {\n                this.viewModels.splice(i, 1);\n                return;\n            }\n        }\n    }\n\n    /**\n     * Layer combination operation\n     * @param  scoreVariables   variables in math expression, mapping to viewmodel they correspond to\n     * @param  layerName        the name of the new layer\n     * @param  opSettings       the settings for view model inheritance\n     *      - `domain`: the domain & version\n     *      - `gradientVM`: the view model to inherit gradient from\n     *      - `coloringVM`: the view model to inherit manual colors from\n     *      - `commentVM`: the view model to inherit comments from\n     *      - `linkVM`: the view model to inherit links from\n     *      - `metadataVM`: the view model to inherit metadata from\n     *      - `enabledVM`: the view model to inherit enabled state from\n     *      - `filterVM`: the view model to inherit filters from\n     *      - `scoreExpression`: math equation of score expression\n     *      - `legendVM`: the view model to inherit legend items from\n     * @return                  new viewmodel inheriting above properties\n     */\n    public layerOperation(scoreVariables: Map<string, ViewModel>, layerName: string, opSettings: any): ViewModel {\n        let newViewModel = new ViewModel('layer by operation', 'vm' + this.getNonce(), opSettings.domain, this.dataService);\n\n        if (opSettings.scoreExpression) {\n            opSettings.scoreExpression = opSettings.scoreExpression.toLowerCase(); // should be enforced by input, but just in case\n            let minScore = Infinity;\n            let maxScore = -Infinity;\n\n            // get list of all technique IDs used in the VMs\n            let techniqueIDs = new Set<string>();\n            scoreVariables.forEach((vm) => {\n                vm.techniqueVMs.forEach(function (techniqueVM, techniqueID) {\n                    techniqueIDs.add(techniqueID);\n                });\n            });\n\n            // attempt to evaluate without a scope to catch the case of a static assignment\n            try {\n                // evaluate with an empty scope\n                let result = evaluate(opSettings.scoreExpression, {});\n\n                // if it didn't except after this, it evaluated to a single result\n                console.debug('score expression evaluated to single result to be applied to all techniques');\n                if (is.boolean(result)) {\n                    // boolean to binary\n                    result = result ? '1' : '0';\n                } else if (is.not.number(result)) {\n                    // unexpected user input\n                    throw Error('math result ( ' + result + ' ) is not a number');\n                }\n\n                // apply result to all techniques\n                newViewModel.initializeScoresTo = String(result);\n                minScore = result;\n                maxScore = result;\n            } catch (err) {\n                //couldn't evaluate with empty scope, build scope for each technique\n                // compute the score of each techniqueID\n                techniqueIDs.forEach((techniqueID) => {\n                    let newTechniqueVM = new TechniqueVM(techniqueID);\n                    let scope = {};\n                    let misses = 0; // number of times a VM is missing the value\n                    scoreVariables.forEach(function (vm, key) {\n                        let scoreValue: number;\n                        if (!vm.hasTechniqueVM_id(techniqueID)) {\n                            // missing technique\n                            scoreValue = 0;\n                            misses++;\n                        } else {\n                            // technique exists\n                            let score = vm.getTechniqueVM_id(techniqueID).score;\n                            if (score == '' || isNaN(Number(score))) {\n                                scoreValue = 0;\n                                misses++;\n                            } else {\n                                scoreValue = Number(score);\n                            }\n                        }\n                        scope[key] = scoreValue;\n                    });\n\n                    // did at least one technique have a score for this technique?\n                    if (misses < scoreVariables.size) {\n                        let mathResult = evaluate(opSettings.scoreExpression, scope);\n                        if (is.boolean(mathResult)) {\n                            // boolean to binary\n                            mathResult = mathResult ? '1' : '0';\n                        } else if (is.not.number(mathResult)) {\n                            // unexpected user input\n                            throw Error('math result ( ' + mathResult + ' ) is not a number');\n                        }\n\n                        newTechniqueVM.score = String(mathResult);\n                        newViewModel.techniqueVMs.set(techniqueID, newTechniqueVM);\n                        minScore = Math.min(minScore, mathResult);\n                        maxScore = Math.max(maxScore, mathResult);\n                    }\n                    // don't record a result if none of VMs had a score for this technique\n                });\n            }\n\n            // gradient doesn't apply if there is no range of values\n            if (minScore != maxScore) {\n                // set up gradient according to result range\n                if (minScore != Infinity) newViewModel.gradient.minValue = minScore;\n                if (maxScore != -Infinity) newViewModel.gradient.maxValue = maxScore;\n\n                // if binary range, set to transparentblue gradient\n                if (minScore == 0 && maxScore == 1) newViewModel.gradient.setGradientPreset('transparentblue');\n            }\n        }\n\n        /**\n         * Inherit a field from a vm\n         * @param  {ViewModel} inheritVM the viewModel to inherit from\n         * @param  {string}    fieldName  the field to inherit from the viewmodel\n         */\n        function inherit(inheritVM: ViewModel, fieldName: string) {\n            inheritVM.techniqueVMs.forEach((techniqueVM) => {\n                let tvm = newViewModel.hasTechniqueVM_id(techniqueVM.technique_tactic_union_id)\n                    ? newViewModel.getTechniqueVM_id(techniqueVM.technique_tactic_union_id)\n                    : new TechniqueVM(techniqueVM.technique_tactic_union_id);\n                tvm[fieldName] = techniqueVM[fieldName];\n                newViewModel.techniqueVMs.set(techniqueVM.technique_tactic_union_id, tvm);\n            });\n        }\n\n        if (opSettings.commentVM) inherit(opSettings.commentVM, 'comment');\n        if (opSettings.linkVM) inherit(opSettings.linkVM, 'links');\n        if (opSettings.metadataVM) inherit(opSettings.metadataVM, 'metadata');\n        if (opSettings.coloringVM) inherit(opSettings.coloringVM, 'color');\n        if (opSettings.enabledVM) inherit(opSettings.enabledVM, 'enabled');\n\n        if (opSettings.filterVM) {\n            //copy filter settings\n            newViewModel.filters.deserialize(JSON.parse(opSettings.filterVM.filters.serialize()));\n        }\n\n        if (opSettings.legendVM) {\n            newViewModel.legendItems = JSON.parse(JSON.stringify(opSettings.legendVM.legendItems));\n        }\n\n        if (opSettings.gradientVM) {\n            newViewModel.gradient = new Gradient();\n            newViewModel.gradient.deserialize(opSettings.gradientVM.gradient.serialize());\n        }\n\n        newViewModel.name = layerName;\n        this.viewModels.push(newViewModel);\n        newViewModel.updateGradient();\n        return newViewModel;\n    }\n}\n","import { Component, Input, OnChanges } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { ViewModel } from '../classes';\n\n@Component({\n    selector: 'sidebar',\n    templateUrl: './sidebar.component.html',\n    styleUrls: ['./sidebar.component.scss'],\n})\nexport class SidebarComponent implements OnChanges {\n    @Input() viewModel: ViewModel;\n    public reloadToggle: boolean = true;\n\n    constructor(public dataService: DataService) {}\n\n    ngOnChanges(): void {\n        this.reloadToggle = false;\n        setTimeout(() => (this.reloadToggle = true));\n    }\n}\n","<div class=\"sidebar\">\n    <div *ngIf=\"viewModel\">\n        <div *ngIf=\"viewModel.sidebarContentType === 'search'\">\n            <app-search-and-multiselect [viewModel]=\"viewModel\"></app-search-and-multiselect>\n        </div>\n        <div *ngIf=\"viewModel.sidebarContentType === 'layerUpgrade' && reloadToggle\">\n            <div *ngIf=\"viewModel.versionChangelog && viewModel.compareTo\">\n                <layer-upgrade [viewModel]=\"viewModel\"></layer-upgrade>\n            </div>\n        </div>\n    </div>\n</div>\n","export { RenderableMatrix } from './renderable-matrix';\nexport { RenderableTactic } from './renderable-tactic';\nexport { RenderableTechnique } from './renderable-technique';\n","import { Matrix } from '../../classes/stix';\nimport { RenderableTactic } from './renderable-tactic';\nimport { ViewModel } from '../../classes';\n\nexport class RenderableMatrix {\n    public matrix: Matrix;\n    public tactics: RenderableTactic[] = [];\n\n    public get height() {\n        let heights = this.tactics.map(function (tactic: RenderableTactic) {\n            return tactic.height;\n        });\n        return Math.max(...heights);\n    }\n\n    constructor(matrix: Matrix, viewModel: ViewModel, renderConfig: any) {\n        this.matrix = matrix;\n        let filteredTactics = viewModel.filterTactics(matrix.tactics, matrix);\n        for (let tactic of filteredTactics) {\n            this.tactics.push(new RenderableTactic(tactic, matrix, viewModel, renderConfig));\n        }\n    }\n}\n","import { Matrix, Tactic } from '../../classes/stix';\nimport { RenderableTechnique } from './renderable-technique';\nimport { ViewModel } from '../../classes';\n\nexport class RenderableTactic {\n    public readonly tactic: Tactic;\n    public readonly techniques: RenderableTechnique[] = [];\n    public readonly subtechniques: RenderableTechnique[] = [];\n    public height: number;\n\n    constructor(tactic: Tactic, matrix: Matrix, viewModel: ViewModel, renderConfig: any) {\n        this.tactic = tactic;\n        let filteredTechniques = viewModel.sortTechniques(viewModel.filterTechniques(tactic.techniques, tactic, matrix), tactic);\n        let yPosition = 1; // start at 1 to make space for tactic label\n        for (let technique of filteredTechniques) {\n            let techniqueVM = viewModel.getTechniqueVM(technique, tactic);\n            let filteredSubtechniques = viewModel.filterTechniques(technique.subtechniques, tactic, matrix);\n\n            let showSubtechniques =\n                renderConfig.showSubtechniques == 'all' || (renderConfig.showSubtechniques == 'expanded' && techniqueVM.showSubtechniques);\n\n            this.techniques.push(new RenderableTechnique(yPosition++, technique, tactic, matrix, viewModel, showSubtechniques));\n\n            if (filteredSubtechniques.length > 0 && showSubtechniques) {\n                for (let subtechnique of filteredSubtechniques) {\n                    this.subtechniques.push(new RenderableTechnique(yPosition++, subtechnique, tactic, matrix, viewModel, renderConfig));\n                }\n            }\n        }\n        this.height = yPosition;\n    }\n}\n","import { Matrix, Tactic, Technique } from '../../classes/stix';\nimport { TechniqueVM, ViewModel } from '../../classes';\nimport tinycolor from 'tinycolor2';\n\nexport class RenderableTechnique {\n    public readonly yPosition: number;\n    public readonly technique: Technique;\n    public readonly tactic: Tactic;\n    public readonly matrix: Matrix;\n    public readonly showSubtechniques;\n    public readonly viewModel: ViewModel;\n\n    constructor(yPosition, technique: Technique, tactic: Tactic, matrix: Matrix, viewModel: ViewModel, showSubtechniques = false) {\n        this.yPosition = yPosition;\n        this.technique = technique;\n        this.tactic = tactic;\n        this.matrix = matrix;\n        this.viewModel = viewModel;\n        this.showSubtechniques = showSubtechniques;\n    }\n\n    public get fill() {\n        if (this.viewModel.hasTechniqueVM(this.technique, this.tactic)) {\n            let techniqueVM: TechniqueVM = this.viewModel.getTechniqueVM(this.technique, this.tactic);\n            if (!techniqueVM.enabled) return 'white';\n            if (techniqueVM.color) return techniqueVM.color;\n            if (this.viewModel.layout.showAggregateScores && techniqueVM.aggregateScoreColor) return techniqueVM.aggregateScoreColor;\n            if (techniqueVM.score) return techniqueVM.scoreColor;\n        }\n        return null; //default\n    }\n\n    public get textColor() {\n        if (this.viewModel.hasTechniqueVM(this.technique, this.tactic)) {\n            let techniqueVM: TechniqueVM = this.viewModel.getTechniqueVM(this.technique, this.tactic);\n            if (!techniqueVM.enabled) return '#aaaaaa';\n        }\n        if (this.fill) {\n            return tinycolor.mostReadable(this.fill, ['white', 'black']); //default;\n        }\n        return null;\n    }\n\n    public get text() {\n        let text = [];\n        if (this.viewModel.layout.showID) text.push(this.technique.attackID);\n        if (this.viewModel.layout.showName) text.push(this.technique.name);\n        return text.join(': ');\n    }\n}\n","import { Component, OnInit, Inject, ViewEncapsulation } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ViewModel } from '../classes';\nimport { ConfigService } from '../services/config.service';\nimport { DataService } from '../services/data.service';\nimport { RenderableMatrix, RenderableTactic, RenderableTechnique } from './renderable-objects';\nimport tinycolor from 'tinycolor2';\nimport * as is from 'is_js';\ndeclare var d3: any; //d3js\n\n@Component({\n    selector: 'app-svg-export',\n    templateUrl: './svg-export.component.html',\n    styleUrls: ['./svg-export.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class SvgExportComponent implements OnInit {\n    // vm to render\n    public viewModel: ViewModel;\n\n    // SVG configuration\n    public config: any = {};\n    public svgConfigDefaults: any = {\n        width: 11,\n        height: 8.5,\n        headerHeight: 1,\n        unit: 'in',\n        orientation: 'landscape',\n        size: 'letter',\n        fontSize: 4,\n        autofitText: true,\n        maxTextSize: Infinity,\n        theme: 'light',\n        showSubtechniques: 'expanded',\n        font: 'sans-serif',\n        tableBorderColor: '#6B7279',\n        showHeader: true,\n        legendDocked: true,\n        legendX: 0,\n        legendY: 0,\n        legendWidth: 2,\n        legendHeight: 1,\n        showLegend: true,\n        showGradient: true,\n        showFilters: true,\n        showAbout: true,\n        showDomain: true,\n        showAggregate: false,\n    };\n\n    // SVG settings\n    public currentDropdown: string = null;\n    public hasScores: boolean;\n    private svgElementID: string = 'svgInsert_tmp';\n    private buildSVGDebounce: boolean = false;\n\n    // counter for unit change ui element\n    public unitEnum: number = 0;\n\n    // counter for theme change ui element\n    public themeEnum: number = 0;\n\n    // browser compatibility\n    public get isIE(): boolean {\n        return is.ie();\n    }\n\n    // getters for visibility of SVG header sections\n    public get hasName(): boolean {\n        return this.viewModel.name.length > 0;\n    }\n    public get hasDomain(): boolean {\n        return this.viewModel.domainVersionID.length > 0;\n    }\n    public get hasDescription(): boolean {\n        return this.viewModel.description.length > 0;\n    }\n    public get hasLegendItems(): boolean {\n        return this.viewModel.legendItems.length > 0;\n    }\n\n    // getters for user preferences\n    public get showName(): boolean {\n        return this.config.showAbout && this.hasName && this.config.showHeader;\n    }\n    public get showDomain(): boolean {\n        return this.config.showDomain && this.hasDomain && this.config.showHeader;\n    }\n    public get showAggregate(): boolean {\n        return this.viewModel.layout.showAggregateScores && this.config.showHeader;\n    }\n    public get showDescription(): boolean {\n        return this.config.showAbout && this.hasDescription && this.config.showHeader;\n    }\n    public get showFilters(): boolean {\n        return this.config.showFilters && this.config.showHeader;\n    }\n    public get showGradient(): boolean {\n        return this.config.showGradient && this.hasScores && this.config.showHeader;\n    }\n    public get showLegend(): boolean {\n        return this.config.showLegend && this.hasLegendItems;\n    }\n    public get showLegendContainer(): boolean {\n        return this.showLegend || this.showGradient;\n    }\n    public get showLegendInHeader(): boolean {\n        return this.config.legendDocked;\n    }\n\n    constructor(\n        private dialogRef: MatDialogRef<SvgExportComponent>, // needed for mat-dialog-close\n        private configService: ConfigService,\n        private dataService: DataService,\n        @Inject(MAT_DIALOG_DATA) public data\n    ) {\n        this.config = this.svgConfigDefaults;\n    }\n\n    ngOnInit(): void {\n        this.viewModel = this.data.vm;\n        this.svgElementID = 'svgInsert' + this.viewModel.uid;\n\n        let self = this;\n        //determine if the layer has any scores\n        let visibleTechniques = self.viewModel.getVisibleTechniquesList();\n        for (let unionID of visibleTechniques) {\n            let techniqueVM = self.viewModel.getTechniqueVM_id(unionID);\n            if (techniqueVM.score != '') {\n                self.hasScores = true;\n                break; // at least one score found\n            }\n        }\n\n        // dynamic legend height according to content\n        let legendSectionCount = 0;\n        if (self.hasScores) legendSectionCount++;\n        if (self.hasLegendItems) legendSectionCount++;\n        self.config.legendHeight = 0.5 * legendSectionCount;\n\n        //initial legend position for undocked legend\n        this.config.legendX = this.config.width - this.config.legendWidth - 0.1;\n        this.config.legendY = this.config.height - this.config.legendHeight - 0.1;\n        if (this.config.showHeader) this.config.legendY -= this.config.headerHeight;\n\n        //initial table border color\n        if (this.config.theme === 'light') {\n            this.config.tableBorderColor = '#6B7279';\n        } else if (this.config.theme === 'dark') {\n            this.config.tableBorderColor = '#4c4c68';\n        }\n\n        // build SVG at end of fn queue so page can render before build\n        window.setTimeout(function () {\n            self.buildSVG(self);\n        }, 0);\n    }\n\n    /** build the SVG */\n    public buildSVG(self?: any, bypassDebounce: boolean = false): void {\n        if (!self) self = this; // called from somewhere other than ngOnInit\n\n        // debounce\n        if (self.buildSVGDebounce && !bypassDebounce) return;\n        if (!bypassDebounce) {\n            self.buildSVGDebounce = true;\n            window.setTimeout(function () {\n                self.buildSVG(self, true);\n            }, 500);\n            return;\n        }\n        self.buildSVGDebounce = false;\n\n        // set svg size\n        this.setSize(self, self.config.size, self.config.orientation);\n\n        // calculate svg height and width\n        let margin = { top: 5, right: 5, bottom: 5, left: 5 };\n        let width = Math.max(self.toPx(self.config.width, self.config.unit) - (margin.right + margin.left), 10);\n        let svgWidth = width + margin.left + margin.right;\n        let height = Math.max(self.toPx(self.config.height, self.config.unit) - (margin.top + margin.bottom), 10);\n        let svgHeight = height + margin.top + margin.bottom;\n        let headerHeight = Math.max(self.toPx(self.config.headerHeight, self.config.unit), 1);\n\n        // remove previous graphic\n        let svgElement: HTMLElement = document.getElementById(self.svgElementID);\n        svgElement.innerHTML = '';\n\n        // create new SVG\n        let svg = d3\n            .select('#' + self.svgElementID)\n            .append('svg')\n            .attr('width', svgWidth)\n            .attr('height', svgHeight)\n            .attr('xmlns', 'http://www.w3.org/2000/svg')\n            .attr('id', 'svg' + self.viewModel.uid) // SVG download tag\n            .append('g')\n            .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')')\n            .style('font-family', self.config.font);\n\n        // -----------------------------------------------------------------------------\n        // LEGEND\n        // -----------------------------------------------------------------------------\n\n        let legendSection = { title: 'legend', contents: [] };\n\n        // scores and gradient\n        if (self.hasScores && self.showGradient) {\n            legendSection.contents.push({ label: 'gradient', data: self.buildGradient() });\n        }\n\n        // legend items\n        if (self.showLegend) {\n            legendSection.contents.push({ label: 'legend', data: self.buildLegend() });\n        }\n\n        // -----------------------------------------------------------------------------\n        // HEADER\n        // -----------------------------------------------------------------------------\n\n        if (self.config.showHeader) {\n            let headerSections: HeaderSection[] = [];\n\n            // about section\n            if (self.showName || self.showDescription) {\n                let aboutSection = { title: 'about', contents: [] };\n                if (self.showName) aboutSection.contents.push({ label: 'name', data: this.viewModel.name });\n                if (self.showDescription) aboutSection.contents.push({ label: 'description', data: this.viewModel.description });\n                headerSections.push(aboutSection);\n            }\n\n            // domain section\n            let domainSection = { title: 'domain', contents: [] };\n            if (self.showDomain) {\n                let domain = this.dataService.getDomain(this.viewModel.domainVersionID);\n                domainSection.contents.push({ label: 'domain', data: `${domain.name} v${domain.version.number}` });\n            }\n\n            // platform section\n            let platformSection = { title: 'platforms', contents: [] };\n            if (self.showFilters) {\n                let filterData = { label: 'platforms', data: this.viewModel.filters.platforms.selection.join(', ') };\n\n                // domain + platforms\n                if (self.showAggregate) {\n                    domainSection.title = 'domain & platforms';\n                    domainSection.contents.push(filterData);\n                } else {\n                    platformSection.contents.push(filterData);\n                }\n            }\n\n            // add relevant sections to header\n            if (domainSection.contents.length > 0) headerSections.push(domainSection);\n            if (platformSection.contents.length > 0) headerSections.push(platformSection);\n\n            // aggregate scores\n            if (self.showAggregate) {\n                let aggregateSection = { title: 'aggregate', contents: [] };\n                aggregateSection.contents.push({\n                    label: 'function',\n                    data: 'showing aggregate scores using the ' + this.viewModel.layout.aggregateFunction + ' aggregate function',\n                });\n                if (this.viewModel.layout.countUnscored) {\n                    aggregateSection.contents.push({ label: 'unscored', data: 'includes unscored techniques as having a score of 0' });\n                }\n                headerSections.push(aggregateSection);\n            }\n\n            // legend section\n            if (self.showLegendContainer && self.showLegendInHeader) headerSections.push(legendSection);\n\n            // build header\n            let headerGroup = svg.append('g');\n            let headerX = d3\n                .scaleBand()\n                .paddingInner(0.05)\n                .domain(headerSections.map((section) => section.title))\n                .range([0, width]);\n\n            // build header sections\n            for (let section of headerSections) {\n                let sectionGroup = headerGroup.append('g');\n                if (headerSections.length > 1) {\n                    sectionGroup.attr('transform', `translate(${headerX(section.title)}, 0)`);\n                }\n                let headerWidth = headerSections.length == 1 ? width : headerX.bandwidth();\n                self.buildHeaderSection(this, sectionGroup, section, headerWidth, headerHeight);\n            }\n\n            if (headerSections.length == 0) headerHeight = 0; // no header sections\n        } else {\n            //no header\n            headerHeight = 0;\n        }\n\n        // -----------------------------------------------------------------------------\n        // MATRIX\n        // -----------------------------------------------------------------------------\n\n        // build data model\n        let datatable = svg.append('g').attr('transform', 'translate(0,' + (headerHeight + 1) + ')');\n        let domain = self.dataService.getDomain(self.viewModel.domainVersionID);\n        let matrices: RenderableMatrix[] = domain.matrices.map((m) => new RenderableMatrix(m, self.viewModel, self.config));\n\n        // get flattened list of tactics\n        let tactics: RenderableTactic[] = [];\n        for (let matrix of matrices) {\n            tactics = tactics.concat(matrix.tactics);\n        }\n\n        // build tactic columns\n        let xRange = d3\n            .scaleBand()\n            .domain(tactics.map((t) => t.tactic.id))\n            .range([0, width]);\n\n        let yRange = d3\n            .scaleLinear()\n            .domain([\n                d3.max(tactics, function (tactic: RenderableTactic) {\n                    return tactic.height;\n                }),\n                0,\n            ])\n            .range([height - headerHeight, 0]);\n\n        // tactic row background\n        let subtechniqueIndent = Math.min(2 * yRange(1), 15);\n        if (self.viewModel.showTacticRowBackground) {\n            datatable\n                .append('rect')\n                .attr('class', 'tactic-header-background')\n                .attr('width', width)\n                .attr('height', yRange(1))\n                .attr('fill', self.viewModel.tacticRowBackground)\n                .attr('stroke', self.config.tableBorderColor);\n        }\n\n        // tactic names\n        let tacticGroups = datatable\n            .append('g')\n            .selectAll('g')\n            .data(tactics)\n            .enter()\n            .append('g')\n            .attr('class', function (tactic: RenderableTactic) {\n                return 'tactic ' + tactic.tactic.shortname;\n            })\n            .attr('transform', function (tactic: RenderableTactic) {\n                return `translate(${xRange(tactic.tactic.id)}, 0)`;\n            });\n\n        // add technique groups to tactic column\n        let techniqueGroups = tacticGroups\n            .append('g')\n            .attr('class', 'techniques')\n            .selectAll('g')\n            .data(function (tactic: RenderableTactic) {\n                return tactic.techniques;\n            })\n            .enter()\n            .append('g')\n            .attr('class', function (technique: RenderableTechnique) {\n                return 'technique ' + technique.technique.attackID;\n            })\n            .attr('transform', function (technique: RenderableTechnique) {\n                return `translate(0, ${yRange(technique.yPosition)})`;\n            });\n\n        // add sub-technique groups to tactic column\n        let subtechniqueGroups = tacticGroups\n            .append('g')\n            .attr('class', 'subtechniques')\n            .selectAll('g')\n            .data(function (tactic: RenderableTactic) {\n                return tactic.subtechniques;\n            })\n            .enter()\n            .append('g')\n            .attr('class', function (subtechnique: RenderableTechnique) {\n                return 'subtechnique ' + subtechnique.technique.attackID;\n            })\n            .attr('transform', function (subtechnique: RenderableTechnique) {\n                return `translate(${subtechniqueIndent}, ${yRange(subtechnique.yPosition)})`;\n            });\n\n        // add cell style to techniques\n        techniqueGroups\n            .append('rect')\n            .attr('class', 'cell')\n            .attr('height', yRange(1))\n            .attr('width', xRange.bandwidth())\n            .attr('fill', function (technique: RenderableTechnique) {\n                if (technique.fill !== null) {\n                    return technique.fill;\n                } else {\n                    if (self.config.theme === 'light') {\n                        return '#ffffff';\n                    } else {\n                        return '#2e2e3f';\n                    }\n                }\n            })\n            .attr('stroke', self.config.tableBorderColor);\n\n        // add cell style to sub-techniques\n        subtechniqueGroups\n            .append('rect')\n            .attr('class', 'cell')\n            .attr('height', yRange(1))\n            .attr('width', xRange.bandwidth() - subtechniqueIndent)\n            .attr('fill', function (subtechnique: RenderableTechnique) {\n                if (subtechnique.fill !== null) {\n                    return subtechnique.fill;\n                } else {\n                    if (self.config.theme === 'light') {\n                        return '#ffffff';\n                    } else {\n                        return '#2e2e3f';\n                    }\n                }\n            })\n            .attr('stroke', self.config.tableBorderColor);\n\n        // add styling for sub-technique sidebar\n        let sidebarWidth: number = 3;\n        subtechniqueGroups\n            .append('rect')\n            .attr('class', 'cell')\n            .attr('height', yRange(1))\n            .attr('width', sidebarWidth)\n            .attr('transform', `translate(${-sidebarWidth}, 0)`)\n            .attr('fill', self.config.tableBorderColor)\n            .attr('stroke', self.config.tableBorderColor);\n        techniqueGroups\n            .append('polygon')\n            .attr('class', 'sidebar')\n            .attr('transform', `translate(0, ${yRange(1)})`)\n            .attr('points', function (technique: RenderableTechnique) {\n                return [\n                    '0,0',\n                    `${subtechniqueIndent - sidebarWidth},0`,\n                    `${subtechniqueIndent - sidebarWidth},${Math.min(\n                        subtechniqueIndent - sidebarWidth,\n                        yRange(self.viewModel.filterTechniques(technique.technique.subtechniques, technique.tactic, technique.matrix).length)\n                    )}`,\n                ].join(' ');\n            })\n            .attr('fill', self.config.tableBorderColor)\n            .attr('visibility', function (technique: RenderableTechnique) {\n                return technique.technique.subtechniques.length > 0 && technique.showSubtechniques ? 'visible' : 'hidden';\n            });\n\n        // -----------------------------------------------------------------------------\n        // CELL TEXT\n        // -----------------------------------------------------------------------------\n\n        // track smallest optimal font size\n        let minFontSize = Infinity;\n\n        // set technique font size\n        techniqueGroups\n            .append('text')\n            .text(function (technique: RenderableTechnique) {\n                return technique.text;\n            })\n            .attr('font-size', function (technique: RenderableTechnique) {\n                const fontSize = self.optimalFontSize(this, technique.text, xRange.bandwidth(), yRange(1), false);\n                if (fontSize < minFontSize) minFontSize = fontSize;\n                return fontSize;\n            })\n            .attr('fill', function (technique: RenderableTechnique) {\n                if (technique.textColor !== null) {\n                    return technique.textColor;\n                } else {\n                    if (self.config.theme === 'light') {\n                        return '#000000';\n                    } else {\n                        return '#ffffff';\n                    }\n                }\n            })\n            .each(function () {\n                self.verticalAlignCenter(this);\n            });\n\n        // set sub-technique font size\n        subtechniqueGroups\n            .append('text')\n            .text(function (subtechnique: RenderableTechnique) {\n                return subtechnique.text;\n            })\n            .attr('font-size', function (subtechnique: RenderableTechnique) {\n                const fontSize = self.optimalFontSize(this, subtechnique.text, xRange.bandwidth() - subtechniqueIndent, yRange(1), false);\n                if (fontSize < minFontSize) minFontSize = fontSize;\n                return fontSize;\n            })\n            .attr('fill', function (subtechnique: RenderableTechnique) {\n                if (subtechnique.textColor !== null) {\n                    return subtechnique.textColor;\n                } else {\n                    if (self.config.theme === 'light') {\n                        return '#000000';\n                    } else {\n                        return '#ffffff';\n                    }\n                }\n            })\n            .each(function () {\n                self.verticalAlignCenter(this);\n            });\n\n        // set technique and sub-technique groups to the same font size\n        this.config.maxTextSize = minFontSize;\n        if (this.config.autofitText) {\n            this.config.fontSize = minFontSize.toFixed(2);\n        }\n        if (this.config.autofitText) {\n            techniqueGroups.select('text').attr('font-size', minFontSize);\n            subtechniqueGroups.select('text').attr('font-size', minFontSize);\n        } else {\n            techniqueGroups.select('text').attr('font-size', this.config.fontSize);\n            subtechniqueGroups.select('text').attr('font-size', this.config.fontSize);\n        }\n\n        // track the smallest optimal font size for tactics\n        let minTacticFontSize = Infinity;\n\n        // set tactic font size\n        let tacticLabels = tacticGroups.append('g').attr('class', 'tactic-label');\n        tacticLabels\n            .append('text')\n            .text(function (tactic: RenderableTactic) {\n                return tactic.tactic.name;\n            })\n            .attr('font-size', function (tactic: RenderableTactic) {\n                const fontSize = self.optimalFontSize(this, tactic.tactic.name, xRange.bandwidth(), yRange(1), true);\n                if (fontSize < minTacticFontSize) minTacticFontSize = fontSize;\n                return fontSize;\n            })\n            .attr('fill', function (tactic: RenderableTactic) {\n                if (self.viewModel.showTacticRowBackground) return tinycolor.mostReadable(self.viewModel.tacticRowBackground, ['white', 'black']);\n                else return self.config.theme === 'light' ? 'black' : 'white';\n            })\n            .attr('font-weight', 'bold')\n            .each(function () {\n                self.verticalAlignCenter(this);\n            });\n\n        // set tactic labels to same font size\n        tacticLabels.select('text').attr('font-size', minTacticFontSize);\n\n        // -----------------------------------------------------------------------------\n        // UNDOCKED LEGEND\n        // -----------------------------------------------------------------------------\n\n        if (self.showLegendContainer && !self.showLegendInHeader) {\n            // calculate legend height and width\n            let legendX = Math.max(self.toPx(self.config.legendX, self.config.unit), 0);\n            let legendY = Math.max(self.toPx(self.config.legendY, self.config.unit), 0);\n            let legendWidth = Math.max(self.toPx(self.config.legendWidth, self.config.unit), 10);\n            let legendHeight = Math.max(self.toPx(self.config.legendHeight, self.config.unit), 10);\n\n            let legendGroup = datatable.append('g').attr('transform', `translate(${legendX}, ${legendY})`);\n            self.buildHeaderSection(this, legendGroup, legendSection, legendWidth, legendHeight);\n        }\n    }\n\n    /**\n     * Build the box for the given header section\n     * @param self      this DOM node\n     * @param group     outer group element\n     * @param section   header section\n     * @param width     width of the cell\n     * @param height    height of the cell\n     */\n    private buildHeaderSection(self: any, group: any, section: HeaderSection, width: number, height: number): void {\n        let padding = 5;\n        height -= 2 * padding; // adjust height for padding\n\n        // header section group\n        let boxGroup = group.append('g').attr('transform', `translate(0,${padding})`);\n\n        // create outer box\n        boxGroup\n            .append('rect')\n            .attr('class', 'header-box')\n            .attr('width', width)\n            .attr('height', height)\n            .attr('stroke', self.config.theme === 'light' ? 'black' : '#4c4c68')\n            .attr('fill', self.config.theme === 'light' ? 'white' : '#1a1a23')\n            .attr('rx', padding); // rounded corner\n\n        // box title\n        let boxTitle = boxGroup\n            .append('text')\n            .attr('class', 'header-box-label')\n            .text(section.title)\n            .attr('x', 2 * padding)\n            .attr('font-size', 12)\n            .attr('fill', self.config.theme === 'light' ? 'black' : 'white')\n            .each(function () {\n                self.verticalAlignCenter(this);\n            });\n\n        // add cover mask so that the box lines crop around the text\n        let bbox = boxTitle.node().getBBox();\n        let coverPadding = 2;\n        boxGroup\n            .append('rect')\n            .attr('class', 'label-cover')\n            .attr('x', bbox.x - coverPadding)\n            .attr('y', bbox.y - coverPadding)\n            .attr('width', bbox.width + 2 * coverPadding)\n            .attr('height', bbox.height + 2 * coverPadding)\n            .attr('fill', self.config.theme === 'light' ? 'white' : '#1a1a23')\n            .attr('rx', padding); // rounded corner\n        boxTitle.raise(); // push title to front\n\n        // add content to box\n        let boxContentGroup = boxGroup\n            .append('g')\n            .attr('class', 'header-box-content')\n            .attr('fill', self.config.theme === 'light' ? 'black' : 'white')\n            .attr('transform', `translate(${padding}, 0)`);\n\n        let yRange = d3\n            .scaleBand()\n            .padding(0.05)\n            .align(0.5)\n            .domain(\n                section.contents.map(function (content) {\n                    return content.label;\n                })\n            )\n            .range([0, height]);\n\n        // add each subsection to box\n        let contentWidth = width - 2 * padding;\n        for (let i = 0; i < section.contents.length; i++) {\n            let subsection = section.contents[i];\n            let contentGroup = boxContentGroup.append('g').attr('transform', `translate(0, ${yRange(subsection.label)})`);\n\n            if (typeof subsection.data == 'string') {\n                // add text to contentGroup\n                contentGroup\n                    .append('text')\n                    .text(subsection)\n                    .attr('font-size', function () {\n                        return self.optimalFontSize(this, subsection.data as string, contentWidth, yRange.bandwidth(), false, 12);\n                    })\n                    .each(function () {\n                        self.verticalAlignCenter(this);\n                    });\n            } else {\n                // call callback to add complex data to contentGroup\n                subsection.data(self, contentGroup, contentWidth);\n            }\n            if (i != section.contents.length - 1) {\n                // add dividing line\n                contentGroup\n                    .append('line')\n                    .attr('x1', 0)\n                    .attr('x2', contentWidth)\n                    .attr('y1', yRange.bandwidth())\n                    .attr('y2', yRange.bandwidth())\n                    .attr('stroke', '#dddddd');\n            }\n        }\n    }\n\n    /** Callback function to build the legend section */\n    private buildLegend(): Function {\n        return function (self, group, width) {\n            // legend colors\n            let colorScale = d3\n                .scaleOrdinal()\n                .domain(\n                    self.viewModel.legendItems.map(function (item) {\n                        return item.label;\n                    })\n                )\n                .range(\n                    self.viewModel.legendItems.map(function (item) {\n                        return item.color;\n                    })\n                );\n\n            // legend svg group\n            group\n                .append('g')\n                .attr('transform', 'translate(0, 5)')\n                .call(\n                    d3\n                        .legendColor()\n                        .shapeWidth(width / self.viewModel.legendItems.length)\n                        .shapePadding(0)\n                        .shape('rect')\n                        .orient('horizontal')\n                        .scale(colorScale)\n                        .labelOffset(2)\n                );\n        };\n    }\n\n    /** Callback function to build the gradient section */\n    private buildGradient(): Function {\n        return function (self, group, width) {\n            // build gradient\n            let gradient = [];\n            for (let i = 0; i < self.viewModel.gradient.colors.length; i++) {\n                let percent = i / (self.viewModel.gradient.colors.length - 1);\n                gradient.push(d3.interpolateNumber(self.viewModel.gradient.minValue, self.viewModel.gradient.maxValue)(percent));\n            }\n\n            // build color scale\n            let colorScale = d3\n                .scaleLinear()\n                .domain(gradient)\n                .range(self.viewModel.gradient.colors.map((color) => color.color));\n\n            // gradient svg group\n            let nCells = gradient.length * 2;\n            group\n                .append('g')\n                .attr('transform', 'translate(0, 5)')\n                .call(\n                    d3\n                        .legendColor()\n                        .shapeWidth(width / nCells)\n                        .shapePadding(0)\n                        .cells(nCells)\n                        .shape('rect')\n                        .orient('horizontal')\n                        .scale(colorScale)\n                        .labelOffset(2)\n                        .labelFormat(d3.format('0.02r'))\n                );\n        };\n    }\n\n    /**\n     * Set width and height based on selected size and orientaiton\n     * @param {any}    self this DOM node\n     * @param {string} size dimensions\n     * @param {string} orientation  portrait or landscape\n     */\n    private setSize(self: any, size: string, orientation: string) {\n        const ratioMap = {\n            letter: { portrait: [8.5, 11], landscape: [11, 8.5] },\n            legal: { portrait: [8.5, 14], landscape: [14, 8.5] },\n            small: { portrait: [11, 17], landscape: [17, 11] },\n            medium: { portrait: [18, 24], landscape: [24, 18] },\n            large: { portrait: [24, 36], landscape: [36, 24] },\n        };\n\n        if (size !== 'custom') {\n            const [w, h] = ratioMap[size][orientation];\n            self.config.width = w;\n            self.config.height = h;\n        }\n    }\n\n    /**\n     * Set the vertical alignment of the given node to center\n     * @param self this DOM node\n     * @param fontSize the font size of the node\n     */\n    private verticalAlignCenter(self: any, fontSize: any = null) {\n        if (self.children && self.children.length > 0) {\n            for (let child of self.children) {\n                this.verticalAlignCenter(child, self.getAttribute('font-size'));\n            }\n        } else {\n            // transform by half the font size - 1/2px for proper centering\n            fontSize = fontSize ? fontSize : self.getAttribute('font-size');\n            if (fontSize.endsWith('px')) fontSize = Number(fontSize.split('px')[0]);\n            let yPosition = self.hasAttribute('y') ? Number(self.getAttribute('y')) : 0;\n            let newYPosition = yPosition + Math.floor(fontSize * 0.3);\n            d3.select(self).attr('y', newYPosition);\n        }\n    }\n\n    /**\n     * Divide distance into divisions equidistant anchor points S.T they all have equal\n     * padding from each other and the beginning and end of the distance\n     * @param  distance  distance to divide\n     * @param  divisions number of divisions\n     * @return number[] where each number corresponds to a division-center offset\n     */\n    private getSpacing(distance: number, divisions: number): number[] {\n        let res = [];\n        let spacing = (distance - 1) / (divisions * 2);\n        for (let i = 1; i <= divisions * 2; i += 2) {\n            res.push(1 + spacing * i);\n        }\n        return res;\n    }\n\n    /**\n     * Insert line breaks\n     * @param self      this DOM node\n     * @param words     array of words to space\n     * @param padding   element padding\n     * @param spacing   distance to space text inside element\n     * @param center    center the text?\n     * @param width     width of the cell\n     * @param height    height of the cell\n     */\n    private insertLineBreaks(self: any, words: string[], padding: number, spacing: number, center: boolean, width: number, height: number) {\n        let element = d3.select(self);\n\n        // clear previous content\n        element.text('');\n        while (self.firstChild) self.removeChild(self.firstChild);\n\n        let division = this.getSpacing(spacing, words.length);\n        for (let i = 0; i < words.length; i++) {\n            let tspan = element.append('tspan').text(words[i]);\n            if (center) tspan.attr('text-anchor', 'middle');\n            tspan.attr('x', center ? width / 2 : padding).attr('y', (height - spacing) / 2 + division[i]);\n        }\n    }\n\n    /**\n     * Find the font size for the given array of words to be broken onto\n     * 1 line each\n     * @param self          this DOM node\n     * @param text          text to render\n     * @param width         width of the cell\n     * @param height        height of the cell\n     * @param center        center the text?\n     * @param maxFontSize   maximum font size, default 12\n     * @returns the largest possible font size\n     */\n    private findSize(self: any, words: string[], width: number, height: number, center: boolean, maxFontSize: number = 12): number {\n        let padding = 4;\n        if (!this.config.autofitText) {\n            padding = 1;\n        }\n\n        // break into multiple lines\n        let distance = Math.min(height, (maxFontSize + 3) * words.length);\n        this.insertLineBreaks(self, words, padding, distance, center, width, height);\n\n        // find text size to fit height of cell\n        let textHeight = Math.min(distance / words.length, height) * 0.8;\n\n        // find text size to fit width of cell\n        let longestWordLength = -Infinity;\n        for (let word of words) {\n            longestWordLength = Math.max(longestWordLength, word.length);\n        }\n        let textWidth = ((width - 2 * padding) / longestWordLength) * 1.45;\n\n        return Math.min(maxFontSize, textHeight, textWidth);\n    }\n\n    /**\n     * Calculate the optimal font size for the given text in the given\n     * sizing parameters\n     * @param self          this DOM node\n     * @param text          text to render\n     * @param width         width of the cell\n     * @param height        height of the cell\n     * @param center        center the text?\n     * @param maxFontSize   maximum font size, default 12\n     * @returns the size in pixels\n     */\n    private optimalFontSize(self: any, text: string, width: number, height: number, center: boolean, maxFontSize: number = 12): number {\n        let words = text.split(' ');\n        let optimalSize = -Infinity;\n        let wordArrangement = [];\n\n        // too many combinations causes page lagging\n        let num_breaks = 1;\n        if (words.length < 20) num_breaks = 3;\n        else if (words.length < 50) num_breaks = 2;\n\n        let breaks = Array.from(this.findBreaks(words.length, num_breaks));\n        for (let b of breaks) {\n            // find the best option for proposed placements generated\n            // b is the binary representation of newline locations (e.g. 001011)\n            // where 1 is a newline and 0 is a space\n            let wordList = [];\n\n            for (let i = 0; i < b.length; i++) {\n                if (b[i] === '0') {\n                    // join with space\n                    if (wordList.length == 0) wordList.push(words[i]);\n                    else wordList[wordList.length - 1] = wordList[wordList.length - 1] + ' ' + words[i];\n                } else {\n                    // join with newline\n                    wordList.push(words[i]);\n                }\n            }\n\n            let size = this.findSize(self, wordList, width, height, center, maxFontSize);\n            if (size > optimalSize) {\n                optimalSize = size;\n                wordArrangement = wordList;\n            }\n            if (size == maxFontSize) break; // max font size found, stop search\n        }\n\n        this.findSize(self, wordArrangement, width, height, center, maxFontSize);\n        return optimalSize;\n    }\n\n    /**\n     * Determine placement of line breaks\n     * @param spaces number of spaces in the words\n     * @param breaks number of breaks to insert\n     * @returns the placement of line breaks represented as [01]+ where 1=break and 0=space\n     */\n    private findBreaks(spaces: number, breaks: number): Set<string> {\n        let placement = new Set<string>();\n        let initial_breaks = [];\n        while (initial_breaks.length < spaces) initial_breaks.push(0);\n        placement.add(initial_breaks.join(''));\n\n        function recurse(currPlacement, depth, breaks) {\n            for (let i = 0; i < currPlacement.length; i++) {\n                let p = JSON.parse(JSON.stringify(currPlacement));\n                p[i] = 1;\n                placement.add(p.join(''));\n                if (depth < breaks - 1) recurse(p, depth + 1, breaks);\n            }\n        }\n        recurse(initial_breaks, 0, breaks);\n        return placement;\n    }\n\n    /**\n     * Convert any length in various units to pixels\n     * @param  quantity what length\n     * @param  unit     which unit system (in, cm, px, em, pt)\n     * @return          that length in pixels\n     */\n    private toPx(quantity: number, unit: string): number {\n        let factor: any;\n        if (unit == 'in') factor = 96;\n        else if (unit == 'cm') factor = 3.779375 * 10;\n        else if (unit == 'px') factor = 1;\n        else if (unit == 'em') factor = 16;\n        else if (unit == 'pt') factor = 1.33;\n        else {\n            console.error('unknown unit', unit);\n            factor = 0;\n        }\n        return quantity * factor;\n    }\n\n    /** Download the SVG */\n    public downloadSVG(): void {\n        // get SVG element\n        let svgElement = document.getElementById('svg' + this.viewModel.uid);\n        svgElement.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n\n        // generate filename\n        let filename = this.viewModel.name.split(' ').join('_');\n        // remove all non alphanumeric characters\n        filename = filename.replace(/\\W/g, '') + '.svg';\n\n        // build SVG blob\n        const preface = '<?xml version=\"1.0\" standalone=\"no\"?>\\r\\n';\n        const svgData = new XMLSerializer().serializeToString(svgElement);\n        const svgBlob = new Blob([preface, svgData], { type: 'image/svg+xml;charset=utf-8' });\n\n        // download\n        if (this.isIE) {\n            const nav = window.navigator as any;\n            nav.msSaveOrOpenBlob(svgBlob, filename);\n        } else {\n            const downloadLink = document.createElement('a');\n            downloadLink.download = filename;\n            downloadLink.href = URL.createObjectURL(svgBlob);\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n            document.body.removeChild(downloadLink);\n        }\n    }\n}\n\nclass HeaderSectionContent {\n    label: string;\n    // either string to display in box, or a callback to create complex content in the box\n    // callback function option takes params node, width, height, and appends data to node\n    data: string | Function;\n}\n\nclass HeaderSection {\n    title: string;\n    contents: HeaderSectionContent[];\n}\n","<div class=\"controlsContainer\">\n    <ul class=\"control-sections\">\n        <li class=\"iewarning\" *ngIf=\"isIE\">\n            Warning: this interface is not fully compatible with your browser. For best results please switch to Edge, Chrome, or Firefox.\n        </li>\n        <li>\n            <div class=\"control-row-item noselect\">\n                <!-- {{config.theme}} -->\n                <div\n                    class=\"control-row-button\"\n                    (click)=\"themeEnum = (themeEnum + 1) % 2; config.theme = ['light', 'dark'][themeEnum]; buildSVG()\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"theme\">\n                    <span *ngIf=\"config.theme === 'light'\" class=\"material-icons\">nightlight_round</span>\n                    <span *ngIf=\"config.theme === 'dark'\" class=\"material-icons\">wb_sunny</span>\n                </div>\n            </div>\n        </li>\n        <li>\n            <div class=\"control-row-item noselect\">\n                <!-- {{config.unit}} -->\n                <div\n                    class=\"control-row-button\"\n                    (click)=\"unitEnum = (unitEnum + 1) % 3; config.unit = ['in', 'cm', 'px'][unitEnum]; buildSVG()\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"toggle measurement unit\">\n                    <svg fill=\"currentColor\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <text x=\"4px\" y=\"50%\" dominant-baseline=\"middle\" style=\"font-size: 14px; font-weight: bold; font-family: monospace\">\n                            {{ config.unit }}\n                        </text>\n                    </svg>\n                </div>\n            </div>\n        </li>\n        <li>\n            <div class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    (click)=\"currentDropdown = currentDropdown !== 'imgsize' ? 'imgsize' : null\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"image size\">\n                    <span class=\"material-icons\">photo_size_select_large</span>\n                </div>\n                <div class=\"dropdown-container size left\" *ngIf=\"currentDropdown === 'imgsize'\">\n                    <ul>\n                        <li>\n                            <mat-form-field>\n                                <mat-select placeholder=\"orientation\" [(ngModel)]=\"config.orientation\" (selectionChange)=\"buildSVG()\">\n                                    <mat-option value=\"portrait\">Portrait</mat-option>\n                                    <mat-option value=\"landscape\">Landscape</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </li>\n                        <li>\n                            <mat-form-field>\n                                <mat-select matSelect placeholder=\"size\" [(ngModel)]=\"config.size\" (selectionChange)=\"buildSVG()\">\n                                    <mat-option value=\"custom\">Custom</mat-option>\n                                    <mat-option value=\"letter\">US Letter: 8.5x11</mat-option>\n                                    <mat-option value=\"legal\">US Legal: 8.5x14</mat-option>\n                                    <mat-option value=\"small\">Small: 11x17</mat-option>\n                                    <mat-option value=\"medium\">Medium: 18x24</mat-option>\n                                    <mat-option value=\"large\">Large 24x36</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </li>\n                        <li>\n                            <mat-form-field>\n                                <input\n                                    matInput\n                                    class=\"has-suffix\"\n                                    type=\"number\"\n                                    placeholder=\"width\"\n                                    step=\"0.01\"\n                                    [disabled]=\"config.size !== 'custom'\"\n                                    [(ngModel)]=\"config.width\"\n                                    (input)=\"buildSVG()\" />\n                                <span matSuffix [ngClass]=\"{ 'disabled-text': config.size !== 'custom' }\">{{ config.unit }}</span>\n                            </mat-form-field>\n                        </li>\n                        <li>\n                            <mat-form-field>\n                                <input\n                                    matInput\n                                    class=\"has-suffix\"\n                                    type=\"number\"\n                                    placeholder=\"height\"\n                                    step=\"0.01\"\n                                    [disabled]=\"config.size !== 'custom'\"\n                                    [(ngModel)]=\"config.height\"\n                                    (input)=\"buildSVG()\" />\n                                <span matSuffix [ngClass]=\"{ 'disabled-text': config.size !== 'custom' }\">{{ config.unit }}</span>\n                            </mat-form-field>\n                        </li>\n                        <li>\n                            <mat-form-field>\n                                <input\n                                    matInput\n                                    class=\"has-suffix\"\n                                    type=\"number\"\n                                    placeholder=\"header height\"\n                                    step=\"0.01\"\n                                    [disabled]=\"!config.showHeader\"\n                                    [(ngModel)]=\"config.headerHeight\"\n                                    (input)=\"buildSVG()\" />\n                                <span matSuffix [ngClass]=\"{ 'disabled-text': !config.showHeader }\">{{ config.unit }}</span>\n                            </mat-form-field>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n\n            <div class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    (click)=\"currentDropdown = currentDropdown !== 'font' ? 'font' : null\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"text\">\n                    <span class=\"material-icons\">format_size</span>\n                </div>\n                <div class=\"dropdown-container font left\" *ngIf=\"currentDropdown === 'font'\">\n                    <ul>\n                        <li>\n                            <mat-form-field>\n                                <mat-select placeholder=\"font\" [(ngModel)]=\"config.font\" (selectionChange)=\"buildSVG()\">\n                                    <mat-option value=\"serif\">serif</mat-option>\n                                    <mat-option value=\"sans-serif\">sans-serif</mat-option>\n                                    <mat-option value=\"monospace\">monospace</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </li>\n                        <li>\n                            <input\n                                [id]=\"uid + 'autofit'\"\n                                type=\"checkbox\"\n                                class=\"checkbox-custom\"\n                                [(ngModel)]=\"config.autofitText\"\n                                (change)=\"buildSVG()\" />\n                            <label [for]=\"uid + 'autofit'\" class=\"checkbox-custom-label noselect\">auto-fit font size</label>\n                        </li>\n                        <li>\n                            <mat-form-field>\n                                <input\n                                    matInput\n                                    class=\"has-suffix\"\n                                    type=\"number\"\n                                    placeholder=\"font size\"\n                                    step=\"1\"\n                                    [disabled]=\"config.autofitText\"\n                                    [(ngModel)]=\"config.fontSize\"\n                                    (input)=\"buildSVG()\" />\n                            </mat-form-field>\n                            <div class=\"warning\" *ngIf=\"!config.autofitText && config.fontSize > config.maxTextSize\">\n                                <span class=\"material-icons\" alt=\"warning\" style=\"padding-right: 5px\">warning</span>\n                                <label class=\"warning-label\" style=\"font-size: 12px\">cell text is overflowing</label>\n                            </div>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <div class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    (click)=\"showLegendContainer ? (currentDropdown = currentDropdown !== 'legend' ? 'legend' : null) : null\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"legend\"\n                    [style.color]=\"showLegendContainer ? 'inherit' : '#aaaaaa'\">\n                    <span class=\"material-icons\">view_list</span>\n                </div>\n                <div class=\"dropdown-container legend left\" *ngIf=\"currentDropdown === 'legend'\">\n                    <ul>\n                        <li>\n                            <input\n                                [id]=\"uid + 'legendDockedCheckbox'\"\n                                type=\"checkbox\"\n                                class=\"checkbox-custom\"\n                                [(ngModel)]=\"config.legendDocked\"\n                                (change)=\"buildSVG()\" />\n                            <label [for]=\"uid + 'legendDockedCheckbox'\" class=\"checkbox-custom-label noselect\">dock legend in header</label>\n                        </li>\n                        <li>\n                            <mat-form-field>\n                                <input\n                                    matInput\n                                    class=\"has-suffix\"\n                                    type=\"number\"\n                                    placeholder=\"legend X position\"\n                                    [disabled]=\"config.legendDocked\"\n                                    step=\"1\"\n                                    [(ngModel)]=\"config.legendX\"\n                                    (input)=\"buildSVG()\" />\n                                <span matSuffix [ngClass]=\"{ 'disabled-text': config.legendDocked }\">{{ config.unit }}</span>\n                            </mat-form-field>\n                        </li>\n                        <li>\n                            <mat-form-field>\n                                <input\n                                    matInput\n                                    class=\"has-suffix\"\n                                    type=\"number\"\n                                    placeholder=\"legend Y position\"\n                                    [disabled]=\"config.legendDocked\"\n                                    step=\"1\"\n                                    [(ngModel)]=\"config.legendY\"\n                                    (input)=\"buildSVG()\" />\n                                <span matSuffix [ngClass]=\"{ 'disabled-text': config.legendDocked }\">{{ config.unit }}</span>\n                            </mat-form-field>\n                        </li>\n                        <li>\n                            <mat-form-field>\n                                <input\n                                    matInput\n                                    class=\"has-suffix\"\n                                    type=\"number\"\n                                    placeholder=\"legend width\"\n                                    [disabled]=\"config.legendDocked\"\n                                    step=\"1\"\n                                    [(ngModel)]=\"config.legendWidth\"\n                                    (input)=\"buildSVG()\" />\n                                <span matSuffix [ngClass]=\"{ 'disabled-text': config.legendDocked }\">{{ config.unit }}</span>\n                            </mat-form-field>\n                        </li>\n                        <li>\n                            <mat-form-field>\n                                <input\n                                    matInput\n                                    class=\"has-suffix\"\n                                    type=\"number\"\n                                    placeholder=\"legend height\"\n                                    [disabled]=\"config.legendDocked\"\n                                    step=\"1\"\n                                    [(ngModel)]=\"config.legendHeight\"\n                                    (input)=\"buildSVG()\" />\n                                <span matSuffix [ngClass]=\"{ 'disabled-text': config.legendDocked }\">{{ config.unit }}</span>\n                            </mat-form-field>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n            <div class=\"control-row-item\">\n                <div\n                    class=\"control-row-button dropdown noselect\"\n                    (click)=\"currentDropdown = currentDropdown !== 'visibility' ? 'visibility' : null\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"display settings\">\n                    <span class=\"material-icons\">visibility</span>\n                </div>\n                <div class=\"dropdown-container visibility left\" *ngIf=\"currentDropdown === 'visibility'\">\n                    <ul>\n                        <li>\n                            <input\n                                [id]=\"uid + 'checkboxheader'\"\n                                type=\"checkbox\"\n                                class=\"checkbox-custom\"\n                                [(ngModel)]=\"config.showHeader\"\n                                (change)=\"buildSVG()\" />\n                            <label [for]=\"uid + 'checkboxheader'\" class=\"checkbox-custom-label noselect\">show header</label>\n                        </li>\n                        <li>\n                            <input\n                                [id]=\"uid + 'checkboxAbout'\"\n                                type=\"checkbox\"\n                                [disabled]=\"(!hasName && !hasDescription) || !config.showHeader\"\n                                class=\"checkbox-custom\"\n                                [(ngModel)]=\"config.showAbout\"\n                                (change)=\"buildSVG()\" />\n                            <label\n                                [for]=\"uid + 'checkboxAbout'\"\n                                class=\"checkbox-custom-label noselect\"\n                                [class.disabled]=\"(!hasName && !hasDescription) || !config.showHeader\">\n                                show about\n                            </label>\n                        </li>\n                        <li>\n                            <input\n                                [id]=\"uid + 'checkboxDomain'\"\n                                type=\"checkbox\"\n                                [disabled]=\"!hasDomain || !config.showHeader\"\n                                class=\"checkbox-custom\"\n                                [(ngModel)]=\"config.showDomain\"\n                                (change)=\"buildSVG()\" />\n                            <label\n                                [for]=\"uid + 'checkboxDomain'\"\n                                class=\"checkbox-custom-label noselect\"\n                                [class.disabled]=\"!hasDomain || !config.showHeader\">\n                                show domain\n                            </label>\n                        </li>\n                        <li>\n                            <input\n                                [id]=\"uid + 'checkboxfilters'\"\n                                type=\"checkbox\"\n                                class=\"checkbox-custom\"\n                                [disabled]=\"!config.showHeader\"\n                                [(ngModel)]=\"config.showFilters\"\n                                (change)=\"buildSVG()\" />\n                            <label [for]=\"uid + 'checkboxfilters'\" class=\"checkbox-custom-label noselect\" [class.disabled]=\"!config.showHeader\">\n                                show filters\n                            </label>\n                        </li>\n                        <li>\n                            <input\n                                [id]=\"uid + 'checkboxlegend'\"\n                                type=\"checkbox\"\n                                [disabled]=\"!hasLegendItems\"\n                                class=\"checkbox-custom\"\n                                [(ngModel)]=\"config.showLegend\"\n                                (change)=\"buildSVG()\" />\n                            <label [for]=\"uid + 'checkboxlegend'\" class=\"checkbox-custom-label noselect\" [class.disabled]=\"!hasLegendItems\">\n                                show legend\n                            </label>\n                        </li>\n                        <li>\n                            <input\n                                [id]=\"uid + 'checkboxGradient'\"\n                                type=\"checkbox\"\n                                [disabled]=\"!hasScores\"\n                                class=\"checkbox-custom\"\n                                [(ngModel)]=\"config.showGradient\"\n                                (change)=\"buildSVG()\" />\n                            <label [for]=\"uid + 'checkboxGradient'\" class=\"checkbox-custom-label noselect\" [class.disabled]=\"!hasScores\">\n                                show gradient score\n                            </label>\n                        </li>\n                        <li *ngIf=\"configService.getFeature('subtechniques')\" style=\"padding: 0 5px\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"sub-techniques\" [(ngModel)]=\"config.showSubtechniques\" (selectionChange)=\"buildSVG()\">\n                                    <mat-option value=\"all\">show all</mat-option>\n                                    <mat-option value=\"expanded\">show expanded</mat-option>\n                                    <mat-option value=\"none\">show none</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </li>\n                        <li>\n                            <input\n                                [id]=\"uid + 'tableBorderInput'\"\n                                class=\"colorpicker\"\n                                [(colorPicker)]=\"config.tableBorderColor\"\n                                [style.background]=\"config.tableBorderColor\"\n                                cpPosition=\"bottom\"\n                                [cpPresetColors]=\"['#6B7279', '#aaaaaa', '#205B8F', '#B9482D', '#ffffff', '#000000']\"\n                                (colorPickerSelect)=\"buildSVG()\"\n                                [cpOKButton]=\"true\"\n                                [cpOKButtonText]=\"'apply'\"\n                                [cpCancelButton]=\"true\"\n                                style=\"width: 14px; margin: 5px 0 0 5px\" />\n                            <label [for]=\"uid + 'tableBorderInput'\" class=\"noselect\">cell border</label>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </li>\n        <li>\n            <div class=\"control-row-item\">\n                <div\n                    class=\"control-row-button noselect\"\n                    [id]=\"'download-button' + viewModel.uid\"\n                    (click)=\"downloadSVG()\"\n                    matTooltipPosition=\"below\"\n                    matTooltip=\"download SVG\">\n                    <span class=\"material-icons\" alt=\"save layer\">file_download</span>\n                </div>\n            </div>\n        </li>\n    </ul>\n</div>\n\n<div [ngClass]=\"[config.theme === 'light' ? 'svgcontainer' : 'svgcontainer dark-mode']\" [id]=\"'svgInsert' + viewModel.uid\">loading...</div>\n\n<div class=\"close-button\">\n    <button mat-button mat-dialog-close>close</button>\n</div>\n","import { Component, ViewChild, TemplateRef, AfterViewInit, ViewEncapsulation, Input, Output, EventEmitter } from '@angular/core';\nimport { DataService } from '../services/data.service';\nimport { Tab, Domain, Version, ViewModel } from '../classes';\nimport { ConfigService } from '../services/config.service';\nimport { VersionUpgradeComponent } from '../version-upgrade/version-upgrade.component';\nimport { HelpComponent } from '../help/help.component';\nimport { SvgExportComponent } from '../svg-export/svg-export.component';\nimport { ViewModelsService } from '../services/viewmodels.service';\nimport { MatDialog } from '@angular/material/dialog';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { HttpClient } from '@angular/common/http';\nimport { ChangelogComponent } from '../changelog/changelog.component';\nimport { Subscription, forkJoin } from 'rxjs';\nimport * as is from 'is_js';\nimport * as globals from '../utils/globals';\nimport { LayerInformationComponent } from '../layer-information/layer-information.component';\n\n@Component({\n    selector: 'tabs',\n    templateUrl: './tabs.component.html',\n    styleUrls: ['./tabs.component.scss'],\n    providers: [ViewModelsService],\n    encapsulation: ViewEncapsulation.None,\n})\nexport class TabsComponent implements AfterViewInit {\n    @Input() userTheme: string;\n    @Output() onUserThemeChange = new EventEmitter<string>();\n    @ViewChild('safariWarning') safariWarning: TemplateRef<any>;\n    @ViewChild('versionWarning') versionWarning: TemplateRef<any>;\n\n    public activeTab: Tab = null;\n    public dropdownEnabled: string = '';\n    public layerTabs: Tab[] = [];\n    public adjustedHeaderHeight: number = 0;\n    public safariDialogRef;\n    public versionDialogRef;\n    public versionMinorSnackbarRef;\n    public showHelpDropDown: boolean = false;\n    public loadURL: string = '';\n    public layerLinkURLs: string[] = [];\n    public bannerContent: string;\n    public subscription: Subscription;\n    public copiedRecently: boolean = false; // true if copyLayerLink is called, reverts to false after 2 seconds\n    public loadData: any = {\n        url: undefined,\n        version: undefined,\n        identifier: undefined,\n    };\n\n    // user input for layer-layer operations\n    public opSettings: any = {\n        domain: '',\n        gradientVM: null,\n        coloringVM: null,\n        commentVM: null,\n        linkVM: null,\n        metadataVM: null,\n        enabledVM: null,\n        filterVM: null,\n        scoreExpression: '',\n        legendVM: null,\n    };\n\n    public get latestDomains(): Domain[] {\n        return this.filterDomains(this.dataService.versions[0]);\n    }\n\n    public get minimumSupportedVersion(): string {\n        return globals.minimumSupportedVersion;\n    }\n\n    public get navVersion(): string {\n        return globals.navVersion;\n    }\n\n    constructor(\n        public dialog: MatDialog,\n        public viewModelsService: ViewModelsService,\n        public dataService: DataService,\n        public http: HttpClient,\n        public configService: ConfigService,\n        public snackBar: MatSnackBar\n    ) {\n        console.debug('initializing tabs component');\n        this.newBlankTab();\n        this.loadTabs(configService.defaultLayers).then(() => {\n            // failed to load from URL, create a new blank layer\n            if (this.layerTabs.length == 0) this.newLayer(this.dataService.domains[0].id);\n\n            // if there is no active tab set, activate the first\n            if (!this.activeTab) this.selectTab(this.layerTabs[0]);\n        });\n        this.bannerContent = this.configService.banner;\n    }\n\n    ngAfterViewInit(): void {\n        if (is.safari('<=13')) {\n            // open safari version incompatibility warning\n            this.safariDialogRef = this.dialog.open(this.safariWarning, {\n                width: '350px',\n                disableClose: true,\n                panelClass: this.userTheme,\n            });\n        }\n    }\n\n    /**\n     * Adjust the header height on scroll event\n     */\n    public adjustHeader(newHeight) {\n        this.adjustedHeaderHeight = newHeight;\n    }\n\n    /**\n     * Open initial tabs on application load\n     * @param defaultLayers any default layers defined in the config file\n     */\n    public async loadTabs(defaultLayers) {\n        let bundleURL = this.getNamedFragmentValue('bundleURL')[0];\n        let bundleVersion = this.getNamedFragmentValue('version')[0];\n        let bundleDomain = this.getNamedFragmentValue('domain')[0];\n        let layerURLs = this.getNamedFragmentValue('layerURL');\n\n        let self = this;\n        if (bundleURL?.length && bundleVersion && bundleDomain?.length) {\n            // load base data from URL\n            self.newLayerFromURL({\n                url: bundleURL,\n                version: bundleVersion,\n                identifier: bundleDomain,\n            });\n        } else if (layerURLs?.length) {\n            // load layer from URL\n            let first = true;\n            for (let url of layerURLs) {\n                await self.loadLayerFromURL(url, first, true);\n                first = false;\n            }\n        } else if (defaultLayers['enabled']) {\n            // load default layers from config file\n            let first = true;\n            for (let url of defaultLayers['urls']) {\n                await self.loadLayerFromURL(url, first, true);\n                first = false;\n            }\n        }\n    }\n\n    /**\n     * Open a new tab\n     * @param  {string}     title       title of new tab\n     * @param  {ViewModel}  viewModel   the view model for the template\n     * @param  {Boolean}    isCloseable is the tab closeable, default false\n     * @param  {Boolean}    replace     replace the current tab with the new tab, default false\n     * @param  {Boolean}    forceNew    force open a new tab even if a tab of that name already exists, default false\n     * @param  {Boolean}    isDataTable is the tab a data table, if so tab text should be editable, default false\n     */\n    public openTab(title: string, viewModel: ViewModel, isCloseable = false, replace = true, forceNew = false, isDataTable = false): void {\n        if (!forceNew) {\n            // if tab is already open, change to that tab\n            let tab: Tab = this.layerTabs.find((t) => t.title === title);\n            this.selectTab(tab);\n            return;\n        }\n\n        // create a new tab\n        let domain = viewModel ? viewModel.domainVersionID : '';\n        let tab = new Tab(title, isCloseable, false, domain, isDataTable);\n        tab.viewModel = viewModel;\n\n        // select new tab\n        if (!replace || this.layerTabs.length === 0) {\n            this.layerTabs.push(tab); // don't replace\n            this.selectTab(this.layerTabs[this.layerTabs.length - 1]);\n        } else {\n            // find active tab index\n            for (let i = 0; i < this.layerTabs.length; i++) {\n                if (this.layerTabs[i] == this.activeTab) {\n                    if (this.layerTabs[i].title == 'new tab') {\n                        // close current and don't let it create a replacement tab\n                        this.closeActiveTab(true);\n                    }\n                    this.layerTabs.splice(i, 0, tab); // replace\n                    this.selectTab(this.layerTabs[i]);\n                    return;\n                }\n            }\n        }\n        // reset dropdown\n        this.dropdownEnabled = '';\n    }\n\n    /**\n     * Open a new \"blank\" tab with new layer options\n     * @param  {boolean} replace replace the current tab with this blank tab, default false\n     */\n    public newBlankTab(replace: boolean = false): void {\n        this.openTab('new tab', null, true, replace, true, false);\n    }\n\n    /**\n     * Select the specified tab, deselect other tabs\n     * @param  {Tab} tab the tab to select\n     */\n    public selectTab(tab: Tab): void {\n        this.activeTab = tab;\n\n        // close search sidebar\n        this.viewModelsService.viewModels.forEach((viewModel) => {\n            if (viewModel.sidebarContentType === 'search') {\n                viewModel.sidebarOpened = false;\n                viewModel.sidebarContentType = '';\n            }\n        });\n    }\n\n    /**\n     * Close the specified tab\n     * @param  {Tab}     tab        the tab to close\n     * @param  {boolean} allowNoTab if true, doesn't select another tab, and won't open a new tab if there are none, default false\n     */\n    public closeTab(tab: Tab, allowNoTab: boolean = false) {\n        let action = 0; // controls post close-tab behavior\n\n        // destroy tab viewmodel\n        this.viewModelsService.destroyViewModel(tab.viewModel);\n\n        // check if the tab we're closing is the active tab\n        let i = this.layerTabs.findIndex((t) => t === tab);\n        if (tab == this.activeTab) {\n            if (i == 0 && this.layerTabs.length > 1) action = 1; // closing first tab, first tab is active, and more tabs exist\n            else if (i > 0) action = 2; // not closing first tab, implicitly more tabs exist\n            else action = 3; // closing first tab and no other tabs exist\n        }\n\n        // remove the tab\n        this.layerTabs.splice(i, 1);\n\n        // handle post close-tab behavior\n        if (allowNoTab) return;\n\n        switch (action) {\n            case 0: // should only occur if the active tab is not closed, don't select another tab\n                break;\n            case 1: // closing the first tab and more tabs exist\n                this.selectTab(this.layerTabs[0]); // select first tab\n                break;\n            case 2: // closing any tab other than the first\n                this.selectTab(this.layerTabs[0]); // select first tab\n                break;\n            case 3: // closing first tab and no other tab exist\n                this.newBlankTab(); // create a new blank tab, automatically opens this tab\n                break;\n            default: // should never occur\n                console.error('post closetab action not specified (this should never happen)');\n        }\n    }\n\n    /**\n     * Close the currently selected tab\n     * @param  {boolean} allowNoTab if true, doesn't select another tab, and won't open a new tab if there are none, default false\n     */\n    public closeActiveTab(allowNoTab: boolean = false): void {\n        if (this.activeTab) this.closeTab(this.activeTab, allowNoTab);\n    }\n\n    /**\n     * Handle tab click event\n     * @param {Tab} tab the selected tab\n     */\n    public handleTabClick(tab: Tab): void {\n        if (this.activeTab !== tab) {\n            this.activeTab = tab;\n            this.dropdownEnabled = '';\n        } else this.dropdownEnabled = this.dropdownEnabled !== 'description' ? 'description' : '';\n    }\n\n    /**\n     * Filter domains on version\n     * @param {Version} version the version to filter by\n     * @returns list of domains in the given version\n     */\n    public filterDomains(version: Version): Domain[] {\n        return this.dataService.domains.filter((d) => d.version == version);\n    }\n\n    /**\n     * Check if the given feature is defined in the config file\n     * @param {string} featureName the name of the feature\n     * @returns true, if the feature is defined, false otherwise\n     */\n    public hasFeature(featureName: string): boolean {\n        return this.configService.getFeature(featureName);\n    }\n\n    /**\n     * Handle theme change\n     * @param {string} theme the selected theme\n     */\n    public handleUserThemeChange(theme: string) {\n        this.onUserThemeChange.emit(theme);\n    }\n\n    /**\n     * Open the selected dialog\n     * @param {string} dialogName {\"changelog\"|\"help\"} the dialog to open\n     */\n    public openDialog(dialogName: string) {\n        const settings = { maxWidth: '75ch', panelClass: this.userTheme };\n        if (dialogName == 'changelog') {\n            this.dialog.open(ChangelogComponent, settings);\n        } else if (dialogName == 'help') {\n            this.dialog.open(HelpComponent, settings);\n        } else if (dialogName == 'layers') {\n            this.dialog.open(LayerInformationComponent, {\n                maxWidth: '90ch',\n            });\n        }\n    }\n\n    /**\n     * Open the SVG exporter dialog\n     * @param {ViewModel} viewModel the viewModel to render\n     */\n    public openSVGDialog(viewModel: ViewModel) {\n        this.dialog.open(SvgExportComponent, {\n            data: { vm: viewModel },\n            panelClass: ['dialog-custom', this.userTheme],\n        });\n    }\n\n    /**\n     * Given a unique root, get a layer name that does not conflict any existing layers, e.g 'new layer' -> 'new layer 1'\n     * @param  {string} root the root string to get the non-conflicting version of\n     * @return {string}      non-conflicted version\n     */\n    public getUniqueLayerName(root: string): string {\n        let id = 0;\n\n        function isInteger(str: string): boolean {\n            let n = Math.floor(Number(str));\n            return String(n) === str;\n        }\n\n        for (let viewModel of this.viewModelsService.viewModels) {\n            if (!viewModel.name.startsWith(root)) continue;\n            if (viewModel.name === root) {\n                // case where it's \"layer\" aka \"layer0\"\n                id = Math.max(id, 1);\n                continue;\n            }\n\n            // find the lowest number higher than existing number\n            let substr = viewModel.name.substring(root.length, viewModel.name.length);\n            if (isInteger(substr)) {\n                id = Math.max(id, Number(substr) + 1);\n            }\n        }\n\n        // if no layers of this name exist (id == 0) just return root\n        if (id != 0) root = root + id;\n        return root;\n    }\n\n    /**\n     * Create a new layer from URL\n     */\n    public newLayerFromURL(loadData: any, obj: any = undefined): void {\n        let domainID = loadData.identifier.toLowerCase();\n        let domainVersionID = this.dataService.getDomainVersionID(domainID, loadData.version);\n\n        // validate input data\n        let valid = this.validateInput(loadData, domainVersionID);\n        if (!valid) return;\n\n        // load from URL\n        let url = new URL(loadData.url).toString();\n        let subscription;\n        subscription = this.http.get(url).subscribe({\n            next: (res) => {\n                // check for custom domain\n                let exists = this.dataService.domains.find((d) => d.isCustom && d.id === domainVersionID);\n                if (!exists) {\n                    // create or retrieve version\n                    let v: Version = this.dataService.versions.find((v) => v.number == loadData.version);\n                    if (!v) {\n                        v = new Version(`ATT&CK v${loadData.version}`, String(loadData.version));\n                        this.dataService.versions.push(v);\n                    }\n\n                    // create new custom domain object\n                    let domainObject = new Domain(domainID, domainID, v, [url]);\n                    domainObject.isCustom = true;\n                    this.dataService.domains.push(domainObject);\n                }\n\n                this.newLayer(domainVersionID, obj);\n            },\n            error: (err) => {\n                console.error(err);\n                alert('ERROR retrieving data from ' + url + ', check the javascript console for more information.');\n            },\n            complete: () => {\n                if (subscription) subscription.unsubscribe();\n            }, // prevent memory leaks\n        });\n    }\n\n    /**\n     * Validate user input data before loading data from collection or STIX bundle URL\n     * @param {any} loadData the user input\n     * @param {string} domainVersionID the domain and version\n     * @returns true if user input is valid, false otherwise\n     */\n    public validateInput(loadData: any, domainVersionID: string): boolean {\n        try {\n            // validate URL\n            let url = new URL(loadData.url);\n\n            // validate version\n            if (isNaN(loadData.version)) {\n                throw Error('version is not a number');\n            }\n\n            // validate domainVersionID is unique\n            let exists = this.dataService.domains.find((d) => d.id == domainVersionID);\n            // Note: if a user inputs the same domain, version, AND url, do not check for collisions, just reload the custom dataset\n            if (exists && !(exists.isCustom && exists.urls[0] == url.toString())) {\n                throw Error(`the domain and version specified conflict with an existing set of ATT&CK data (${exists.name} ${exists.version.name})`);\n            }\n\n            return true; // passed validation\n        } catch (err) {\n            console.error(err);\n            if (err instanceof TypeError) {\n                alert('ERROR: invalid url, check the javascript console for more information.');\n            } else {\n                alert('ERROR ' + err.message);\n            }\n            return false; // failed validation\n        }\n    }\n\n    /**\n     * Create a new layer in the given domain and version\n     */\n    public newLayer(domainVersionID: string, obj: any = undefined): void {\n        // load domain data, if not yet loaded\n        let domain = this.dataService.getDomain(domainVersionID);\n        if (!domain.dataLoaded) {\n            this.dataService.loadDomainData(domainVersionID, true);\n        }\n\n        // find non conflicting name\n        let name;\n        if (obj && 'name' in obj && obj['name']) {\n            name = obj['name'];\n        } else name = this.getUniqueLayerName('layer');\n\n        // create and open the view model\n        let viewModel = this.viewModelsService.newViewModel(name, domainVersionID);\n        if (obj) {\n            // restore view model from the given string\n            viewModel.deserialize(obj);\n        }\n        viewModel.loadVMData();\n        this.openTab(name, viewModel, true, true, true, true);\n    }\n\n    /**\n     * Get the layer score expression variable for the tab at the given index\n     * @param {number} index the index of the tab\n     * @return {string} the score expression character\n     */\n    public indexToChar(index: number): string {\n        let viewModelIndex = 0;\n        for (let i = 0; i < index; i++) {\n            // check if tab has a view model\n            if (this.layerTabs[i].viewModel) viewModelIndex++;\n        }\n        return String.fromCharCode(97 + viewModelIndex);\n    }\n\n    /**\n     * Inverse of indextoChar, maps the character to the tab it corresponds to\n     * @param {string} char the score expression character\n     * @return {number} the index of the tab\n     */\n    public charToIndex(char: string): number {\n        let viewModelIndex = 0;\n        for (let i = 0; i < this.layerTabs.length; i++) {\n            if (this.layerTabs[i].viewModel) {\n                let currChar = String.fromCharCode(97 + viewModelIndex);\n                viewModelIndex++;\n                if (currChar == char) return i;\n            }\n        }\n    }\n\n    /**\n     * Create a new layer by operation based on user input\n     */\n    public layerByOperation(): void {\n        // build score expression map, mapping inline variables to their actual VMs\n        let scoreVariables = new Map<string, ViewModel>();\n        let regex = /\\b[a-z]\\b/g; // \\b matches word boundary\n        let matches = this.opSettings.scoreExpression.match(regex);\n\n        let self = this;\n        if (matches) {\n            matches.forEach(function (match) {\n                let index = self.charToIndex(match);\n                let vm = self.layerTabs[index].viewModel;\n                scoreVariables.set(match, vm);\n            });\n        }\n\n        let layerName = this.getUniqueLayerName('layer by operation');\n        try {\n            // all layers must be of the same domain/version\n            let vms = Array.from(scoreVariables.values());\n            if (vms && !vms.every((vm) => vm.domainVersionID === vms[0].domainVersionID)) {\n                throw Error('cannot apply operations to layers of different domains');\n            }\n\n            // execute the layer operation\n            let vm = this.viewModelsService.layerOperation(scoreVariables, layerName, this.opSettings);\n\n            // load domain data and open new layer operation tab\n            if (!this.dataService.getDomain(this.opSettings.domain).dataLoaded) {\n                this.dataService.loadDomainData(this.opSettings.domain, true).then(() => {\n                    vm.loadVMData();\n                    vm.updateGradient();\n                    this.openTab(layerName, vm, true, true, true, true);\n                });\n            } else {\n                vm.loadVMData();\n                vm.updateGradient();\n                this.openTab(layerName, vm, true, true, true, true);\n            }\n        } catch (err) {\n            console.error(err);\n            alert('Layer Layer operation error: ' + err.message);\n        }\n    }\n\n    /**\n     * Check if there's an error in the score expression (syntax, etc)\n     * @return {string} error or null if no error\n     */\n    public getScoreExpressionError(): string {\n        let self = this;\n        try {\n            // build fake scope\n            let regex = /\\b[a-z]\\b/g; // \\b matches word boundary\n            let scope = {};\n            let matches = self.opSettings.scoreExpression.match(regex);\n\n            if (matches) {\n                let noMatch = '';\n                matches.forEach(function (match) {\n                    scope[match] = 0;\n\n                    // check if letter is too large\n                    if (typeof self.charToIndex(match) == 'undefined') {\n                        noMatch = 'Variable ' + match + ' does not match any layers';\n                    } else if (\n                        self.opSettings.domain &&\n                        self.layerTabs[self.charToIndex(match)].viewModel.domainVersionID !== self.opSettings.domain\n                    ) {\n                        noMatch = 'Layer ' + match + ' does not match the chosen domain';\n                    }\n                });\n                if (noMatch.length > 0) return noMatch;\n            }\n            return null;\n        } catch (err) {\n            return err.message;\n        }\n    }\n\n    /**\n     * Open prompt to upload a layer\n     */\n    public openUploadPrompt(): void {\n        let input = <HTMLInputElement>document.getElementById('uploader');\n        input.click();\n    }\n\n    /**\n     * Dialog to upgrade version if layer is not the latest version\n     */\n    public versionUpgradeDialog(viewModel: ViewModel): Promise<any> {\n        let dataPromise: Promise<any> = new Promise((resolve, reject) => {\n            let currVersion = this.dataService.latestVersion.number;\n            if (viewModel.version !== currVersion) {\n                // ask to upgrade\n                let dialog = this.dialog.open(VersionUpgradeComponent, {\n                    data: {\n                        layerName: viewModel.name,\n                        vmVersion: viewModel.version,\n                        currVersion: currVersion,\n                    },\n                    disableClose: true,\n                    width: '25%',\n                    panelClass: this.userTheme,\n                });\n                this.subscription = dialog.afterClosed().subscribe({\n                    next: (result) => {\n                        if (!result.upgrade && !this.dataService.isSupported(viewModel.version)) {\n                            reject(\n                                new Error(`Uploaded layer version (${String(viewModel.version)}) is not supported by Navigator v${this.navVersion}`)\n                            );\n                        }\n                        if (result.upgrade) {\n                            let newDomainVersionID = this.dataService.getDomainVersionID(viewModel.domain, currVersion);\n                            resolve({ oldID: viewModel.domainVersionID, newID: newDomainVersionID });\n                        }\n                        resolve(null);\n                    },\n                    complete: () => {\n                        if (this.subscription) this.subscription.unsubscribe();\n                    }, //prevent memory leaks\n                });\n            } else resolve(null); // layer is already current version\n        });\n        return dataPromise;\n    }\n\n    /**\n     * Checks if the layer can be upgraded and initializes the layer upgrade process\n     * @param {ViewModel}   oldViewModel viewmodel to upgrade\n     * @param {any}         serialized the viewmodel's raw serialized JSON string\n     * @param {boolean}     replace replace if true, replace the current active tab with the layer\n     * @param {boolean}     defaultLayers is this a layer being loaded by default (from the config or query string)?\n     *                      if so, will act as if the user decided not to upgrade the layer\n     */\n    public upgradeLayer(oldViewModel: ViewModel, serialized: any, replace: boolean, defaultLayers: boolean = false): Promise<any> {\n        return new Promise((resolve, reject) => {\n            if (!defaultLayers) {\n                this.versionUpgradeDialog(oldViewModel)\n                    .then((versions) => {\n                        if (versions) {\n                            // user upgraded to latest version\n                            // create and open the latest version\n                            let newViewModel = this.viewModelsService.newViewModel(oldViewModel.name, versions.newID);\n                            newViewModel.version = this.dataService.latestVersion.number; // update version to new ID\n                            newViewModel.deserialize(serialized, false); // restore layer data, except for technique annotations\n                            newViewModel.loadVMData();\n                            newViewModel.compareTo = oldViewModel;\n                            this.openTab('new layer', newViewModel, true, replace, true, true);\n                            newViewModel.openSidebar('layerUpgrade');\n                            newViewModel.selectTechniquesAcrossTactics = false;\n\n                            // load layer version & latest ATT&CK version\n                            let loads: any = {};\n                            let dataSubscription: Subscription;\n                            if (!this.dataService.getDomain(versions.oldID).dataLoaded)\n                                loads.old = this.dataService.loadDomainData(versions.oldID, true);\n                            if (!this.dataService.getDomain(versions.newID).dataLoaded)\n                                loads.new = this.dataService.loadDomainData(versions.newID, true);\n                            dataSubscription = forkJoin(loads).subscribe({\n                                complete: () => {\n                                    newViewModel.versionChangelog = this.dataService.compareVersions(versions.oldID, versions.newID);\n                                    // load vm for uploaded layer\n                                    oldViewModel.deserialize(serialized);\n                                    oldViewModel.loadVMData();\n                                    newViewModel.initCopyAnnotations();\n                                    resolve(null);\n                                    if (dataSubscription) dataSubscription.unsubscribe();\n                                },\n                            });\n                        } else {\n                            // user did not upgrade, keep the old version\n                            this.openTab('new layer', oldViewModel, true, replace, true, true);\n                            if (!this.dataService.getDomain(oldViewModel.domainVersionID).dataLoaded) {\n                                this.dataService.loadDomainData(oldViewModel.domainVersionID, true).then(() => {\n                                    oldViewModel.deserialize(serialized);\n                                    oldViewModel.loadVMData();\n                                    resolve(null);\n                                });\n                            } else {\n                                oldViewModel.deserialize(serialized);\n                                oldViewModel.loadVMData();\n                                resolve(null);\n                            }\n                        }\n                    })\n                    .catch((err) => {\n                        console.error(err);\n                        alert('ERROR parsing file, check the javascript console for more information.');\n                        resolve(null);\n                    });\n            } else {\n                // default layer, do not upgrade\n                this.openTab('new layer', oldViewModel, true, replace, true, true);\n                if (!this.dataService.getDomain(oldViewModel.domainVersionID).dataLoaded) {\n                    this.dataService.loadDomainData(oldViewModel.domainVersionID, true).then(() => {\n                        oldViewModel.deserialize(serialized);\n                        oldViewModel.loadVMData();\n                        resolve(null);\n                    });\n                } else {\n                    oldViewModel.deserialize(serialized);\n                    oldViewModel.loadVMData();\n                    resolve(null);\n                }\n            }\n        });\n    }\n\n    /**\n     * Load a layer from file\n     */\n    public loadLayerFromFile(): void {\n        let input = <HTMLInputElement>document.getElementById('uploader');\n        if (input.files.length < 1) {\n            alert('You must select a file to upload!');\n            return;\n        }\n        this.readJSONFile(input.files[0]);\n    }\n\n    /**\n     * Reads the JSON file, adds the properties to a view model, and\n     * loads the view model into a new layer\n     */\n    public async readJSONFile(file: File): Promise<void> {\n        return new Promise((resolve, reject) => {\n            let reader = new FileReader();\n            let self = this;\n\n            reader.onload = async (e) => {\n                let loadObjAsLayer = async function(layerObj) {\n                    let viewModel = self.viewModelsService.newViewModel('loading layer...', undefined);\n                    try {\n                        let layerVersionStr = viewModel.deserializeDomainVersionID(layerObj);\n                        await self.versionMismatchWarning(layerVersionStr);\n                        self.versionMismatchWarning(layerVersionStr);\n                        if (!self.dataService.getDomain(viewModel.domainVersionID)) {\n                            throw new Error(`Error: '${viewModel.domain}' (v${viewModel.version}) is an invalid domain.`);\n                        }\n\n                        let isCustom = 'customDataURL' in layerObj;\n                        if (!isCustom) {\n                            await self.upgradeLayer(viewModel, layerObj, true);\n                            console.debug(`loaded layer \"${viewModel.name}\"`);\n                        } else {\n                            // load as custom data\n                            viewModel.deserialize(layerObj);\n                            let url = layerObj['customDataURL'];\n                            self.newLayerFromURL(\n                                {url: url, version: viewModel.version, identifier: viewModel.domain},\n                                layerObj\n                            );\n                        }\n                    } catch (err) {\n                        console.error(err);\n                        alert(`ERROR parsing layer, check the javascript console for more information.`);\n                        self.viewModelsService.destroyViewModel(viewModel);\n                        resolve(null); // continue\n                    }\n                }\n\n                let result = String(reader.result);\n                let layerFile = typeof result == 'string' ? JSON.parse(result) : result;\n                if (layerFile?.length) {\n                    console.debug('loading file with multiple layers');\n                    for (let layer of layerFile) {\n                        await loadObjAsLayer(layer);\n                    }\n                } else {\n                    await loadObjAsLayer(layerFile);\n                }\n            };\n            reader.readAsText(file);\n        });\n    }\n\n    /**\n     * Check if uploaded layer version is out of date and display\n     * a snackbar warning message (for minor mismatches) or a dialog warning\n     * (for major mismatches)\n     * @param {string} layerVersionStr the uploaded layer version\n     */\n    public async versionMismatchWarning(layerVersionStr: string): Promise<boolean> {\n        return new Promise((resolve, reject) => {\n            let globalVersionSplit = globals.layerVersion.split('.');\n            let layerVersion = layerVersionStr.split('.');\n            // if minor version change, snackbar will be displayed\n            if (layerVersion[0] === globalVersionSplit[0] && layerVersion[1] !== globalVersionSplit[1]) {\n                let snackMessage = `Uploaded layer version (${layerVersionStr}) is out of date. Please update to v${globals.layerVersion} for optimal compatibility.`;\n                this.versionMinorSnackbarRef = this.snackBar.open(snackMessage, 'CHANGELOG', {\n                    duration: 6500,\n                });\n                this.versionMinorSnackbarRef.onAction().subscribe(() => {\n                    this.openDialog('changelog');\n                });\n                resolve(true);\n            }\n            // if major version change, keep the dialog open until user dismisses it\n            else if (layerVersion[0] !== globalVersionSplit[0]) {\n                this.versionDialogRef = this.dialog.open(this.versionWarning, {\n                    width: '30em',\n                    disableClose: true,\n                    panelClass: this.userTheme,\n                    data: {\n                        objVersion: layerVersionStr,\n                        globalVersion: globals.layerVersion,\n                    },\n                });\n                this.versionDialogRef.afterClosed().subscribe((_) => {\n                    resolve(true);\n                });\n            } else {\n                resolve(true);\n            }\n        });\n    }\n\n    /**\n     * Load layer from URL\n     * @param {string} loadURL the url to load\n     * @param {boolean} replace replace the current active with the loaded layer?\n     * @param {boolean} defaultLayers is this loading reflecting a set of default layers (from the config file or from the query string)?\n     *\n     */\n    public async loadLayerFromURL(loadURL: string, replace: boolean, defaultLayers: boolean = false): Promise<any> {\n        return new Promise(async (resolve, reject) => {\n            let subscription;\n            let self = this;\n            subscription = self.http.get(loadURL).subscribe({\n                next: async (res) => {\n                    let loadLayerAsync = async function(layerObj) {\n                        let viewModel = self.viewModelsService.newViewModel('loading layer...', undefined);\n                        try {\n                            let layerVersionStr = viewModel.deserializeDomainVersionID(layerObj);\n                            await self.versionMismatchWarning(layerVersionStr);\n                            if (!self.dataService.getDomain(viewModel.domainVersionID)) {\n                                throw new Error(`Error: '${viewModel.domain}' (v${viewModel.version}) is an invalid domain.`);\n                            }\n                            await self.upgradeLayer(viewModel, layerObj, replace, defaultLayers);\n                            console.debug(`loaded layer \"${viewModel.name}\" from ${loadURL}`);\n                        } catch (err) {\n                            console.error(err);\n                            alert(`ERROR parsing layer from ${loadURL}, check the javascript console for more information.`);\n                            self.viewModelsService.destroyViewModel(viewModel);\n                            resolve(null); // continue\n                        }\n                    };\n\n                    let layerFile = typeof res == 'string' ? JSON.parse(res) : res;\n                    if (layerFile?.length) {\n                        console.debug('loading file with multiple layers');\n                        for (let layer of layerFile) {\n                            await loadLayerAsync(layer);\n                        }\n                    } else {\n                        await loadLayerAsync(layerFile);\n                    }\n                    resolve(null); //continue\n                },\n                error: (err) => {\n                    console.error(err);\n                    alert(`ERROR retrieving layer from ${loadURL}, check the javascript console for more information.`);\n                    resolve(null); // continue\n                },\n                complete: () => {\n                    if (subscription) subscription.unsubscribe();\n                }, // prevent memory leaks\n            });\n        });\n    }\n\n    /**\n     * Helper function to track which layerLinkURLs have been added or removed\n     */\n    public trackByFunction(index: number): any {\n        return index;\n    }\n\n    /**\n     * Add a new empty layer link to the layerLinkURLs array\n     */\n    public addLayerLink(): void {\n        this.layerLinkURLs.push('');\n    }\n\n    /**\n     * Remove the given layer link URL from layerLinkURLs\n     * @param {number} index the index to remove\n     */\n    public removeLayerLink(index: number): void {\n        this.layerLinkURLs.splice(index, 1);\n    }\n\n    /**\n     * Convert layerLinkURL to a query string value for layerURL query string\n     * @return URL such that when opened will create navigator instance with a query String\n     *         specifying layerLinkURL as the URL to fetch the default layer from\n     */\n    public getLayerLink(): string {\n        let str = window.location.href.split('#')[0];\n        let join = '#'; // hash first, then ampersand\n        for (let layerLinkURL of this.layerLinkURLs) {\n            str += join + 'layerURL=' + encodeURIComponent(layerLinkURL);\n            join = '&';\n        }\n        for (let feature of this.configService.featureList) {\n            if (feature.subfeatures) {\n                for (let subfeature of feature.subfeatures) {\n                    if (!subfeature.enabled) {\n                        str += join + subfeature.name + '=false';\n                        join = '&';\n                    }\n                }\n            } else if (!feature.enabled) {\n                str += join + feature.name + '=false';\n                join = '&';\n            }\n        }\n        return str;\n    }\n\n    /**\n     * Select the layer link field text\n     */\n    public selectLayerLink(): void {\n        let copyText = <HTMLInputElement>document.getElementById('layerLink');\n        console.debug('copied', copyText.value);\n        copyText.select();\n    }\n\n    /**\n     * Copy the created layer link to clipboard\n     */\n    public copyLayerLink(): void {\n        this.selectLayerLink();\n        document.execCommand('Copy');\n        this.copiedRecently = true;\n        let self = this;\n        window.setTimeout(function () {\n            self.copiedRecently = false;\n        }, 2000);\n    }\n\n    /**\n     * Return true if the text is only letters a-z, false otherwise\n     * @param  text text to eval\n     * @return      true if a-z, false otherwise\n     */\n    public isAlphabetical(text: string): boolean {\n        return /^[a-z]+$/.test(text);\n    }\n\n    /**\n     * Get a key=value fragment value by key\n     * @param  {string} name name of param to get the value of\n     * @param  {string} url  optional, if unspecified searches in current window location. Otherwise searches this string\n     * @return {string}      fragment param value\n     */\n    public getNamedFragmentValue(name: string, url?: string): any {\n        if (!url) url = window.location.href;\n\n        name = name.replace(/[[\\]]/g, '\\\\$&');\n        let regex = new RegExp('[#&]' + name + '(?:=([^&#]*)|&|#|$)', 'g');\n\n        // match as many results as exist under the name\n        let results = [];\n        let match = regex.exec(url);\n        while (match != null) {\n            results.push(decodeURIComponent(match[1].replace(/\\+/g, ' ')));\n            match = regex.exec(url);\n        }\n        return results;\n    }\n\n    /** Get all view models in the same domain/version */\n    public getFilteredVMs(): ViewModel[] {\n        return this.viewModelsService.viewModels.filter((vm) => vm.domainVersionID == this.opSettings.domain);\n    }\n}\n","<div [style.margin-top]=\"adjustedHeaderHeight + 'px'\" class=\"header-wrapper\">\n    <!-- banner -->\n    <div *ngIf=\"hasFeature('header') && bannerContent\" class=\"header\">\n        <div class=\"banner\">\n            <span class=\"bannerContent\" role=\"alert\" [innerHTML]=\"bannerContent\"></span>\n            <div class=\"bannerLinks\">\n                <a href=\"https://unveilframework.net\">UNVEIL Framework</a>\n            </div>\n        </div>\n    </div>\n\n    <!-- help/changelog -->\n    <div class=\"header help-header\">\n        <div\n            class=\"help-button\"\n            [ngClass]=\"{ 'help-dropdown-open': showHelpDropDown }\"\n            matTooltip=\"help\"\n            (click)=\"showHelpDropDown = !showHelpDropDown\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#9aa0a6\">\n                <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n                <path\n                    d=\"M11 18h2v-2h-2v2zm1-16C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm0-14c-2.21 0-4 1.79-4 4h2c0-1.1.9-2 2-2s2 .9 2 2c0 2-3 1.75-3 5h2c0-2.25 3-2.5 3-5 0-2.21-1.79-4-4-4z\" />\n            </svg>\n        </div>\n        <div class=\"dropdown-container\" *ngIf=\"showHelpDropDown && adjustedHeaderHeight >= 0\">\n            <button (click)=\"openDialog('help')\">help</button>\n            <button (click)=\"openDialog('changelog')\">changelog</button>\n        </div>\n    </div>\n\n    <!-- tabs -->\n    <div class=\"tabs-container scroll\">\n        <nav mat-tab-nav-bar class=\"tabs\">\n            <!-- open tabs -->\n            <a\n                *ngFor=\"let tab of layerTabs; let $i = index\"\n                mat-tab-link\n                class=\"tab-title\"\n                [class.active]=\"activeTab === tab\"\n                (click)=\"handleTabClick(tab)\"\n                [active]=\"activeTab === tab\">\n                {{ tab.isDataTable ? tab.viewModel.name : tab.title }}\n                <span class=\"tab-close\" *ngIf=\"tab.isCloseable\" (click)=\"closeTab(tab)\">\n                    <mat-icon>close</mat-icon>\n                </span>\n                <!-- tab enumerator (for layer operations) -->\n                <span\n                    class=\"tab-enumerator\"\n                    *ngIf=\"activeTab.showScoreVariables && tab.isDataTable && (!domain || tab.domain === domain) && isAlphabetical(indexToChar($i))\">\n                    {{ indexToChar($i) }}\n                </span>\n            </a>\n            <!-- create a new tab -->\n            <a mat-tab-link class=\"add-tab\" *ngIf=\"hasFeature('tabs') && layerTabs.length < 12\" (click)=\"newBlankTab()\">\n                <mat-icon>add</mat-icon>\n            </a>\n        </nav>\n    </div>\n\n    <div *ngIf=\"layerTabs.length == 0\" class=\"new-tab\">\n        <!-- should never see this, but in case the config fails to load -->\n        <button (click)=\"newBlankTab()\">Start</button>\n    </div>\n</div>\n\n<ng-template #safariWarning>\n    <div class=\"safari-warning\">\n        <h3>WARNING</h3>\n        <p>\n            We’ve detected that you are using the Safari browser. As of Navigator version\n            <b>4.3</b>\n            , Safari versions 13 and below are not supported due to an unfixable freeze that can occur when selecting a layer tab.\n        </p>\n        <p>\n            We recommend you use Chrome or Firefox instead. You can continue to use the Navigator in Safari (versions 13 and below), but you may lose\n            work if the application freezes.\n        </p>\n        <button mat-button (click)=\"safariDialogRef.close()\">Dismiss</button>\n    </div>\n</ng-template>\n\n<ng-template #versionWarning let-data>\n    <div class=\"version-warning\">\n        <div>\n            <h3 mat-dialog-title>\n                <u>WARNING:</u>\n                Outdated Layer\n            </h3>\n            <mat-dialog-content>\n                <p>\n                    The uploaded layer version ({{ data.objVersion }}) does not match Navigator's layer version ({{ data.globalVersion }}). The layer\n                    configuration may not be fully restored.\n                </p>\n                <p>View the latest Layer File Format specification and the changelog for more information:</p>\n                <p>\n                    <a (click)=\"openDialog('layers')\">Layer File Format v{{ data.globalVersion }}</a>\n                </p>\n                <p>\n                    <a (click)=\"openDialog('changelog')\">Changelog</a>\n                </p>\n            </mat-dialog-content>\n        </div>\n\n        <button mat-button mat-dialog-close (click)=\"versionDialogRef.close()\">Dismiss</button>\n    </div>\n</ng-template>\n\n<!-- new tab template -->\n<ng-template [ngIf]=\"activeTab && !activeTab.isDataTable\">\n    <div class=\"new-tab\">\n        <div class=\"description\">\n            <div class=\"logo\">\n                <h1><a href=\"https://github.com/UNVEILFramework/unveil-navigator\">UNVEIL Navigator</a></h1>\n            </div>\n            <div>\n                <p>\n                    The UNVEIL Navigator is a web-based tool based on MITRE ATT&CK Navigator for annotating and exploring UNVEIL matrices. It can be used to show the frequency of detected techniques on targets, highlight the techniques with the highest potential for being effective against a specific target, visualize HUMINT training coverage, and more.\n                </p>\n            </div>\n            <!-- Help dialog -->\n            <div class=\"help-links-container\">\n                <button mat-button (click)=\"openDialog('help')\">help</button>\n                <button mat-button (click)=\"openDialog('changelog')\">changelog</button>\n\n                <button mat-button (click)=\"select.open()\" class=\"theme-select-container\">\n                    <mat-label>theme ▾</mat-label>\n                    <mat-select #select class=\"hide-select\" (selectionChange)=\"handleUserThemeChange($event.value)\">\n                        <mat-option value=\"dark\">dark</mat-option>\n                        <mat-option value=\"light\">light</mat-option>\n                        <mat-option value=\"system\">use system</mat-option>\n                    </mat-select>\n                </button>\n            </div>\n        </div>\n        <mat-accordion class=\"headers-align\">\n            <!-- Create new layer interface -->\n            <mat-expansion-panel #newlayer>\n                <mat-expansion-panel-header>\n                    <mat-panel-title>Create new layer</mat-panel-title>\n                    <mat-panel-description>Create a new empty layer</mat-panel-description>\n                </mat-expansion-panel-header>\n\n                <!-- Domain buttons for latest version -->\n                <div class=\"button-group\">\n                    <button *ngFor=\"let domain of latestDomains\" mat-raised-button (click)=\"newLayer(domain.id)\">\n                        {{ domain.name }}\n                    </button>\n                </div>\n\n                <!-- More domain/version options -->\n                <mat-expansion-panel>\n                    <mat-expansion-panel-header>\n                        <mat-panel-title>More options</mat-panel-title>\n                    </mat-expansion-panel-header>\n\n                    <div class=\"multi-column multi-column-container\">\n                        <div class=\"md-column\">\n                            <!-- select a version -->\n                            <mat-form-field>\n                                <mat-select placeholder=\"Select a version\" [(ngModel)]=\"nVersion\" required>\n                                    <mat-option [value]=\"null\">none</mat-option>\n                                    <mat-option *ngFor=\"let nVersion of dataService.versions\" [value]=\"nVersion\">\n                                        {{ nVersion.name }}\n                                    </mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                            <!-- select a domain -->\n                            <mat-form-field>\n                                <mat-select placeholder=\"Select a domain\" [(ngModel)]=\"nDomain\" [disabled]=\"!nVersion\" required>\n                                    <mat-option [value]=\"null\">none</mat-option>\n                                    <mat-option *ngFor=\"let nDomain of filterDomains(nVersion)\" [value]=\"nDomain\">\n                                        {{ nDomain.name }}\n                                    </mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                            <!-- note -->\n                            <span class=\"text-deemphasis\">\n                                *Note: UNVEIL versions prior to v{{ minimumSupportedVersion }} are not supported by Navigator v{{ navVersion }}.\n                            </span>\n                        </div>\n                        <div class=\"or-column\">\n                            <b>OR</b>\n                        </div>\n                        <div class=\"md-column\">\n                            <!-- bundle URL -->\n                            <mat-form-field>\n                                <input type=\"url\" matInput placeholder=\"Collection or STIX bundle URL\" [(ngModel)]=\"loadData.url\" />\n                            </mat-form-field>\n                            <!-- bundle version number -->\n                            <mat-form-field>\n                                <input type=\"number\" matInput placeholder=\"Bundle version number\" [(ngModel)]=\"loadData.version\" />\n                                <mat-hint>UNVEIL version (e. g. 1.0)</mat-hint>\n                            </mat-form-field>\n                            <!-- bundle domain identifier -->\n                            <mat-form-field>\n                                <input type=\"text\" matInput placeholder=\"Bundle domain\" [(ngModel)]=\"loadData.identifier\" />\n                                <mat-hint>Domain identifier (e. g. defending-iaas)</mat-hint>\n                            </mat-form-field>\n                        </div>\n                    </div>\n\n                    <div class=\"multi-column multi-column-container\">\n                        <div class=\"md-column\">\n                            <button style=\"margin-top: 20px\" mat-button [disabled]=\"!nVersion || !nDomain\" (click)=\"newLayer(nDomain.id)\">\n                                Create layer from version\n                            </button>\n                        </div>\n                        <div class=\"sm-column\"></div>\n                        <div class=\"md-column\">\n                            <button\n                                style=\"margin-top: 20px\"\n                                mat-button\n                                [disabled]=\"!loadData.url || !loadData.version || !loadData.identifier\"\n                                (click)=\"newLayerFromURL(loadData)\">\n                                Create layer from bundle\n                            </button>\n                        </div>\n                    </div>\n                </mat-expansion-panel>\n            </mat-expansion-panel>\n\n            <!-- Open existing layer interface -->\n            <mat-expansion-panel>\n                <mat-expansion-panel-header>\n                    <mat-panel-title>Open existing layer</mat-panel-title>\n                    <mat-panel-description>Load a layer from your computer or a URL</mat-panel-description>\n                </mat-expansion-panel-header>\n\n                <div class=\"multi-column multi-column-container\">\n                    <div class=\"md-column\">\n                        <button mat-raised-button (click)=\"openUploadPrompt()\">Upload from local</button>\n                        <input id=\"uploader\" type=\"file\" style=\"display: none\" (change)=\"loadLayerFromFile()\" />\n                    </div>\n                    <div class=\"or-column\">\n                        <b>OR</b>\n                    </div>\n                    <div class=\"md-column\">\n                        <mat-form-field>\n                            <input type=\"text\" matInput placeholder=\"Load from URL\" [(ngModel)]=\"loadURL\" />\n                            <button\n                                mat-button\n                                matSuffix\n                                mat-icon-button\n                                aria-label=\"go\"\n                                [disabled]=\"!loadURL\"\n                                (click)=\"loadLayerFromURL(loadURL, true)\">\n                                >\n                            </button>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </mat-expansion-panel>\n\n            <!-- Create layer from other layers -->\n            <mat-expansion-panel (opened)=\"activeTab.showScoreVariables = true\" (closed)=\"activeTab.showScoreVariables = false\">\n                <mat-expansion-panel-header>\n                    <mat-panel-title>Create layer from other layers</mat-panel-title>\n                    <mat-panel-description>Select layers to inherit properties from</mat-panel-description>\n                </mat-expansion-panel-header>\n\n                <div class=\"multi-column-container\">\n                    <!-- domain -->\n                    <div class=\"multi-column\">\n                        <div class=\"md-column\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"domain\" [(ngModel)]=\"opSettings.domain\" required>\n                                    <mat-option *ngFor=\"let domain of this.dataService.domains\" [value]=\"domain.id\">\n                                        {{ domain.name }} {{ domain.version.name }}\n                                    </mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"spacer\"></div>\n                        <div class=\"lg-column align-center\">\n                            <span>Select the domain and version for the new layer. Only layers of the same domain and version can be merged.</span>\n                        </div>\n                    </div>\n\n                    <!-- score expression -->\n                    <div class=\"multi-column\">\n                        <div class=\"md-column\">\n                            <mat-form-field>\n                                <input\n                                    type=\"text\"\n                                    matInput\n                                    placeholder=\"score expression\"\n                                    [disabled]=\"!opSettings.domain\"\n                                    [(ngModel)]=\"opSettings.scoreExpression\"\n                                    (keyup)=\"opSettings.scoreExpression = opSettings.scoreExpression.toLowerCase()\"\n                                    style=\"letter-spacing: 2px\" />\n                                <mat-hint style=\"color: red\" align=\"start\">{{ getScoreExpressionError() }}</mat-hint>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"spacer\"></div>\n                        <div class=\"lg-column align-center\" [ngClass]=\"{ disabled: !opSettings.domain }\">\n                            <span>\n                                Use constants (numbers) and layer variables (yellow, above) to write an expression for the initial value of scores in\n                                the new layer. A full list of supported operations can be found\n                                <a href=\"http://mathjs.org/docs/expressions/syntax.html#operators\">here</a>\n                                . Leave blank to initialize scores to 0. Here's a list of available layer variables:\n                                <ul *ngFor=\"let tab of layerTabs; let $i = index\">\n                                    <li\n                                        *ngIf=\"\n                                            activeTab.showScoreVariables &&\n                                            tab.isDataTable &&\n                                            (!opSettings.domain || tab.domain === opSettings.domain) &&\n                                            isAlphabetical(indexToChar($i))\n                                        \">\n                                        <span class=\"tab-enumerator-highlight\">{{ indexToChar($i) }}</span>\n                                        ({{ tab.isDataTable ? tab.viewModel.name : tab.title }})\n                                    </li>\n                                </ul>\n                            </span>\n                        </div>\n                    </div>\n\n                    <!-- gradient -->\n                    <div class=\"multi-column\">\n                        <div class=\"md-column\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"gradient\" [(ngModel)]=\"opSettings.gradientVM\" [disabled]=\"!opSettings.domain\">\n                                    <mat-option [value]=\"null\">none</mat-option>\n                                    <mat-option *ngFor=\"let vm of getFilteredVMs()\" [value]=\"vm\">{{ vm.name }}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"spacer\"></div>\n                        <div class=\"lg-column align-center\" [ngClass]=\"{ disabled: !opSettings.domain }\">\n                            <span>\n                                Select which layer to import the scoring gradient from. Leave blank to initialize with the default scoring gradient.\n                            </span>\n                        </div>\n                    </div>\n\n                    <!-- coloring -->\n                    <div class=\"multi-column\">\n                        <div class=\"md-column\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"coloring\" [(ngModel)]=\"opSettings.coloringVM\" [disabled]=\"!opSettings.domain\">\n                                    <mat-option [value]=\"null\">none</mat-option>\n                                    <mat-option *ngFor=\"let vm of getFilteredVMs()\" [value]=\"vm\">{{ vm.name }}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"spacer\"></div>\n                        <div class=\"lg-column align-center\" [ngClass]=\"{ disabled: !opSettings.domain }\">\n                            <span>Select which layer to import manually assigned colors from. Leave blank to initialize with no colors.</span>\n                        </div>\n                    </div>\n\n                    <!-- comments -->\n                    <div class=\"multi-column\">\n                        <div class=\"md-column\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"comments\" [(ngModel)]=\"opSettings.commentVM\" [disabled]=\"!opSettings.domain\">\n                                    <mat-option [value]=\"null\">none</mat-option>\n                                    <mat-option *ngFor=\"let vm of getFilteredVMs()\" [value]=\"vm\">{{ vm.name }}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"spacer\"></div>\n                        <div class=\"lg-column align-center\" [ngClass]=\"{ disabled: !opSettings.domain }\">\n                            <span>Select which layer to import comments from. Leave blank to initialize with no comments.</span>\n                        </div>\n                    </div>\n\n                    <!-- links -->\n                    <div class=\"multi-column\">\n                        <div class=\"md-column\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"links\" [(ngModel)]=\"opSettings.linkVM\" [disabled]=\"!opSettings.domain\">\n                                    <mat-option [value]=\"null\">none</mat-option>\n                                    <mat-option *ngFor=\"let vm of getFilteredVMs()\" [value]=\"vm\">{{ vm.name }}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"spacer\"></div>\n                        <div class=\"lg-column align-center\" [ngClass]=\"{ disabled: !opSettings.domain }\">\n                            <span>Select which layer to import technique links from. Leave blank to initialize without links.</span>\n                        </div>\n                    </div>\n\n                    <!-- metadata -->\n                    <div class=\"multi-column\">\n                        <div class=\"md-column\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"metadata\" [(ngModel)]=\"opSettings.metadataVM\" [disabled]=\"!opSettings.domain\">\n                                    <mat-option [value]=\"null\">none</mat-option>\n                                    <mat-option *ngFor=\"let vm of getFilteredVMs()\" [value]=\"vm\">{{ vm.name }}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"spacer\"></div>\n                        <div class=\"lg-column align-center\" [ngClass]=\"{ disabled: !opSettings.domain }\">\n                            <span>Select which layer to import technique metadata from. Leave blank to initialize without metadata.</span>\n                        </div>\n                    </div>\n\n                    <!-- enabled state -->\n                    <div class=\"multi-column\">\n                        <div class=\"md-column\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"states\" [(ngModel)]=\"opSettings.enabledVM\" [disabled]=\"!opSettings.domain\">\n                                    <mat-option [value]=\"null\">none</mat-option>\n                                    <mat-option *ngFor=\"let vm of getFilteredVMs()\" [value]=\"vm\">{{ vm.name }}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"spacer\"></div>\n                        <div class=\"lg-column align-center\" [ngClass]=\"{ disabled: !opSettings.domain }\">\n                            <span>Select which layer to import enabled/disabled states from. Leave blank to initialize all to enabled.</span>\n                        </div>\n                    </div>\n\n                    <!-- filters -->\n                    <div class=\"multi-column\">\n                        <div class=\"md-column\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"filters\" [(ngModel)]=\"opSettings.filterVM\" [disabled]=\"!opSettings.domain\">\n                                    <mat-option [value]=\"null\">none</mat-option>\n                                    <mat-option *ngFor=\"let vm of getFilteredVMs()\" [value]=\"vm\">{{ vm.name }}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"spacer\"></div>\n                        <div class=\"lg-column align-center\" [ngClass]=\"{ disabled: !opSettings.domain }\">\n                            <span>Select which layer to import filters from. Leave blank to initialize with no filters.</span>\n                        </div>\n                    </div>\n\n                    <!-- legend -->\n                    <div class=\"multi-column\">\n                        <div class=\"md-column\">\n                            <mat-form-field>\n                                <mat-select placeholder=\"legend\" [(ngModel)]=\"opSettings.legendVM\" [disabled]=\"!opSettings.domain\">\n                                    <mat-option [value]=\"null\">none</mat-option>\n                                    <mat-option *ngFor=\"let vm of getFilteredVMs()\" [value]=\"vm\">{{ vm.name }}</mat-option>\n                                </mat-select>\n                            </mat-form-field>\n                        </div>\n                        <div class=\"spacer\"></div>\n                        <div class=\"lg-column align-center\" [ngClass]=\"{ disabled: !opSettings.domain }\">\n                            <span>Select which layer to import the legend from. Leave blank to initialize with an empty legend.</span>\n                        </div>\n                    </div>\n\n                    <!-- create -->\n                    <button\n                        mat-button\n                        [disabled]=\"getScoreExpressionError() || !opSettings.domain\"\n                        (click)=\"layerByOperation(); showScoreVariables = false\">\n                        Create layer\n                    </button>\n                </div>\n            </mat-expansion-panel>\n\n            <!-- Customized Navigator-->\n            <mat-expansion-panel>\n                <mat-expansion-panel-header>\n                    <mat-panel-title>Create customized navigator</mat-panel-title>\n                    <mat-panel-description>Create a hyperlink to a customized UNVEIL Navigator</mat-panel-description>\n                </mat-expansion-panel-header>\n\n                <div class=\"multi-column-container\">\n                    <div class=\"section\">\n                        <!-- default layers-->\n                        <h2>Default layers</h2>\n                        <div class=\"multi-column left-align\">\n                            <div class=\"md-column\">\n                                <ul class=\"layer-links\">\n                                    <li *ngFor=\"let layerLinkURL of layerLinkURLs; let i = index; trackBy: trackByFunction\">\n                                        <mat-form-field>\n                                            <input type=\"text\" matInput [placeholder]=\"'default layer ' + (i + 1)\" [(ngModel)]=\"layerLinkURLs[i]\" />\n                                            <button mat-button matSuffix mat-icon-button aria-label=\"remove\" (click)=\"removeLayerLink(i)\">\n                                                <mat-icon>close</mat-icon>\n                                            </button>\n                                        </mat-form-field>\n                                    </li>\n                                    <li>\n                                        <button mat-raised-button (click)=\"addLayerLink()\">\n                                            add {{ layerLinkURLs.length > 0 ? 'another' : 'a' }} default layer\n                                        </button>\n                                    </li>\n                                </ul>\n                            </div>\n                            <div class=\"spacer\"></div>\n                            <div class=\"lg-column\">\n                                <span>Enter the URLs of layers hosted on the web. The custom navigator will open these layers by default.</span>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div class=\"section\">\n                        <!-- navigator features -->\n                        <h2>Navigator features</h2>\n                        <ng-container *ngFor=\"let feature of configService.featureList\">\n                            <div *ngIf=\"!feature.subfeatures\" class=\"multi-column left-align feature-row\">\n                                <div class=\"md-column align-center\">\n                                    <mat-checkbox [(ngModel)]=\"feature.enabled\">\n                                        {{ feature.name.split('_').join(' ') }}\n                                    </mat-checkbox>\n                                </div>\n                                <div class=\"spacer\"></div>\n                                <div class=\"lg-column\">\n                                    <span>{{ feature.description }}</span>\n                                </div>\n                            </div>\n                            <!-- subfeatures -->\n                            <div *ngIf=\"feature.subfeatures\">\n                                <h3 class=\"capitalize\">{{ feature.name.split('_').join(' ') }}</h3>\n                                <div class=\"subfeature-section\">\n                                    <ng-container *ngFor=\"let subfeature of feature.subfeatures\">\n                                        <div class=\"multi-column left-align feature-row\">\n                                            <div class=\"md-column align-center\">\n                                                <mat-checkbox [(ngModel)]=\"subfeature.enabled\">\n                                                    {{ subfeature.name.split('_').join(' ') }}\n                                                </mat-checkbox>\n                                            </div>\n                                            <div class=\"spacer\"></div>\n                                            <div class=\"lg-column\">\n                                                {{ subfeature.description }}\n                                            </div>\n                                        </div>\n                                    </ng-container>\n                                </div>\n                            </div>\n                        </ng-container>\n                    </div>\n                </div>\n\n                <!-- Custom Navigator URL -->\n                <div style=\"text-align: center\">\n                    <mat-form-field id=\"layerlinkfield\">\n                        <input\n                            id=\"layerLink\"\n                            type=\"text\"\n                            matInput\n                            placeholder=\"custom navigator URL\"\n                            (click)=\"selectLayerLink()\"\n                            [value]=\"getLayerLink()\"\n                            readonly />\n                        <button (click)=\"copyLayerLink()\" mat-button matSuffix mat-icon-button aria-label=\"copy\" matTooltip=\"copy\">\n                            <mat-icon>content_copy</mat-icon>\n                        </button>\n                        <mat-hint *ngIf=\"copiedRecently\">copied</mat-hint>\n                    </mat-form-field>\n                </div>\n            </mat-expansion-panel>\n        </mat-accordion>\n    </div>\n</ng-template>\n\n<!-- data table tab template -->\n<ng-template [ngIf]=\"activeTab && activeTab.isDataTable\">\n    <DataTable\n        [viewModel]=\"activeTab.viewModel\"\n        [currentDropdown]=\"dropdownEnabled\"\n        (dropdownChange)=\"dropdownEnabled = $event\"\n        (onScroll)=\"adjustHeader($event)\"></DataTable>\n</ng-template>\n","// utilities for working with browser cookies\n\n/**\n * Set a cookie\n * @param  {string} key            key to set under\n * @param  {string} value          value to set under key\n * @param  {number} expirationDays when cookie expires in days\n */\nconst setCookie = function (key: string, value: string, expirationDays: number) {\n    let d = new Date();\n    d.setTime(d.getTime() + expirationDays * 24 * 60 * 60 * 1000);\n    let expires = 'expires=' + d.toUTCString();\n    document.cookie = key + '=' + value + ';' + expires + ';path=/;SameSite=Strict';\n};\n\n/**\n * Get the value of the cookie under the given key\n * @param  {string} key to retrieve from\n * @return {string}     cookie value\n */\nconst getCookie = function (key: string): string {\n    let name = key + '=';\n    let decodedCookie = decodeURIComponent(document.cookie);\n    let ca = decodedCookie.split(';');\n\n    for (let c of ca) {\n        while (c.startsWith(' ')) {\n            c = c.substring(1);\n        }\n        if (c.indexOf(name) == 0) {\n            return c.substring(name.length, c.length);\n        }\n    }\n    return '';\n};\n/**\n * Does a cookie exist under the given key?\n * @param  {string} key to check\n * @return {boolean}    true if cookie is stored under key, false otherwise\n */\nconst hasCookie = function (key: string): boolean {\n    return getCookie(key) !== '';\n};\n\n/**\n * Delete the given cookie\n * @param {string} key to delete\n */\nconst deleteCookie = function (key: string) {\n    document.cookie = key + '=;expires=Thu, 01 Jan 1970 00:00:01 GMT;path=/;SameSite=Strict';\n};\n\nexport { setCookie, getCookie, hasCookie, deleteCookie };\n","'use strict';\nimport appPackageInfo from '../../../package.json';\n\nexport const navVersion: string = appPackageInfo.version;\nexport const layerVersion: string = '1.0.0';\nexport const minimumSupportedVersion: string = '1.0.0';\n","/**\n * @fileoverview\n * A TAXII 2.0 Javascript client library.\n * Converted to Typescript by Isabel Tuson 24 May 2018.\n * Added support for TAXII 2.1 by Charissa Miller 9 April 2024.\n *\n * @see https://github.com/workingDog/taxii2lib/\n * @see https://oasis-open.github.io/cti-documentation/\n *\n * @author R. Wathelet, September 2017\n * @modified by I. Tuson 24 May 2018\n * @modified by C. Miller 9 April 2024\n *\n * @version 0.3\n */\n\n/**\n * Provide asynchronous network communications to a TAXII 2.0 or 2.1 server.\n */\nexport class TaxiiConnect {\n    baseURL: string;\n    user: string;\n    password: string;\n    hash: string;\n    timeout: number;\n    version: string;\n    getConfig: any;\n    getStixConfig: any;\n    mediaType: string;\n\n    /**\n     * provide network communication to a Taxii 2.0 or 2.1 server.\n     * @param {String} url - the base url of the Taxii2 server, for example https://example.com/\n     * @param {String} user - the user name required for authentication.\n     * @param {String} password - the user password required for authentication.\n     * @param {Integer} timeout - the connection timeout in millisec\n     */\n    constructor(url, user, password, timeout = 10000) {\n        this.baseURL = TaxiiConnect.withoutLastSlash(url);\n        this.user = user;\n        this.password = password;\n        this.hash = btoa(this.user + ':' + this.password);\n        this.timeout = timeout;\n\n        this.version = '2.1';\n        this.mediaType = `application/taxii+json;version=${this.version}`;\n        // backwards compatibility for STIX 2.0\n        if (url.includes('cti-taxii.mitre.org')) {\n            this.version = '2.0';\n            this.mediaType = 'application/vnd.oasis.stix+json';\n        }\n\n        // default headers configurations\n        this.getConfig = {\n            method: 'get',\n            headers: new Headers({\n                Accept: this.mediaType,\n                version: this.version,\n                Authorization: 'Basic ' + this.hash,\n            }),\n        };\n\n        this.getStixConfig = {\n            method: 'get',\n            headers: new Headers({\n                Accept: this.mediaType,\n                version: this.version,\n                Authorization: 'Basic ' + this.hash,\n            }),\n        };\n    }\n\n    // original code from: https://github.com/jkomyno/fetch-timeout\n    timeoutPromise(promise, timeout, error) {\n        return new Promise((resolve, reject) => {\n            setTimeout(() => reject(error), timeout);\n            promise.then(resolve, reject);\n        });\n    }\n    // original code from: https://github.com/jkomyno/fetch-timeout\n    fetchTimeout(url, options, timeout, error) {\n        error = error || 'Timeout error';\n        options = options || {};\n        timeout = timeout || 10000;\n        return this.timeoutPromise(fetch(url, options), timeout, error);\n    }\n\n    /**\n     * send an async request (GET or POST) to the taxii2 server.\n     *\n     * @param {String} path - the full path to connect to.\n     * @param {Object} config - the request configuration, see getConfig and postConfig for examples\n     * @param {Object} filter - the filter object describing the filtering requested, this is added to the path as a query string\n     * @returns {Promise} the server response in json.\n     */\n    async asyncFetch(path, config, filter?) {\n        //CHANGED\n        let fullPath = !filter ? path : path + '?' + TaxiiConnect.asQueryString(filter);\n        return await this.fetchTimeout(fullPath, config, this.timeout, 'connection timeout')\n            .then((res: Response) => res.json())\n            .catch((err) => {\n                throw new Error('fetch error: ' + err);\n            });\n    }\n\n    /**\n     * send a GET async request to the taxii2 server.\n     *\n     * The server response is assigned to the cache attribute of the options object, and\n     * the options flag attribute is set to true if a server request was performed.\n     * Otherwise if the options.flag is initially true, the cached response (options.cache) is returned and\n     * no server request is performed.\n     * To force a server request used invalidate(), for example: server.invalidate()\n     *\n     * @param {String} path - the path to connect to.\n     * @param {Object} options - an option object of the form: { \"cache\": {}, \"flag\": false }\n     * @param {Object} filter - the filter object describing the filtering requested, this is added to the path as a query string\n     * @param {Object} config - the request configuration\n     * @returns {Promise} the server response object\n     */\n    async fetchThis(path, options, filter?, config?) {\n        //CHANGED\n        let conf = config === undefined ? this.getConfig : config;\n        if (!options.flag) {\n            options.cache = await this.asyncFetch(path, conf, filter);\n            options.flag = true;\n        }\n        return options.cache;\n    }\n\n    /**\n     * return the url without the last slash.\n     * @param {String} url - the URL string to process.\n     * @returns {String} the url without the last slash.\n     */\n    static withoutLastSlash(url) {\n        return url.substr(-1) === '/' ? url.substr(0, url.length - 1) : url;\n    }\n\n    /**\n     * return the url with a terminating slash.\n     * @param {String} url - the URL string to process.\n     * @returns {String} the url with a terminating slash.\n     */\n    static withLastSlash(url) {\n        return url.substr(-1) === '/' ? url : url + '/';\n    }\n\n    /**\n     * convert a filter object into a query string.\n     * @param {Object} filter - the filter object to process.\n     * @returns {String} the query string corresponding to the filter object.\n     */\n    static asQueryString(filter) {\n        return Object.keys(filter)\n            .map((k) => {\n                let value = k === 'added_after' ? k : 'match[' + k + ']';\n                return encodeURIComponent(value) + '=' + encodeURIComponent(filter[k]);\n            })\n            .join('&');\n    }\n}\n\n/**\n * A Collection resource endpoint.\n */\nexport class Collection {\n    collectionInfo: any;\n    api_root_path: string;\n    conn: TaxiiConnect;\n    path: string;\n    colOptions: any;\n    objsOptions: any;\n    objOptions: any;\n    manOptions: any;\n\n    /**\n     * Collection resource endpoint.\n     * @param {CollectionInfoObject} collectionInfo - the collection object of this endpoint.\n     * @param {String} api_root_path - the full path to the desired api root endpoint.\n     * @param {TaxiiConnection} conn - a TaxiiConnection class instance.\n     */\n    constructor(collectionInfo, api_root_path, conn) {\n        this.collectionInfo = collectionInfo;\n\n        this.api_root_path = TaxiiConnect.withLastSlash(api_root_path + 'api/v21');\n        // backwards compatibility for STIX 2.0\n        if (api_root_path.includes('cti-taxii.mitre.org')) {\n            // cont. support for stix 2.0\n            this.api_root_path = TaxiiConnect.withLastSlash(api_root_path + 'stix');\n        }\n        this.conn = conn;\n        // construct the path\n        this.path = this.api_root_path + 'collections/' + collectionInfo.id + '/';\n        // cache represents the cached results and flag determines if it needs a re-fetch\n        this.colOptions = { cache: {}, flag: false };\n        this.objsOptions = { cache: {}, flag: false };\n        this.objOptions = { cache: {}, flag: false };\n        this.manOptions = { cache: {}, flag: false };\n    }\n\n    /**\n     * check that the collection allows reading, if true then return the function passed in\n     * else log an error\n     * @param {Function} func - the function to return if the collection allows reading it\n     * @returns {Function} the function if this collection allow reading else undefined\n     */\n    ifCanRead(func) {\n        if (this.collectionInfo.can_read) {\n            return func;\n        } else {\n            console.log('this collection does not allow reading: \\n' + JSON.stringify(this.collectionInfo));\n        }\n    }\n\n    /**\n     * check that the collection allows writing, if true then return the function passed in else log an error\n     * @param {Function} func - the function to return if the collection allows writing it\n     * @returns {Function} the function if this collection allow writing else undefined\n     */\n    ifCanWrite(func) {\n        if (this.collectionInfo.can_write) {\n            return func;\n        } else {\n            console.log('this collection does not allow writing: \\n' + JSON.stringify(this.collectionInfo));\n        }\n    }\n\n    /**\n     * retrieve a STIX-2 bundle from this Collection.\n     *\n     * @param {Object} filter - the filter object describing the filtering requested, this is added to the path as a query string.\n     * For example: {\"added_after\": \"2016-02-01T00:00:01.000Z\"}\n     *              {\"type\": [\"incident\",\"ttp\",\"actor\"]}\n     * @param {String} range - a pagination range string, for example \"0-10\"\n     * @returns {Promise} the Bundle with the STIX-2 objects of this collection\n     */\n    async getObjects(filter, range) {\n        let theConfig = this.conn.getStixConfig;\n        if (range !== undefined) {\n            theConfig = {\n                method: 'get',\n                headers: new Headers({\n                    Accept: this.conn.mediaType,\n                    version: this.conn.version,\n                    Authorization: 'Basic ' + this.conn.hash, //CHANGED\n                    Range: 'items=' + range,\n                }),\n            };\n        }\n        return this.ifCanRead(this.conn.fetchThis(this.path + 'objects/', this.objsOptions, filter, theConfig));\n    }\n}\n","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { ViewModelsService } from '../services/viewmodels.service';\nimport { DataService } from '../services/data.service';\nimport * as globals from '../utils/globals';\n\n@Component({\n    selector: 'app-version-upgrade',\n    templateUrl: './version-upgrade.component.html',\n    styleUrls: ['./version-upgrade.component.scss'],\n    providers: [ViewModelsService],\n})\nexport class VersionUpgradeComponent implements OnInit {\n    navVersion = globals.navVersion;\n    currVersion: string;\n    vmVersion: string;\n    layerName: string;\n\n    constructor(\n        public dialogRef: MatDialogRef<VersionUpgradeComponent>,\n        public dataService: DataService,\n        private viewModelsService: ViewModelsService,\n        @Inject(MAT_DIALOG_DATA) public data\n    ) {}\n\n    ngOnInit() {\n        this.currVersion = this.data.currVersion;\n        this.vmVersion = this.data.vmVersion;\n        this.layerName = this.data.layerName;\n    }\n\n    upgradeVersion(upgrade: boolean) {\n        this.dialogRef.close({ upgrade: upgrade });\n    }\n}\n","<div class=\"mat-dialog\">\n    <div>\n        <h3 mat-dialog-title>Upgrade layer version?</h3>\n        <mat-dialog-content>\n            <p>\n                The layer \"{{ layerName }}\" uses an outdated version of ATT&CK (v{{ vmVersion }}). Do you want to open the workflow to upgrade this\n                layer to ATT&CK v{{ currVersion }}?\n                <em *ngIf=\"!this.dataService.isSupported(vmVersion)\">\n                    This version is not supported by Navigator v{{ navVersion }} and must be upgraded for use.\n                </em>\n            </p>\n        </mat-dialog-content>\n    </div>\n\n    <div>\n        <mat-dialog-actions>\n            <button mat-button (click)=\"upgradeVersion(true)\">Yes</button>\n            <button mat-button (click)=\"upgradeVersion(false)\">No</button>\n        </mat-dialog-actions>\n    </div>\n</div>\n","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n    production: false,\n};\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n    enableProdMode();\n}\n\nplatformBrowserDynamic()\n    .bootstrapModule(AppModule)\n    .catch((err) => console.log(err));\n","/* (ignored) */"],"names":["TemplateRef","EventEmitter","Tab","Domain","Version","VersionUpgradeComponent","HelpComponent","SvgExportComponent","ViewModelsService","ChangelogComponent","forkJoin","is","globals","LayerInformationComponent","i0","ctx_r50","ctx_r108","ctx_r117","ctx_r9","ctx_r10","TabsComponent","constructor","dialog","viewModelsService","dataService","http","configService","snackBar","url","undefined","version","identifier","domain","gradientVM","coloringVM","commentVM","linkVM","metadataVM","enabledVM","filterVM","scoreExpression","legendVM","console","debug","newBlankTab","loadTabs","defaultLayers","then","layerTabs","length","newLayer","domains","id","activeTab","selectTab","bannerContent","banner","latestDomains","filterDomains","versions","minimumSupportedVersion","navVersion","ngAfterViewInit","safari","safariDialogRef","open","safariWarning","width","disableClose","panelClass","userTheme","adjustHeader","newHeight","adjustedHeaderHeight","bundleURL","getNamedFragmentValue","bundleVersion","bundleDomain","layerURLs","self","newLayerFromURL","first","loadLayerFromURL","openTab","title","viewModel","isCloseable","replace","forceNew","isDataTable","tab","find","t","domainVersionID","push","i","closeActiveTab","splice","dropdownEnabled","viewModels","forEach","sidebarContentType","sidebarOpened","closeTab","allowNoTab","action","destroyViewModel","findIndex","error","handleTabClick","filter","d","hasFeature","featureName","getFeature","handleUserThemeChange","theme","onUserThemeChange","emit","openDialog","dialogName","settings","maxWidth","openSVGDialog","data","vm","getUniqueLayerName","root","isInteger","str","n","Math","floor","Number","String","name","startsWith","max","substr","substring","loadData","obj","domainID","toLowerCase","getDomainVersionID","valid","validateInput","URL","toString","subscription","get","subscribe","next","res","exists","isCustom","v","number","domainObject","err","alert","complete","unsubscribe","isNaN","Error","urls","TypeError","message","getDomain","dataLoaded","loadDomainData","newViewModel","deserialize","loadVMData","indexToChar","index","viewModelIndex","fromCharCode","charToIndex","char","currChar","layerByOperation","scoreVariables","Map","regex","matches","opSettings","match","set","layerName","vms","Array","from","values","every","layerOperation","updateGradient","getScoreExpressionError","scope","noMatch","openUploadPrompt","input","document","getElementById","click","versionUpgradeDialog","dataPromise","Promise","resolve","reject","currVersion","latestVersion","vmVersion","afterClosed","result","upgrade","isSupported","newDomainVersionID","oldID","newID","upgradeLayer","oldViewModel","serialized","compareTo","openSidebar","selectTechniquesAcrossTactics","loads","dataSubscription","old","new","versionChangelog","compareVersions","initCopyAnnotations","catch","loadLayerFromFile","files","readJSONFile","file","reader","FileReader","onload","e","loadObjAsLayer","layerObj","layerVersionStr","deserializeDomainVersionID","versionMismatchWarning","layerFile","JSON","parse","layer","readAsText","globalVersionSplit","layerVersion","split","snackMessage","versionMinorSnackbarRef","duration","onAction","versionDialogRef","versionWarning","objVersion","globalVersion","_","loadURL","loadLayerAsync","trackByFunction","addLayerLink","layerLinkURLs","removeLayerLink","getLayerLink","window","location","href","join","layerLinkURL","encodeURIComponent","feature","featureList","subfeatures","subfeature","enabled","selectLayerLink","copyText","value","select","copyLayerLink","execCommand","copiedRecently","setTimeout","isAlphabetical","text","test","RegExp","results","exec","decodeURIComponent","getFilteredVMs","selectors","viewQuery","decls","vars","consts","template","TaxiiConnect","user","password","timeout","baseURL","withoutLastSlash","hash","btoa","mediaType","includes","getConfig","method","headers","Headers","Accept","Authorization","getStixConfig","timeoutPromise","promise","fetchTimeout","options","fetch","asyncFetch","path","config","fullPath","asQueryString","json","fetchThis","conf","flag","cache","withLastSlash","Object","keys","map","k","Collection","collectionInfo","api_root_path","conn","colOptions","objsOptions","objOptions","manOptions","ifCanRead","func","can_read","log","stringify","ifCanWrite","can_write","getObjects","range","theConfig","Range"],"sourceRoot":"webpack:///","x_google_ignoreList":[82]}